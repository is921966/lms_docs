---
description:
globs:
alwaysApply: false
---
# Client-Server Integration Guidelines

## API Contract Definition

### Clear API Contracts
Обеспечьте четко определенный контракт между клиентом и сервером:
- Используйте OpenAPI/Swagger спецификацию для документирования API
- Версионируйте API для обратной совместимости
- Документируйте все endpoints, параметры, и форматы ответов
- Синхронизируйте изменения между frontend и backend командами

### OpenAPI Specification Example
```yaml
openapi: 3.0.0
info:
  title: LMS API
  version: 1.0.0
paths:
  /api/v1/auth/login:
    post:
      summary: User authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
```

## Data Transfer Objects (DTO) Pattern

### Separate API Models from Domain
Используйте DTO для сетевого обмена данными:
```swift
// Infrastructure/Network/DTOs/UserDTO.swift
struct UserDTO: Codable {
    let id: String
    let email: String
    let fullName: String
    let createdAt: String
    
    enum CodingKeys: String, CodingKey {
        case id
        case email
        case fullName = "full_name"
        case createdAt = "created_at"
    }
}

// Domain/Entities/User.swift
struct User {
    let id: UUID
    let email: Email
    let name: PersonName
    let registrationDate: Date
}
```

### DTO Benefits
- Изоляция domain модели от изменений API
- Гибкость в маппинге полей (snake_case → camelCase)
- Версионирование API без изменения domain
- Валидация данных на границе системы

## Mappers and Adapters

### Clean Mapping Layer
Реализуйте слой адаптеров для преобразования данных:
```swift
// Application/Mappers/UserMapper.swift
protocol UserMapperProtocol {
    func toDomain(_ dto: UserDTO) throws -> User
    func toDTO(_ user: User) -> UserDTO
}

final class UserMapper: UserMapperProtocol {
    private let dateFormatter: ISO8601DateFormatter
    
    init() {
        self.dateFormatter = ISO8601DateFormatter()
    }
    
    func toDomain(_ dto: UserDTO) throws -> User {
        guard let uuid = UUID(uuidString: dto.id),
              let email = try? Email(dto.email),
              let date = dateFormatter.date(from: dto.createdAt) else {
            throw MappingError.invalidData
        }
        
        return User(
            id: uuid,
            email: email,
            name: PersonName(fullName: dto.fullName),
            registrationDate: date
        )
    }
    
    func toDTO(_ user: User) -> UserDTO {
        UserDTO(
            id: user.id.uuidString,
            email: user.email.value,
            fullName: user.name.fullName,
            createdAt: dateFormatter.string(from: user.registrationDate)
        )
    }
}
```

### Mapper Location
- Адаптеры располагаются на границах слоев
- Чистые функции без побочных эффектов
- Тестируемые независимо от сети/БД

## Error Handling

### Centralized Error Processing
Обрабатывайте ошибки и сбои сети централизованно:
```swift
// Domain/Errors/AppError.swift
enum AppError: Error {
    case network(NetworkError)
    case authentication(AuthError)
    case validation(ValidationError)
    case server(ServerError)
    case unknown(Error)
}

enum NetworkError: Error {
    case noConnection
    case timeout
    case invalidURL
}

enum ServerError: Error {
    case internalError(code: Int)
    case maintenance
    case unavailable
}

// Infrastructure/Network/ErrorMapper.swift
final class ErrorMapper {
    func mapError(_ error: Error, response: HTTPURLResponse?) -> AppError {
        if let response = response {
            switch response.statusCode {
            case 401:
                return .authentication(.invalidCredentials)
            case 403:
                return .authentication(.accessDenied)
            case 400...499:
                return .validation(.invalidRequest)
            case 500...599:
                return .server(.internalError(code: response.statusCode))
            default:
                break
            }
        }
        
        if (error as NSError).code == NSURLErrorNotConnectedToInternet {
            return .network(.noConnection)
        }
        
        if (error as NSError).code == NSURLErrorTimedOut {
            return .network(.timeout)
        }
        
        return .unknown(error)
    }
}
```

### User-Friendly Error Messages
```swift
extension AppError {
    var userMessage: String {
        switch self {
        case .network(.noConnection):
            return "Нет подключения к интернету. Проверьте соединение."
        case .network(.timeout):
            return "Превышено время ожидания. Попробуйте позже."
        case .authentication(.invalidCredentials):
            return "Неверный email или пароль."
        case .server(.maintenance):
            return "Сервер на техническом обслуживании."
        default:
            return "Произошла ошибка. Попробуйте позже."
        }
    }
}
```

## Network Client Abstraction

### Protocol-Based Design
Поддерживайте слабую связанность через протоколы:
```swift
// Domain/Repositories/NetworkClientProtocol.swift
protocol NetworkClientProtocol {
    func request<T: Decodable>(
        _ endpoint: Endpoint
    ) async throws -> T
    
    func upload(
        _ data: Data,
        to endpoint: Endpoint
    ) async throws -> UploadResponse
}

// Infrastructure/Network/URLSessionNetworkClient.swift
final class URLSessionNetworkClient: NetworkClientProtocol {
    private let session: URLSession
    private let baseURL: URL
    private let interceptors: [NetworkInterceptor]
    
    init(
        session: URLSession = .shared,
        baseURL: URL,
        interceptors: [NetworkInterceptor] = []
    ) {
        self.session = session
        self.baseURL = baseURL
        self.interceptors = interceptors
    }
    
    func request<T: Decodable>(
        _ endpoint: Endpoint
    ) async throws -> T {
        let request = try buildRequest(for: endpoint)
        let modifiedRequest = try await applyInterceptors(request)
        
        let (data, response) = try await session.data(for: modifiedRequest)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw NetworkError.invalidResponse
        }
        
        try validateResponse(httpResponse, data: data)
        
        return try JSONDecoder().decode(T.self, from: data)
    }
}
```

### Endpoint Definition
```swift
// Infrastructure/Network/Endpoints/Endpoint.swift
protocol Endpoint {
    var path: String { get }
    var method: HTTPMethod { get }
    var headers: [String: String]? { get }
    var parameters: [String: Any]? { get }
    var body: Data? { get }
}

// Infrastructure/Network/Endpoints/UserEndpoints.swift
enum UserEndpoint: Endpoint {
    case profile(userId: String)
    case updateProfile(userId: String, data: UpdateProfileDTO)
    case deleteAccount(userId: String)
    
    var path: String {
        switch self {
        case .profile(let id), .updateProfile(let id, _), .deleteAccount(let id):
            return "/users/\(id)"
        }
    }
    
    var method: HTTPMethod {
        switch self {
        case .profile:
            return .get
        case .updateProfile:
            return .put
        case .deleteAccount:
            return .delete
        }
    }
    
    var body: Data? {
        switch self {
        case .updateProfile(_, let data):
            return try? JSONEncoder().encode(data)
        default:
            return nil
        }
    }
}
```

## Request/Response Interceptors

### Chain of Responsibility Pattern
```swift
// Infrastructure/Network/Interceptors/NetworkInterceptor.swift
protocol NetworkInterceptor {
    func intercept(_ request: URLRequest) async throws -> URLRequest
    func intercept(_ response: URLResponse, data: Data) async throws -> (URLResponse, Data)
}

// Authentication Interceptor
final class AuthInterceptor: NetworkInterceptor {
    private let tokenProvider: TokenProviderProtocol
    
    func intercept(_ request: URLRequest) async throws -> URLRequest {
        var modifiedRequest = request
        
        if let token = await tokenProvider.getAccessToken() {
            modifiedRequest.setValue(
                "Bearer \(token)",
                forHTTPHeaderField: "Authorization"
            )
        }
        
        return modifiedRequest
    }
    
    func intercept(_ response: URLResponse, data: Data) async throws -> (URLResponse, Data) {
        if let httpResponse = response as? HTTPURLResponse,
           httpResponse.statusCode == 401 {
            try await tokenProvider.refreshToken()
            throw NetworkError.tokenExpired // Retry with new token
        }
        
        return (response, data)
    }
}

// Logging Interceptor
final class LoggingInterceptor: NetworkInterceptor {
    func intercept(_ request: URLRequest) async throws -> URLRequest {
        Logger.network.debug("🌐 Request: \(request.url?.absoluteString ?? "")")
        return request
    }
    
    func intercept(_ response: URLResponse, data: Data) async throws -> (URLResponse, Data) {
        if let httpResponse = response as? HTTPURLResponse {
            Logger.network.debug("✅ Response: \(httpResponse.statusCode)")
        }
        return (response, data)
    }
}
```

## Caching Strategy

### HTTP Cache
```swift
// Infrastructure/Network/Cache/HTTPCache.swift
protocol HTTPCacheProtocol {
    func cache(response: CachedResponse, for request: URLRequest)
    func getCachedResponse(for request: URLRequest) -> CachedResponse?
    func removeCachedResponse(for request: URLRequest)
    func removeAllCachedResponses()
}

struct CachedResponse {
    let data: Data
    let response: URLResponse
    let timestamp: Date
    let maxAge: TimeInterval
    
    var isExpired: Bool {
        Date().timeIntervalSince(timestamp) > maxAge
    }
}
```

### Cache Policy
```swift
enum CachePolicy {
    case networkOnly
    case cacheFirst
    case networkFirst
    case cacheOnly
    case custom(TimeInterval)
}

extension NetworkClientProtocol {
    func request<T: Decodable>(
        _ endpoint: Endpoint,
        cachePolicy: CachePolicy = .networkOnly
    ) async throws -> T {
        // Implementation with cache logic
    }
}
```

## Offline Support

### Queue for Offline Requests
```swift
// Infrastructure/Network/OfflineQueue.swift
protocol OfflineQueueProtocol {
    func enqueue(_ request: OfflineRequest)
    func processQueue() async
    func getPendingRequests() -> [OfflineRequest]
}

struct OfflineRequest: Codable {
    let id: UUID
    let endpoint: String
    let method: String
    let body: Data?
    let timestamp: Date
    let retryCount: Int
}

final class OfflineQueue: OfflineQueueProtocol {
    @Published private(set) var pendingRequests: [OfflineRequest] = []
    private let storage: UserDefaults
    private let networkMonitor: NetworkMonitorProtocol
    
    func enqueue(_ request: OfflineRequest) {
        pendingRequests.append(request)
        saveToDisk()
        
        Task {
            if networkMonitor.isConnected {
                await processQueue()
            }
        }
    }
}
```

## API Versioning

### Version Management
```swift
enum APIVersion: String {
    case v1 = "v1"
    case v2 = "v2"
    
    var basePath: String {
        "/api/\(rawValue)"
    }
}

// Usage
let endpoint = "\(APIVersion.v1.basePath)/users"
```

### Backward Compatibility
- Поддерживайте старые версии API минимум 6 месяцев
- Используйте deprecation warnings в headers
- Документируйте migration guide для новых версий

## Testing Network Layer

### Mock Network Client
```swift
final class MockNetworkClient: NetworkClientProtocol {
    var mockResponses: [String: Result<Data, Error>] = [:]
    var requestCallCount = 0
    var lastRequest: Endpoint?
    
    func request<T: Decodable>(_ endpoint: Endpoint) async throws -> T {
        requestCallCount += 1
        lastRequest = endpoint
        
        guard let result = mockResponses[endpoint.path] else {
            throw NetworkError.notFound
        }
        
        switch result {
        case .success(let data):
            return try JSONDecoder().decode(T.self, from: data)
        case .failure(let error):
            throw error
        }
    }
}
```

## AI Generation Guidelines

When generating network code:

1. **Always use DTOs** - never expose domain models to network layer
2. **Implement proper error handling** - map all errors to app-specific types
3. **Use protocols** for testability and flexibility
4. **Add interceptors** for cross-cutting concerns
5. **Consider offline scenarios** - queue requests when offline
6. **Version your APIs** properly
7. **Write comprehensive tests** including error cases

Remember: The network layer is a critical boundary - keep it clean, testable, and resilient to changes.

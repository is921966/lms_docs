---
description:
globs:
alwaysApply: false
---
# Naming and Project Structure Guidelines

## Swift Naming Conventions

### General Rules
Придерживайтесь стандартов кодирования Swift при именовании:
- **Types** (classes, structs, enums, protocols): `UpperCamelCase`
- **Variables, functions, properties**: `lowerCamelCase`
- **Constants**: `lowerCamelCase` (not UPPER_SNAKE_CASE)
- **Acronyms**: Treat as words (e.g., `UrlSession` ❌, `URLSession` ✅)

### Type Naming
```swift
// ✅ Good
struct UserProfile { }
class NetworkManager { }
enum PaymentStatus { }
protocol Cacheable { }

// ❌ Bad
struct user_profile { }
class NetworkMngr { }
enum payment_status { }
protocol CacheableProtocol { } // избегайте суффикса Protocol
```

### Variable and Function Naming
```swift
// ✅ Good
var userEmail: String
func calculateTotalPrice(for items: [Item]) -> Decimal
func configure(with settings: Settings)

// ❌ Bad
var usrEml: String
func calc(x: [Item]) -> Decimal
func config(_ s: Settings)
```

## Apple API Design Guidelines

### Clarity at the Point of Use
Имена должны быть выразительными и читаться как фраза:
```swift
// ✅ Good - читается как предложение
x.insert(y, at: z)          // "x, insert y at z"
x.subviews(havingColor: y)  // "x's subviews having color y"
x.capitalizingNouns()       // "x, capitalizing nouns"

// ❌ Bad - неясное намерение
x.insert(y, z)
x.subviews(color: y)
x.nounCapitalize()
```

### Use of Prepositions
```swift
// ✅ Good
func move(from start: Point, to end: Point)
func fadeIn(with duration: TimeInterval)
func convert(_ value: Double, from source: Unit, to target: Unit)

// ❌ Bad
func move(start: Point, end: Point)
func fadeIn(duration: TimeInterval)
func convert(_ value: Double, source: Unit, target: Unit)
```

### Boolean Properties and Functions
```swift
// ✅ Good - читаются как утверждения
var isEnabled: Bool
var hasCompleted: Bool
func canEdit() -> Bool
func shouldRefresh() -> Bool

// ❌ Bad
var enabled: Bool
var completed: Bool
func edit() -> Bool
func refresh() -> Bool
```

## Project Structure

### Модульная организация
Структурируйте проект по функциональным областям и слоям:

```
LMS_App/
├── LMS/
│   ├── App/                      # App lifecycle, configuration
│   │   ├── LMSApp.swift
│   │   ├── AppDelegate.swift
│   │   └── Configuration/
│   │
│   ├── Domain/                   # Business logic layer
│   │   ├── Entities/
│   │   ├── UseCases/
│   │   ├── Repositories/
│   │   └── ValueObjects/
│   │
│   ├── Application/              # Application services
│   │   ├── Services/
│   │   ├── DTOs/
│   │   └── Mappers/
│   │
│   ├── Presentation/             # UI layer
│   │   ├── Screens/              # Grouped by feature
│   │   │   ├── Authentication/
│   │   │   │   ├── Login/
│   │   │   │   │   ├── LoginView.swift
│   │   │   │   │   └── LoginViewModel.swift
│   │   │   │   └── Registration/
│   │   │   │
│   │   │   ├── Courses/
│   │   │   │   ├── List/
│   │   │   │   └── Details/
│   │   │   │
│   │   │   └── Profile/
│   │   │
│   │   ├── Components/           # Reusable UI components
│   │   │   ├── Buttons/
│   │   │   ├── Cards/
│   │   │   └── Forms/
│   │   │
│   │   └── DesignSystem/         # UI tokens and themes
│   │       ├── Tokens.swift
│   │       ├── Theme.swift
│   │       └── Modifiers/
│   │
│   ├── Infrastructure/           # External dependencies
│   │   ├── Network/
│   │   │   ├── APIClient.swift
│   │   │   ├── Endpoints/
│   │   │   └── Interceptors/
│   │   │
│   │   ├── Persistence/
│   │   │   ├── CoreData/
│   │   │   └── UserDefaults/
│   │   │
│   │   └── DI/                   # Dependency Injection
│   │       └── AppContainer.swift
│   │
│   ├── Resources/                # Assets, localization
│   │   ├── Assets.xcassets
│   │   ├── Localizable.xcstrings
│   │   └── Fonts/
│   │
│   └── Support/                  # Utilities, extensions
│       ├── Extensions/
│       ├── Helpers/
│       └── Constants/
│
├── LMSTests/                     # Unit tests
│   ├── Domain/
│   ├── Application/
│   ├── Presentation/
│   └── Infrastructure/
│
├── LMSUITests/                   # UI tests
│   ├── Screens/
│   ├── Helpers/
│   └── TestData/
│
└── LMSSnapshotTests/            # Snapshot tests
```

### Правило "один файл - одна сущность"
```swift
// ✅ Good - User.swift
struct User {
    let id: UUID
    let email: String
    let name: String
}

// ❌ Bad - Models.swift containing multiple types
struct User { }
struct Course { }
struct Lesson { }
```

### Группировка связанных файлов
```
// ✅ Good - связанные файлы рядом
CourseList/
├── CourseListView.swift
├── CourseListViewModel.swift
├── CourseListModels.swift
└── CourseRowView.swift

// ❌ Bad - разбросаны по проекту
Views/CourseListView.swift
ViewModels/CourseListViewModel.swift
Models/CourseListModels.swift
Components/CourseRowView.swift
```

## Test Organization

### Зеркальная структура
Тесты должны повторять структуру основного кода:
```
// Source
LMS/Domain/Entities/User.swift
LMS/Domain/UseCases/LoginUserUseCase.swift

// Tests
LMSTests/Domain/Entities/UserTests.swift
LMSTests/Domain/UseCases/LoginUserUseCaseTests.swift
```

### Test Naming
```swift
// Pattern: test_[Method]_[State]_[ExpectedResult]
func test_login_withValidCredentials_returnsUser()
func test_login_withInvalidEmail_throwsValidationError()
func test_calculatePrice_withDiscount_appliesCorrectAmount()

// BDD Style
func test_givenValidUser_whenLogin_thenReturnsToken()
```

## File Templates

### View File Template
```swift
//
//  LoginView.swift
//  LMS
//
//  Created by [Author] on [Date].
//

import SwiftUI

struct LoginView: View {
    @StateObject private var viewModel: LoginViewModel
    
    init(viewModel: LoginViewModel) {
        _viewModel = StateObject(wrappedValue: viewModel)
    }
    
    var body: some View {
        // Implementation
    }
}

// MARK: - Previews
#if DEBUG
struct LoginView_Previews: PreviewProvider {
    static var previews: some View {
        LoginView(viewModel: .preview)
    }
}
#endif
```

### ViewModel File Template
```swift
//
//  LoginViewModel.swift
//  LMS
//
//  Created by [Author] on [Date].
//

import Foundation
import Combine

@MainActor
final class LoginViewModel: ObservableObject {
    // MARK: - Published Properties
    @Published var email = ""
    @Published var password = ""
    @Published var isLoading = false
    @Published var error: Error?
    
    // MARK: - Dependencies
    private let loginUseCase: LoginUserUseCaseProtocol
    
    // MARK: - Initialization
    init(loginUseCase: LoginUserUseCaseProtocol) {
        self.loginUseCase = loginUseCase
    }
    
    // MARK: - Methods
    func login() async {
        // Implementation
    }
}

// MARK: - Preview Support
#if DEBUG
extension LoginViewModel {
    static var preview: LoginViewModel {
        LoginViewModel(loginUseCase: MockLoginUseCase())
    }
}
#endif
```

## Constants and Magic Numbers

### Use Named Constants
```swift
// ✅ Good
enum Layout {
    static let defaultPadding: CGFloat = 16
    static let cornerRadius: CGFloat = 12
    static let animationDuration: TimeInterval = 0.3
}

view.padding(Layout.defaultPadding)

// ❌ Bad
view.padding(16)
```

### API Constants
```swift
// ✅ Good
enum API {
    static let baseURL = URL(string: "https://api.example.com/v1")!
    
    enum Timeout {
        static let `default`: TimeInterval = 30
        static let upload: TimeInterval = 300
    }
    
    enum HTTPHeader {
        static let contentType = "Content-Type"
        static let authorization = "Authorization"
    }
}

// ❌ Bad
let url = "https://api.example.com/v1/users"
request.timeoutInterval = 30
```

## Import Organization

### Order and Grouping
```swift
// 1. System frameworks
import Foundation
import UIKit
import SwiftUI
import Combine

// 2. Third-party frameworks
import Alamofire
import SwiftyJSON

// 3. Local modules
import Domain
import Application

// 4. Test imports (in test files)
@testable import LMS
import XCTest
```

## Documentation Comments

### Use Swift Documentation Format
```swift
/// Authenticates a user with the provided credentials.
/// - Parameters:
///   - email: The user's email address
///   - password: The user's password
/// - Returns: An authenticated User object
/// - Throws: `AuthenticationError` if credentials are invalid
func authenticate(email: String, password: String) async throws -> User {
    // Implementation
}
```

### MARK Comments for Organization
```swift
// MARK: - Properties
// MARK: - Lifecycle
// MARK: - Public Methods
// MARK: - Private Methods
// MARK: - Actions
// MARK: - Helpers
```

## AI Code Generation Rules

When generating code:

1. **Follow Swift conventions** strictly
2. **Use descriptive names** - no abbreviations
3. **Organize by feature** not by type
4. **One type per file** always
5. **Mirror test structure** to source
6. **Document public APIs** with doc comments
7. **Group related functionality** with MARK comments

Remember: Good naming and organization makes code self-documenting and reduces cognitive load for the entire team.

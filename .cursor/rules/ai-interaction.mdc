---
description:
globs:
alwaysApply: false
---
# AI Pair Programming Guidelines

## Core Philosophy

Treat AI (Claude/Cursor) as your pair programming partner - an experienced developer who:
- Knows patterns and best practices
- Can suggest improvements
- Needs clear context and constraints
- Should be questioned and verified

**ВАЖНО**: AI не заменяет человека. Всегда сохраняйте за инженером роль окончательного решения и проверки качества кода.

## Security and Data Protection

### Protect Sensitive Information
**НЕ ПЕРЕДАВАЙТЕ** модели конфиденциальный или коммерчески тайный код без необходимости:
- ❌ Пароли, API ключи, токены
- ❌ Личные данные пользователей
- ❌ Proprietary алгоритмы
- ❌ Конфиденциальная бизнес-логика
- ❌ Production endpoints и credentials

### Data Anonymization
Перед отправкой кода в AI:
```swift
// ❌ Bad - exposing real data
let apiKey = "sk-1234567890abcdef"
let userEmail = "john.doe@company.com"
let dbPassword = "MySecurePass123!"

// ✅ Good - anonymized
let apiKey = "YOUR_API_KEY_HERE"
let userEmail = "user@example.com"
let dbPassword = "DATABASE_PASSWORD"
```

### Safe Practices
1. Используйте environment variables для secrets
2. Анонимизируйте реальные данные
3. Замените production URLs на примеры
4. Удалите комментарии с sensitive информацией
5. Проверяйте git history перед sharing

## Responsible AI Usage

### Trust but Verify
**НЕ ДОВЕРЯЙТЕ СЛЕПО** - модель может ошибаться или "галлюцинировать":
1. **Проверяйте каждый фрагмент кода** через тесты
2. **Запускайте статические анализаторы** на AI-код
3. **Просматривайте логику** на соответствие требованиям
4. **Тестируйте edge cases** - AI часто их пропускает

### AI Code Validation Process
```bash
# 1. Generate code with AI
# 2. Run immediate checks
./scripts/validate-ai-code.sh generated_file.swift

# Validation script includes:
- SwiftLint check
- Compile check
- Unit test run
- Security scan
- Performance analysis
```

## Effective AI Interaction Protocol

### 1. Context is King
Always provide:
- Current file/module context
- Related tests
- Architecture constraints
- Business requirements
- Error messages or test failures

Example:
```
"I'm working on the LoginViewModel in the Presentation layer.
It needs to call LoginUserUseCase from Application layer.
Here's the failing test: [paste test]
The error is: [paste error]"
```

### 2. Configure AI for Your Standards
Настройте AI под стандарты проекта:
```
"Use Swift 5.9, SwiftUI, follow Clean Architecture.
Apply our naming conventions: ViewModels end with 'ViewModel'.
Use async/await for all asynchronous code.
Follow our error handling pattern with AppError enum."
```

### 3. Iterative Development
Work in small increments:
- One test at a time
- One function at a time
- Immediate verification
- Quick feedback loops

❌ BAD: "Create the entire authentication module"
✅ GOOD: "Create a test for email validation in LoginViewModel"

### 4. Test-First with AI
```
You: "I need to add password reset. First, let's write the test."
AI: [Generates test]
You: [Run test - RED]
You: "Test fails as expected. Now minimal implementation."
AI: [Generates code]
You: [Run test - GREEN]
You: "Great! Can you suggest any refactoring?"
AI: [Suggests improvements]
```

## AI Prompting Patterns

### The Specification Pattern
```
Task: [What you want to accomplish]
Context: [Current state, constraints]
Requirements: [Specific needs]
Examples: [If applicable]
Output: [Expected format/structure]
```

Example:
```
Task: Add email validation to LoginViewModel
Context: Using Clean Architecture, email validation is a Domain concern
Requirements: 
- RFC 5322 compliant
- Show inline error message
- Disable login button for invalid email
Examples: "user@company.com" ✓, "invalid.email" ✗
Output: Swift code with tests
```

### The Debug Pattern
```
Problem: [What's not working]
Expected: [What should happen]
Actual: [What's happening]
Code: [Relevant code snippet]
Error: [Full error message]
What I've tried: [Previous attempts]
```

### The Refactoring Pattern
```
Current code: [Paste code]
Issues: [What you want to improve]
Constraints: [What must not change]
Goals: [Performance, readability, etc.]
```

## AI Code Review Checklist

When asking AI to review code:

```markdown
Please review this code for:
1. Architecture compliance (Clean Architecture)
2. SOLID principles
3. Swift best practices
4. Test coverage gaps
5. Performance issues
6. Security concerns
7. Potential bugs

Code:
[paste code]

Context:
[describe where this fits in the system]
```

## Handling AI Suggestions

### Trust but Verify
1. **Understand** the suggestion before applying
2. **Test** immediately after applying
3. **Question** if something seems off
4. **Adjust** based on your context

### Common AI Pitfalls to Watch

#### 1. Over-Engineering
AI might suggest overly complex solutions.
```swift
// AI suggestion (over-engineered)
protocol EmailValidatorProtocol {
    func validate(_ email: String) -> Bool
}

class RegexEmailValidator: EmailValidatorProtocol {
    private let regex: NSRegularExpression
    
    init() throws {
        regex = try NSRegularExpression(pattern: "...")
    }
    
    func validate(_ email: String) -> Bool {
        // Complex implementation
    }
}

// Better (for simple cases)
extension String {
    var isValidEmail: Bool {
        contains("@") && contains(".")  // Often sufficient for MVP
    }
}
```

#### 2. Missing Context
AI doesn't know your specific business rules without being told.
```
❌ "Create user validation"
✅ "Create user validation. Business rules:
    - Email must be company domain (@company.com)
    - Password min 8 chars with 1 number
    - Username must be unique in system"
```

#### 3. Inconsistent Patterns
AI might mix patterns if not constrained.
```
"Follow our existing pattern:
- ViewModels use @Published for state
- All async functions use async/await (not callbacks)
- Errors are AppError enum cases"
```

#### 4. Security Vulnerabilities
AI может предложить небезопасный код:
```swift
// ❌ AI might suggest (insecure)
let password = UserDefaults.standard.string(forKey: "password")

// ✅ Correct approach
let password = try Keychain.shared.getString("password")
```

## Tracking AI Contributions

### Document AI Usage
Документируйте, где и как AI использовался:
```swift
// MARK: - AI Generated Code
// Generated by: Claude
// Date: 2024-01-15
// Prompt: "Create email validation with RFC 5322 compliance"
// Reviewed by: @username
// Changes: Added nil check, fixed regex pattern
```

### Pull Request Documentation
В описании PR указывайте:
```markdown
## AI Assistance
- [ ] Parts of this code were generated with AI
- [ ] AI-generated code has been reviewed and tested
- [ ] Security scan performed on AI suggestions

### AI-Generated Components:
- `EmailValidator.swift` - validation logic
- `LoginViewModelTests.swift` - test cases
```

### Commit History
Делайте частые коммиты при работе с AI:
```bash
# Good practice
git add EmailValidator.swift
git commit -m "feat(auth): add email validator - AI generated core logic"

git add EmailValidatorTests.swift
git commit -m "test(auth): add email validator tests - AI assisted"

git add EmailValidator.swift
git commit -m "refactor(auth): improve email regex - manual review fixes"
```

## Collaborative Workflows

### Feature Development Flow
1. **Discuss approach** with AI
2. **Generate BDD scenarios** together
3. **Write tests** incrementally
4. **Implement** with AI assistance
5. **Refactor** based on AI suggestions
6. **Document** with AI help

### Debugging Flow
1. **Describe the bug** clearly
2. **Share relevant code** and errors
3. **Hypothesize** causes together
4. **Test hypotheses** systematically
5. **Implement fix** with verification

### Learning Flow
1. **Ask for explanations** of suggestions
2. **Request alternatives** to understand options
3. **Discuss trade-offs** of different approaches
4. **Learn patterns** from AI examples

## Prompt Templates

### New Feature
```
I need to implement [FEATURE NAME].

User Story:
As a [USER TYPE]
I want [ACTION]
So that [BENEFIT]

Acceptance Criteria:
- [CRITERION 1]
- [CRITERION 2]

Technical Context:
- Layer: [Domain/Application/Presentation/Infrastructure]
- Related modules: [LIST]
- Constraints: [ANY LIMITATIONS]

Security Requirements:
- [Any sensitive data handling]
- [Authentication/Authorization needs]

Let's start with the BDD scenarios.
```

### Bug Fix
```
Bug: [DESCRIPTION]

Steps to Reproduce:
1. [STEP 1]
2. [STEP 2]

Expected: [WHAT SHOULD HAPPEN]
Actual: [WHAT HAPPENS]

Relevant Code:
[CODE SNIPPET - anonymized]

Error/Log:
[ERROR MESSAGE]

Environment:
- iOS Version: [VERSION]
- Device: [DEVICE]

Security Impact: [None/Low/Medium/High]
```

### Code Improvement
```
I'd like to improve this code:
[CODE - with sensitive data removed]

Goals:
- [GOAL 1, e.g., "Better testability"]
- [GOAL 2, e.g., "Clearer intent"]

Constraints:
- [CONSTRAINT 1, e.g., "Keep public API same"]
- [CONSTRAINT 2, e.g., "Maintain performance"]

Security Considerations:
- [Any security aspects to maintain/improve]
```

## AI Pair Programming Best Practices

### DO:
✅ Provide clear, specific context
✅ Work incrementally
✅ Verify AI suggestions with tests
✅ Ask for explanations when unclear
✅ Share error messages completely
✅ Describe business requirements
✅ Request multiple alternatives
✅ Use AI for code review
✅ Anonymize sensitive data
✅ Document AI contributions
✅ Review security implications

### DON'T:
❌ Accept code without understanding
❌ Skip tests because "AI wrote it"
❌ Assume AI knows your business domain
❌ Use vague requests
❌ Ignore AI suggestions without consideration
❌ Let AI drive without direction
❌ Trust AI blindly for security-critical code
❌ Share production credentials
❌ Expose customer data
❌ Commit AI code without review

## Measuring AI Effectiveness

Track these metrics to improve AI collaboration:

```yaml
ai_collaboration_metrics:
  first_suggestion_success_rate: 75%  # How often first suggestion works
  clarification_rounds: 1.5           # Average Q&A before solution
  time_to_solution: 15min            # Average for feature completion
  test_pass_rate: 90%                # Tests pass after AI generation
  refactoring_acceptance: 60%         # How often you use AI refactoring
  security_issues_caught: 95%         # Security problems found in review
  code_review_time_saved: 40%         # Efficiency improvement
```

## Advanced AI Techniques

### 1. Chain of Thought
Ask AI to explain reasoning:
```
"Walk me through how you would implement password reset, 
explaining each architectural decision and security consideration."
```

### 2. Role Playing
Give AI a specific perspective:
```
"As a security expert, review this authentication code 
for potential vulnerabilities."
```

### 3. Rubber Duck Debugging
Explain your problem to AI:
```
"Let me explain what I'm trying to do and where I'm stuck...
[detailed explanation]
What am I missing?"
```

### 4. Comparative Analysis
Get multiple solutions:
```
"Show me three different ways to implement this cache:
1. Simple in-memory
2. With persistence
3. With expiration
Compare the trade-offs and security implications."
```

### 5. Test Generation Focus
```
"Generate comprehensive tests for this function,
including:
- Happy path
- Edge cases
- Error conditions
- Security vulnerabilities
- Performance boundaries"
```

## Emergency Procedures

### If Sensitive Data Was Shared
1. Immediately rotate any exposed credentials
2. Review AI service's data retention policy
3. Document the incident
4. Update security protocols
5. Inform security team if required

### If AI Generates Insecure Code
1. Do not commit the code
2. Document the security issue
3. Report to AI service provider
4. Share with team as learning example
5. Update prompts to prevent recurrence

Remember: AI is a powerful tool, but you are the architect. Use AI to amplify your capabilities, not replace your judgment. Always prioritize security, quality, and understanding over speed.

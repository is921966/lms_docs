---
description:
globs:
alwaysApply: false
---
# CI/CD and Code Review Guidelines

## Continuous Integration Setup

### Automated Build Pipeline
–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (CI):
```yaml
# .github/workflows/ios-ci.yml
name: iOS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_15.0.app
    
    - name: Install Dependencies
      run: |
        bundle install
        pod install --repo-update
    
    - name: Build
      run: |
        xcodebuild clean build \
          -workspace LMS.xcworkspace \
          -scheme LMS \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Debug \
          CODE_SIGNING_REQUIRED=NO
    
    - name: Run Tests
      run: |
        xcodebuild test \
          -workspace LMS.xcworkspace \
          -scheme LMSTests \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -resultBundlePath TestResults.xcresult
    
    - name: Code Coverage
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        python3 scripts/check_coverage.py coverage.json --min-coverage 80
```

### Quality Gates
Pipeline –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏:
- ‚ùå –°–±–æ–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
- ‚ùå –ù–µ–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
- ‚ùå –ü–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏ < 80%
- ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ –∫–æ–¥–µ
- ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª

## Code Quality Checks

### SwiftLint Integration
```yaml
    - name: SwiftLint
      run: |
        swiftlint lint --strict --reporter github-actions-logging
        
    - name: SwiftFormat Check
      run: |
        swiftformat --lint .
        if [ $? -ne 0 ]; then
          echo "‚ùå Code formatting issues found. Run 'swiftformat .' locally"
          exit 1
        fi
```

### Static Analysis
```yaml
    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=lms-ios \
          -Dsonar.organization=company \
          -Dsonar.sources=LMS \
          -Dsonar.swift.coverage.reportPaths=coverage.xml \
          -Dsonar.swift.swiftlint.reportPaths=swiftlint.json
```

### Security Scanning
```yaml
    - name: Dependency Check
      run: |
        # Check for known vulnerabilities in dependencies
        ./scripts/check-dependencies.sh
        
    - name: Secret Scanning
      run: |
        # Ensure no secrets are committed
        trufflehog filesystem . --json | jq -e 'length == 0'
```

## Code Review Process

### Pull Request Template
```markdown
<!-- .github/pull_request_template.md -->
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update

## Testing
- [ ] Unit tests pass locally
- [ ] UI tests pass locally
- [ ] Manual testing completed
- [ ] No decrease in code coverage

## Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review of code performed
- [ ] Comments added for complex logic
- [ ] Documentation updated if needed
- [ ] No warnings or errors in Xcode
- [ ] All CI checks pass

## Screenshots (if applicable)
Before | After
--- | ---
[screenshot] | [screenshot]
```

### Review Checklist

#### Architecture & Design
- [ ] –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Clean Architecture –ø—Ä–∏–Ω—Ü–∏–ø–∞–º?
- [ ] Dependency Rule —Å–æ–±–ª—é–¥–µ–Ω?
- [ ] SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–µ –Ω–∞—Ä—É—à–µ–Ω—ã?
- [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã?

#### Code Quality
- [ ] –ö–æ–¥ —á–∏—Ç–∞–µ–º—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π?
- [ ] –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏?
- [ ] –ú–µ—Ç–æ–¥—ã < 30 —Å—Ç—Ä–æ–∫?
- [ ] –ö–ª–∞—Å—Å—ã –∏–º–µ—é—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥–æ–≤?

#### Testing
- [ ] –ï—Å—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏?
- [ ] –¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç edge cases?
- [ ] –¢–µ—Å—Ç—ã —á–∏—Ç–∞–µ–º—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ?
- [ ] –ú–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

#### Security
- [ ] –ù–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞ sensitive –¥–∞–Ω–Ω—ã—Ö?
- [ ] Input validation –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç?
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫?
- [ ] –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials?

#### Performance
- [ ] –ù–µ—Ç –æ—á–µ–≤–∏–¥–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?
- [ ] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ?
- [ ] –ù–µ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏?
- [ ] UI –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º?

### AI-Assisted Code Review

#### LLM Integration for Reviews
```yaml
    - name: AI Code Review
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Get changed files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        
        # Run AI review on each file
        for file in $CHANGED_FILES; do
          if [[ $file == *.swift ]]; then
            ./scripts/ai-review.sh "$file" >> ai-review-report.md
          fi
        done
        
        # Post review as PR comment
        gh pr comment --body-file ai-review-report.md
```

#### AI Review Script
```bash
#!/bin/bash
# scripts/ai-review.sh

FILE=$1
PROMPT="Review this Swift code for:
1. Architecture compliance (Clean Architecture)
2. SOLID principles
3. Swift best practices
4. Potential bugs
5. Performance issues
6. Security concerns

Code:
$(cat $FILE)

Provide actionable feedback with specific line numbers."

# Call AI API and format response
curl -s https://api.openai.com/v1/chat/completions \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: application/json" \
  -d "{
    \"model\": \"gpt-4\",
    \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}]
  }" | jq -r '.choices[0].message.content'
```

## Conventional Commits

### Commit Message Format
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–º–∏—Ç–æ–≤:
```
<type>(<scope>): <subject>

<body>

<footer>
```

### Types
- `feat`: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- `fix`: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞
- `docs`: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- `style`: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –∏ —Ç.–¥.
- `refactor`: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞
- `test`: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
- `chore`: –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ–¥–∞
- `perf`: –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

### Examples
```bash
feat(auth): –¥–æ–±–∞–≤–ª–µ–Ω —ç–∫—Ä–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ email
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è email
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

Closes #123

---

fix(courses): –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∞—à –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –∫—É—Ä—Å–æ–≤

–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nil –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –º–∞—Å—Å–∏–≤—É.
–¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è empty state –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞.

Fixes #456
```

### Commit Hooks
```bash
# .githooks/commit-msg
#!/bin/bash

# Check commit message format
commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "‚ùå Invalid commit message format!"
    echo "üìù Format: <type>(<scope>): <subject>"
    echo "Example: feat(auth): add login screen"
    exit 1
fi
```

## Continuous Deployment

### TestFlight Deployment
```yaml
  deploy-testflight:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Certificates
      env:
        CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
        CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # Import certificates
        ./scripts/setup-certificates.sh
    
    - name: Build for Release
      run: |
        xcodebuild archive \
          -workspace LMS.xcworkspace \
          -scheme LMS \
          -archivePath LMS.xcarchive
    
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath LMS.xcarchive \
          -exportPath . \
          -exportOptionsPlist ExportOptions.plist
    
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file LMS.ipa \
          --apiKey $APP_STORE_CONNECT_API_KEY
```

### Version Management
```bash
# scripts/bump-version.sh
#!/bin/bash

VERSION_TYPE=$1 # major, minor, patch

# Read current version
CURRENT_VERSION=$(agvtool what-marketing-version -terse1)

# Parse version components
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

# Increment version
case $VERSION_TYPE in
  major)
    MAJOR=$((MAJOR + 1))
    MINOR=0
    PATCH=0
    ;;
  minor)
    MINOR=$((MINOR + 1))
    PATCH=0
    ;;
  patch)
    PATCH=$((PATCH + 1))
    ;;
esac

NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Update version
agvtool new-marketing-version $NEW_VERSION
agvtool next-version -all

echo "‚úÖ Version bumped to $NEW_VERSION"
```

## Release Process

### Release Checklist
- [ ] All tests pass
- [ ] Code review completed
- [ ] Documentation updated
- [ ] CHANGELOG.md updated
- [ ] Version bumped appropriately
- [ ] Release notes prepared
- [ ] QA sign-off received

### Automated Release Notes
```yaml
    - name: Generate Release Notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0)
        COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s")
        
        # Group by type
        echo "## Features" > release-notes.md
        echo "$COMMITS" | grep "^- feat" >> release-notes.md
        
        echo "## Bug Fixes" >> release-notes.md
        echo "$COMMITS" | grep "^- fix" >> release-notes.md
        
        echo "## Other Changes" >> release-notes.md
        echo "$COMMITS" | grep -v "^- feat\|^- fix" >> release-notes.md
```

## Extreme Programming Practices

### Continuous Integration Rules
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ main –º–∏–Ω–∏–º—É–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
- –î–µ—Ä–∂–∏—Ç–µ main –≤—Å–µ–≥–¥–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
- –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–º–∞–Ω–Ω—ã–µ –±–∏–ª–¥—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
- –ù–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –ø–æ–≤–µ—Ä—Ö —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ –±–∏–ª–¥–∞

### Small Releases
- –†–µ–ª–∏–∑—ã –∫–∞–∂–¥—ã–µ 1-2 –Ω–µ–¥–µ–ª–∏
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–ª–∏–∑–µ
- Feature flags –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–Ω–∏—è

### Collective Code Ownership
- –õ—é–±–æ–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞
- –°–ª–µ–¥—É–π—Ç–µ –µ–¥–∏–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
- –ê–∫—Ç–∏–≤–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä—å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

## Monitoring & Metrics

### Build Metrics
```yaml
    - name: Collect Metrics
      run: |
        # Build time
        BUILD_TIME=$(cat build.log | grep "BUILD SUCCEEDED" | awk '{print $NF}')
        
        # Test execution time
        TEST_TIME=$(cat test.log | grep "Test Suite" | awk '{print $NF}')
        
        # Code coverage
        COVERAGE=$(cat coverage.json | jq '.lineCoverage')
        
        # Send to monitoring
        ./scripts/send-metrics.sh \
          --build-time "$BUILD_TIME" \
          --test-time "$TEST_TIME" \
          --coverage "$COVERAGE"
```

### Quality Trends
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥–æ–≤ –Ω–∞ —Ä–µ–ª–∏–∑
- –ò–∑–º–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è –æ—Ç –∫–æ–º–º–∏—Ç–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–∫–∞—Ç–æ–≤

## AI Integration Best Practices

### Automated PR Descriptions
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π PR
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–≤—å—é–µ—Ä–æ–≤

### Smart Test Generation
- AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è edge case —Ç–µ—Å—Ç–æ–≤
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –ø—É—Ç–µ–π –∫–æ–¥–∞

Remember: CI/CD - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —ç—Ç–æ –∫—É–ª—å—Ç—É—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.

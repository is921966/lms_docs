name: TDD CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # PHP Tests
  php-tests:
    if: contains(github.repository, 'php') || contains(github.event.head_commit.message, '[php]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite
        coverage: xdebug
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Run Tests
      run: |
        ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
    
    - name: Check Test Coverage
      run: |
        COVERAGE=$(./vendor/bin/phpunit --coverage-text | grep -E "Lines:\s+[0-9]+\.[0-9]+%" | sed 's/.*Lines:\s*\([0-9]*\.[0-9]*\)%.*/\1/')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage is below 80%"
          exit 1
        fi
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # JavaScript Tests
  js-tests:
    if: contains(github.repository, 'js') || contains(github.event.head_commit.message, '[js]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
    
    - name: Check test coverage
      run: |
        COVERAGE=$(npm test -- --coverage --watchAll=false --coverageReporters=text-summary | grep "Lines" | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage is below 80%"
          exit 1
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  # Python Tests
  python-tests:
    if: contains(github.repository, 'python') || contains(github.event.head_commit.message, '[python]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=term --cov-report=xml
    
    - name: Check test coverage
      run: |
        COVERAGE=$(pytest --cov=src --cov-report=term | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage is below 80%"
          exit 1
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  # Universal test job (auto-detects project type)
  auto-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Detect project type
      id: detect
      run: |
        if [ -f "composer.json" ]; then
          echo "type=php" >> $GITHUB_OUTPUT
        elif [ -f "package.json" ]; then
          echo "type=js" >> $GITHUB_OUTPUT
        elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
          echo "type=python" >> $GITHUB_OUTPUT
        else
          echo "type=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Run tests based on project type
      run: |
        if [ "${{ steps.detect.outputs.type }}" == "php" ]; then
          echo "Running PHP tests..."
          # Setup PHP and run tests
        elif [ "${{ steps.detect.outputs.type }}" == "js" ]; then
          echo "Running JavaScript tests..."
          # Setup Node and run tests
        elif [ "${{ steps.detect.outputs.type }}" == "python" ]; then
          echo "Running Python tests..."
          # Setup Python and run tests
        else
          echo "Unknown project type"
          exit 1
        fi

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        # Add security scanning tools based on project type
        echo "Running security scans..."

  # Create test report
  test-report:
    needs: [php-tests, js-tests, python-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Create test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All tests must pass before merge" >> $GITHUB_STEP_SUMMARY
        echo "📊 Minimum coverage: 80%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Remember: No code without tests!" >> $GITHUB_STEP_SUMMARY 
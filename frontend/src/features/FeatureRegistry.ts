/**
 * Feature Registry –¥–ª—è React - –∞–Ω–∞–ª–æ–≥ iOS Feature Registry
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import { useState, useEffect } from 'react';

export interface FeatureConfig {
  name: string;
  path: string;
  icon: string;
  enabled: boolean;
  ready: boolean;
  component: () => Promise<{ default: React.ComponentType<any> }>;
  description?: string;
  version?: string;
}

/**
 * –ï–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const Feature = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ)
  AUTH: 'auth',
  USERS: 'users', 
  COURSES: 'courses',
  TESTS: 'tests',
  ANALYTICS: 'analytics',
  ONBOARDING: 'onboarding',
  PROFILE: 'profile',
  SETTINGS: 'settings',
  
  // –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (29.06.2025)
  COMPETENCIES: 'competencies',
  POSITIONS: 'positions', 
  FEED: 'feed',
  
  // Placeholder –º–æ–¥—É–ª–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
  CERTIFICATES: 'certificates',
  GAMIFICATION: 'gamification',
  NOTIFICATIONS: 'notifications',
  PROGRAMS: 'programs',
  EVENTS: 'events',
  REPORTS: 'reports',
  
  // Debug –º–æ–¥—É–ª—å (—Ç–æ–ª—å–∫–æ –≤ development)
  DEBUG: 'debug'
} as const;

export type FeatureType = typeof Feature[keyof typeof Feature];

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä Feature Registry —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
 */
class FeatureRegistryManager {
  private static instance: FeatureRegistryManager;
  private features = new Map<string, FeatureConfig>();
  private listeners: Set<() => void> = new Set();

  private constructor() {
    this.registerAllFeatures();
  }

  static getInstance(): FeatureRegistryManager {
    if (!FeatureRegistryManager.instance) {
      FeatureRegistryManager.instance = new FeatureRegistryManager();
    }
    return FeatureRegistryManager.instance;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è feature flags
   */
  subscribe(callback: () => void): () => void {
    this.listeners.add(callback);
    return () => this.listeners.delete(callback);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  private notify(): void {
    this.listeners.forEach(callback => callback());
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
   */
  private registerAllFeatures(): void {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (enabled: true)
    this.register(Feature.AUTH, {
      name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      path: '/auth',
      icon: 'üîê',
      enabled: true,
      ready: true,
      component: () => import('../components/auth/AuthModule')
    });

    this.register(Feature.USERS, {
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      path: '/users', 
      icon: 'üë•',
      enabled: true,
      ready: true,
      component: () => import('../components/users/UsersModule')
    });

    this.register(Feature.COURSES, {
      name: '–ö—É—Ä—Å—ã',
      path: '/courses',
      icon: 'üìö',
      enabled: true,
      ready: true,
      component: () => import('../components/courses/CoursesModule')
    });

    this.register(Feature.TESTS, {
      name: '–¢–µ—Å—Ç—ã',
      path: '/tests',
      icon: 'üìù',
      enabled: true,
      ready: true,
      component: () => import('../components/tests/TestsModule')
    });

    this.register(Feature.ANALYTICS, {
      name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      path: '/analytics',
      icon: 'üìä',
      enabled: true,
      ready: true,
      component: () => import('../components/analytics/AnalyticsModule')
    });

    this.register(Feature.ONBOARDING, {
      name: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥',
      path: '/onboarding',
      icon: 'üéØ',
      enabled: true,
      ready: true,
      component: () => import('../components/onboarding/OnboardingModule')
    });

    this.register(Feature.PROFILE, {
      name: '–ü—Ä–æ—Ñ–∏–ª—å',
      path: '/profile',
      icon: 'üë§',
      enabled: true,
      ready: true,
      component: () => import('../components/profile/ProfileModule')
    });

    this.register(Feature.SETTINGS, {
      name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      path: '/settings',
      icon: '‚öôÔ∏è',
      enabled: true,
      ready: true,
      component: () => import('../components/settings/SettingsModule')
    });

    // –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (–≤–∫–ª—é—á–µ–Ω—ã —Å 29.06.2025)
    this.register(Feature.COMPETENCIES, {
      name: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
      path: '/competencies',
      icon: 'üéñÔ∏è',
      enabled: true, // –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ iOS 100%
      ready: true,
      component: () => import('../components/competencies/CompetenciesModule')
    });

    this.register(Feature.POSITIONS, {
      name: '–î–æ–ª–∂–Ω–æ—Å—Ç–∏', 
      path: '/positions',
      icon: 'üíº',
      enabled: true, // –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ iOS 100%
      ready: true,
      component: () => import('../components/positions/PositionsModule')
    });

    this.register(Feature.FEED, {
      name: '–ù–æ–≤–æ—Å—Ç–∏',
      path: '/feed',
      icon: 'üì∞',
      enabled: true, // –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ iOS 100%
      ready: true,
      component: () => import('../components/feed/FeedModule')
    });

    // Placeholder –º–æ–¥—É–ª–∏ (disabled)
    this.register(Feature.CERTIFICATES, {
      name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
      path: '/certificates',
      icon: 'üèÜ',
      enabled: false,
      ready: false,
      component: () => import('../components/common/PlaceholderModule')
    });

    // Debug –º–æ–¥—É–ª—å (—Ç–æ–ª—å–∫–æ –≤ development)
    if (import.meta.env.DEV) {
      this.register(Feature.DEBUG, {
        name: 'Debug',
        path: '/debug',
        icon: 'üêõ',
        enabled: true,
        ready: true,
        component: () => import('../components/debug/DebugModule')
      });
    }

    console.log('üéØ FeatureRegistry: –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', this.features.size);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  register(feature: string, config: Partial<FeatureConfig>): void {
    const fullConfig = {
      name: config.name || feature,
      path: config.path || `/${feature}`,
      icon: config.icon || 'üìã',
      enabled: config.enabled ?? false,
      ready: config.ready ?? false,
      component: config.component || (() => import('../components/common/PlaceholderModule')),
      ...config
    } as FeatureConfig;

    this.features.set(feature, fullConfig);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
   */
  getFeature(feature: string): FeatureConfig | undefined {
    return this.features.get(feature);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
   */
  getEnabledFeatures(): FeatureConfig[] {
    return Array.from(this.features.values())
      .filter(config => config.enabled);
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
   */
  enableFeature(feature: string): void {
    const config = this.features.get(feature);
    if (config) {
      config.enabled = true;
      this.notify();
      console.log(`‚úÖ Feature enabled: ${config.name}`);
    }
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (–∞–Ω–∞–ª–æ–≥ iOS)
   */
  enableReadyModules(): void {
    const readyFeatures = [Feature.COMPETENCIES, Feature.POSITIONS, Feature.FEED];
    
    readyFeatures.forEach(feature => {
      this.enableFeature(feature);
    });

    this.notify();
    console.log('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã:', readyFeatures.map(f => this.getFeature(f)?.name));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
   */
  isEnabled(feature: string): boolean {
    return this.features.get(feature)?.enabled ?? false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç—ã –¥–ª—è React Router
   */
  getRoutes(): Array<{ path: string; component: () => Promise<{ default: React.ComponentType<any> }> }> {
    return this.getEnabledFeatures().map(config => ({
      path: config.path,
      component: config.component
    }));
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const FeatureRegistry = FeatureRegistryManager.getInstance();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function useFeatureRegistry() {
  const [, forceUpdate] = useState({});
  
  useEffect(() => {
    const unsubscribe = FeatureRegistry.subscribe(() => {
      forceUpdate({});
    });
    return unsubscribe;
  }, []);

  return {
    enabledFeatures: FeatureRegistry.getEnabledFeatures(),
    isEnabled: (feature: string) => FeatureRegistry.isEnabled(feature),
    enableFeature: (feature: string) => FeatureRegistry.enableFeature(feature),
    enableReadyModules: () => FeatureRegistry.enableReadyModules()
  };
}

export default FeatureRegistry; 
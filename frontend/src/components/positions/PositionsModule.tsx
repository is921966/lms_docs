import React, { useState } from 'react';

interface Position {
  id: string;
  title: string;
  department: string;
  level: 'junior' | 'middle' | 'senior' | 'lead';
  description: string;
  requirements: string[];
  responsibilities: string[];
  careerPath: string[];
}

const mockPositions: Position[] = [
  {
    id: '1',
    title: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
    department: '–ü—Ä–æ–¥–∞–∂–∏',
    level: 'middle',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–æ–π –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
    requirements: ['–û–ø—ã—Ç –ø—Ä–æ–¥–∞–∂ 3+ –ª–µ—Ç', '–ó–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞', '–ù–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤'],
    responsibilities: ['–†–∞–∑–≤–∏—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ KPI', '–í–µ–¥–µ–Ω–∏–µ CRM'],
    careerPath: ['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '–°—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞']
  },
  {
    id: '2',
    title: 'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
    department: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    level: 'junior',
    description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ IT-—Å–∏—Å—Ç–µ–º',
    requirements: ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ó–Ω–∞–Ω–∏–µ Windows/Linux', '–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —Å–µ—Ç–µ–π'],
    responsibilities: ['–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û'],
    careerPath: ['–°—Ç–∞–∂–µ—Ä IT', 'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']
  },
  {
    id: '3',
    title: '–ë—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä',
    department: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
    level: 'senior',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
    requirements: ['–û–ø—ã—Ç –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ 5+ –ª–µ—Ç', '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏'],
    responsibilities: ['–°—Ç—Ä–∞—Ç–µ–≥–∏—è –±—Ä–µ–Ω–¥–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–π', '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'],
    careerPath: ['–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–ë—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä', '–°—Ç–∞—Ä—à–∏–π –±—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É']
  }
];

const PositionsModule: React.FC = () => {
  const [positions] = useState<Position[]>(mockPositions);
  const [selectedDepartment, setSelectedDepartment] = useState<string>('all');
  const [selectedLevel, setSelectedLevel] = useState<string>('all');

  const departments = ['all', ...Array.from(new Set(positions.map(p => p.department)))];
  const levels = ['all', 'junior', 'middle', 'senior', 'lead'];

  const filteredPositions = positions.filter(position => {
    return (selectedDepartment === 'all' || position.department === selectedDepartment) &&
           (selectedLevel === 'all' || position.level === selectedLevel);
  });

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'junior': return 'bg-green-100 text-green-800';
      case 'middle': return 'bg-blue-100 text-blue-800';
      case 'senior': return 'bg-purple-100 text-purple-800';
      case 'lead': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getLevelText = (level: string) => {
    switch (level) {
      case 'junior': return '–ú–ª–∞–¥—à–∏–π';
      case 'middle': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'senior': return '–°—Ç–∞—Ä—à–∏–π';
      case 'lead': return '–í–µ–¥—É—â–∏–π';
      default: return level;
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-4">
          <div className="text-3xl">üíº</div>
          <h1 className="text-3xl font-bold text-gray-900">–î–æ–ª–∂–Ω–æ—Å—Ç–∏</h1>
        </div>
        <p className="text-gray-600">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        </p>
      </div>

      {/* Filters */}
      <div className="mb-6 space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">–û—Ç–¥–µ–ª:</label>
          <div className="flex flex-wrap gap-2">
            {departments.map(dept => (
              <button
                key={dept}
                onClick={() => setSelectedDepartment(dept)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  selectedDepartment === dept
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {dept === 'all' ? '–í—Å–µ –æ—Ç–¥–µ–ª—ã' : dept}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">–£—Ä–æ–≤–µ–Ω—å:</label>
          <div className="flex flex-wrap gap-2">
            {levels.map(level => (
              <button
                key={level}
                onClick={() => setSelectedLevel(level)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  selectedLevel === level
                    ? 'bg-purple-600 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {level === 'all' ? '–í—Å–µ —É—Ä–æ–≤–Ω–∏' : getLevelText(level)}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Positions Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredPositions.map(position => (
          <div
            key={position.id}
            className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow border border-gray-200"
          >
            {/* Header */}
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-1">
                  {position.title}
                </h3>
                <p className="text-sm text-gray-600">{position.department}</p>
              </div>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${getLevelColor(position.level)}`}>
                {getLevelText(position.level)}
              </span>
            </div>

            {/* Description */}
            <p className="text-gray-700 mb-4">
              {position.description}
            </p>

            {/* Requirements */}
            <div className="mb-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
              <ul className="space-y-1">
                {position.requirements.map((req, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-green-500 mr-2">‚Ä¢</span>
                    {req}
                  </li>
                ))}
              </ul>
            </div>

            {/* Responsibilities */}
            <div className="mb-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</h4>
              <ul className="space-y-1">
                {position.responsibilities.map((resp, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-blue-500 mr-2">‚Ä¢</span>
                    {resp}
                  </li>
                ))}
              </ul>
            </div>

            {/* Career Path */}
            <div className="mb-6">
              <h4 className="text-sm font-medium text-gray-900 mb-2">–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å:</h4>
              <div className="flex flex-wrap gap-2">
                {position.careerPath.map((step, index) => (
                  <div key={index} className="flex items-center">
                    <span className={`px-2 py-1 rounded text-xs ${
                      step === position.title 
                        ? 'bg-blue-100 text-blue-800 font-medium' 
                        : 'bg-gray-100 text-gray-600'
                    }`}>
                      {step}
                    </span>
                    {index < position.careerPath.length - 1 && (
                      <span className="mx-2 text-gray-400">‚Üí</span>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Actions */}
            <div className="flex gap-3">
              <button className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm">
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </button>
              <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                –ó–∞—è–≤–∫–∞
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Empty State */}
      {filteredPositions.length === 0 && (
        <div className="text-center py-12">
          <div className="text-4xl mb-4">üîç</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            –î–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-gray-600">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
          </p>
        </div>
      )}
    </div>
  );
};

export default PositionsModule; 
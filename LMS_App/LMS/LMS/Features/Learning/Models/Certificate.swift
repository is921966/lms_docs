//
//  Certificate.swift
//  LMS
//
//  Created on 26/01/2025.
//

import Foundation
import SwiftUI

// MARK: - Certificate Template
struct CertificateTemplate: Identifiable, Codable {
    let id = UUID()
    var name: String
    var description: String
    var backgroundImageName: String?
    var logoImageName: String?
    var primaryColor: String
    var secondaryColor: String
    var fontName: String
    var signatureImageName: String?
    var signerName: String
    var signerTitle: String
    var organizationName: String
    var isActive: Bool = true
    var createdAt = Date()
    var updatedAt = Date()

    // Text templates with placeholders
    var titleTemplate: String = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"
    var bodyTemplate: String = "–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ {userName} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª(–∞) –∫—É—Ä—Å \"{courseName}\" —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}%"
    var footerTemplate: String = "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {date}"

    // Computed properties
    var primarySwiftUIColor: Color {
        Color(hex: primaryColor) ?? .blue
    }

    var secondarySwiftUIColor: Color {
        Color(hex: secondaryColor) ?? .gray
    }
}

// MARK: - Certificate
struct Certificate: Identifiable, Codable {
    let id = UUID()
    let userId: UUID
    let courseId: UUID
    let templateId: UUID
    let certificateNumber: String

    // Course data (denormalized for display)
    let courseName: String
    let courseDescription: String
    let courseDuration: String

    // User data (denormalized for display)
    let userName: String
    let userEmail: String

    // Achievement data
    let completedAt: Date
    let score: Double
    let totalScore: Double
    let percentage: Double
    let isPassed: Bool

    // Certificate data
    let issuedAt: Date
    let expiresAt: Date?
    let verificationCode: String
    let pdfUrl: String?

    // Metadata
    var isRevoked: Bool = false
    var revokedAt: Date?
    var revokedReason: String?

    // Computed properties
    var isValid: Bool {
        if isRevoked { return false }
        if let expires = expiresAt, Date() > expires { return false }
        return true
    }

    var formattedCertificateNumber: String {
        "CERT-\(certificateNumber)"
    }

    var shareText: String {
        "–Ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫—É—Ä—Å \"\(courseName)\" –≤ –¶–£–ú —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º \(Int(percentage))%! üéâ"
    }

    // Generate verification code
    static func generateVerificationCode() -> String {
        let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        return String((0..<8).map { _ in letters.randomElement()! })
    }

    // Generate certificate number
    static func generateCertificateNumber() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyMMdd"
        let dateString = formatter.string(from: Date())
        let randomNum = String(format: "%04d", Int.random(in: 0...9_999))
        return "\(dateString)-\(randomNum)"
    }
}

// MARK: - Certificate Generation Request
struct CertificateGenerationRequest {
    let userId: UUID
    let courseId: UUID
    let templateId: UUID
    let courseName: String
    let courseDescription: String
    let courseDuration: String
    let userName: String
    let userEmail: String
    let score: Double
    let totalScore: Double
    let completedAt: Date
}

// MARK: - Mock Certificate Templates
extension CertificateTemplate {
    static let mockTemplates = [
        CertificateTemplate(
            name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            description: "–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤",
            primaryColor: "#2196F3",
            secondaryColor: "#757575",
            fontName: "SF Pro Display",
            signerName: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            signerTitle: "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –æ–±—É—á–µ–Ω–∏—é",
            organizationName: "–¶–£–ú"
        ),
        CertificateTemplate(
            name: "–ü—Ä–µ–º–∏—É–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            description: "–î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º",
            backgroundImageName: "certificate_premium_bg",
            primaryColor: "#FFD700",
            secondaryColor: "#B8860B",
            fontName: "SF Pro Display",
            signerName: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
            signerTitle: "HR –î–∏—Ä–µ–∫—Ç–æ—Ä",
            organizationName: "–¶–£–ú"
        ),
        CertificateTemplate(
            name: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            description: "–î–ª—è –∫—É—Ä—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ö–æ–¥–Ω—ã–º –±–∞–ª–ª–æ–º",
            primaryColor: "#4CAF50",
            secondaryColor: "#2E7D32",
            fontName: "SF Pro Display",
            signerName: "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤",
            signerTitle: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞",
            organizationName: "–¶–£–ú"
        )
    ]
}

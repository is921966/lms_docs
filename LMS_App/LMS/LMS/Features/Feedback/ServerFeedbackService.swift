import Foundation
import UIKit

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±—ç–∫–æ–≤ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
class ServerFeedbackService {
    static let shared = ServerFeedbackService()
    
    // MARK: - Configuration
    private let baseURL: String
    private let isDebug = true
    
    private init() {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
        // –í production –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
        #if targetEnvironment(simulator)
        self.baseURL = "http://localhost:5000"
        #else
        // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        // –£–∑–Ω–∞—Ç—å IP: System Preferences ‚Üí Network ‚Üí Wi-Fi ‚Üí IP Address
        self.baseURL = "http://192.168.1.100:5000" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à IP
        #endif
    }
    
    // MARK: - Public Methods
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±—ç–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    func sendFeedback(_ feedback: FeedbackModel) async -> Bool {
        guard let url = URL(string: "\(baseURL)/api/v1/feedback") else {
            print("‚ùå Invalid URL")
            return false
        }
        
        do {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            let feedbackData = FeedbackServerData(
                id: UUID().uuidString,
                type: feedback.type,
                text: feedback.text,
                timestamp: ISO8601DateFormatter().string(from: Date()),
                deviceInfo: feedback.deviceInfo,
                screenshot: feedback.screenshot
            )
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.setValue("LMS-iOS/1.0", forHTTPHeaderField: "User-Agent")
            
            // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            let encoder = JSONEncoder()
            request.httpBody = try encoder.encode(feedbackData)
            
            if isDebug {
                print("üì§ Sending feedback to: \(url)")
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            let (data, response) = try await URLSession.shared.data(for: request)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if let httpResponse = response as? HTTPURLResponse {
                if isDebug {
                    print("üì• Response status: \(httpResponse.statusCode)")
                }
                
                if httpResponse.statusCode == 201 {
                    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                    if let responseData = try? JSONDecoder().decode(ServerResponse.self, from: data) {
                        print("‚úÖ Feedback sent successfully!")
                        if let githubURL = responseData.github_issue {
                            print("üìù GitHub Issue: \(githubURL)")
                        }
                        return true
                    }
                    return true
                } else {
                    print("‚ùå Server error: \(httpResponse.statusCode)")
                    if let errorData = String(data: data, encoding: .utf8) {
                        print("Error details: \(errorData)")
                    }
                    return false
                }
            }
            
            return false
        } catch {
            print("‚ùå Failed to send feedback: \(error)")
            return false
        }
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±—ç–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–∑ FeedbackItem
    func sendFeedbackItem(_ feedbackItem: FeedbackItem) async -> Bool {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FeedbackItem –≤ FeedbackModel
        let feedback = FeedbackModel(
            type: feedbackItem.type.rawValue,
            text: feedbackItem.description,
            screenshot: feedbackItem.screenshot,
            deviceInfo: DeviceInfo(
                model: UIDevice.current.model,
                osVersion: UIDevice.current.systemVersion,
                appVersion: Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "Unknown",
                buildNumber: Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "Unknown"
            )
        )
        
        return await sendFeedback(feedback)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    func checkServerStatus() async -> Bool {
        guard let url = URL(string: "\(baseURL)/") else {
            return false
        }
        
        do {
            let (_, response) = try await URLSession.shared.data(from: url)
            if let httpResponse = response as? HTTPURLResponse {
                return httpResponse.statusCode == 200
            }
            return false
        } catch {
            if isDebug {
                print("‚ùå Server not reachable: \(error)")
            }
            return false
        }
    }
}

// MARK: - Data Models

private struct FeedbackServerData: Encodable {
    let id: String
    let type: String
    let text: String
    let timestamp: String
    let deviceInfo: DeviceInfo
    let screenshot: String?
}

private struct ServerResponse: Decodable {
    let status: String
    let id: String
    let message: String
    let github_issue: String?
}

// MARK: - Helper Extension

extension ServerFeedbackService {
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
    func updateServerURL(_ url: String) {
        // –í production –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL —Å–µ—Ä–≤–µ—Ä–∞
    var currentServerURL: String {
        return baseURL
    }
} 
import Foundation
import SwiftUI

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–¥–±—ç–∫–∞–º–∏
@MainActor
class FeedbackService: ObservableObject {
    static let shared = FeedbackService()
    
    @Published var feedbacks: [FeedbackItem] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    private let mockData = true // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∏–¥–±—ç–∫–∏
    func loadFeedbacks() async {
        isLoading = true
        defer { isLoading = false }
        
        if mockData {
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            try? await Task.sleep(nanoseconds: 1_000_000_000)
            feedbacks = createMockFeedbacks()
        } else {
            // TODO: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            await loadFeedbacksFromServer()
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–µ–Ω—Ç—É —Ñ–∏–¥–±—ç–∫–æ–≤
    func refreshFeedbacks() async {
        await loadFeedbacks()
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫
    func createFeedback(_ feedback: FeedbackModel) async -> Bool {
        isLoading = true
        defer { isLoading = false }
        
        if mockData {
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
            try? await Task.sleep(nanoseconds: 500_000_000)
            
            let newFeedbackItem = FeedbackItem(
                title: "\(feedback.type.capitalized) Report",
                description: feedback.text,
                type: FeedbackType(rawValue: feedback.type) ?? .question,
                author: "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                authorId: "current_user",
                isOwnFeedback: true
            )
            
            feedbacks.insert(newFeedbackItem, at: 0)
            
            // üöÄ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º GitHub Issue
            Task.detached {
                let success = await GitHubFeedbackService.shared.createIssueFromFeedback(newFeedbackItem)
                if success {
                    print("‚úÖ –§–∏–¥–±—ç–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ GitHub Issues")
                } else {
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GitHub Issue (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω)")
                }
            }
            
            return true
        } else {
            // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            return await createFeedbackOnServer(feedback)
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ —Ñ–∏–¥–±—ç–∫—É
    func addReaction(to feedbackId: UUID, reaction: ReactionType) {
        guard let index = feedbacks.firstIndex(where: { $0.id == feedbackId }) else { return }
        
        var feedback = feedbacks[index]
        var reactions = feedback.reactions
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if let currentReaction = feedback.userReaction {
            switch currentReaction {
            case .like: reactions.like = max(0, reactions.like - 1)
            case .dislike: reactions.dislike = max(0, reactions.dislike - 1)
            case .heart: reactions.heart = max(0, reactions.heart - 1)
            case .fire: reactions.fire = max(0, reactions.fire - 1)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–ª–∏ —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–ª–∏
        let newUserReaction: ReactionType?
        if feedback.userReaction == reaction {
            newUserReaction = nil
        } else {
            newUserReaction = reaction
            switch reaction {
            case .like: reactions.like += 1
            case .dislike: reactions.dislike += 1
            case .heart: reactions.heart += 1
            case .fire: reactions.fire += 1
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫
        feedbacks[index] = FeedbackItem(
            id: feedback.id,
            title: feedback.title,
            description: feedback.description,
            type: feedback.type,
            status: feedback.status,
            author: feedback.author,
            authorId: feedback.authorId,
            createdAt: feedback.createdAt,
            updatedAt: Date(),
            screenshot: feedback.screenshot,
            reactions: reactions,
            comments: feedback.comments,
            userReaction: newUserReaction,
            isOwnFeedback: feedback.isOwnFeedback
        )
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Task {
            await updateReactionOnServer(feedbackId: feedbackId, reaction: newUserReaction)
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–¥–±—ç–∫—É
    func addComment(to feedbackId: UUID, comment: String) {
        guard let index = feedbacks.firstIndex(where: { $0.id == feedbackId }) else { return }
        guard !comment.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        
        var feedback = feedbacks[index]
        let newComment = FeedbackComment(
            text: comment.trimmingCharacters(in: .whitespacesAndNewlines),
            author: "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            authorId: "current_user"
        )
        
        var updatedComments = feedback.comments
        updatedComments.append(newComment)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫
        feedbacks[index] = FeedbackItem(
            id: feedback.id,
            title: feedback.title,
            description: feedback.description,
            type: feedback.type,
            status: feedback.status,
            author: feedback.author,
            authorId: feedback.authorId,
            createdAt: feedback.createdAt,
            updatedAt: Date(),
            screenshot: feedback.screenshot,
            reactions: feedback.reactions,
            comments: updatedComments,
            userReaction: feedback.userReaction,
            isOwnFeedback: feedback.isOwnFeedback
        )
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Task {
            await addCommentOnServer(feedbackId: feedbackId, comment: newComment)
        }
    }
    
    // MARK: - Private Methods
    
    private func createMockFeedbacks() -> [FeedbackItem] {
        return [
            FeedbackItem(
                title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤",
                description: "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ö—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥.",
                type: .bug,
                status: .inProgress,
                author: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                authorId: "user1",
                createdAt: Date().addingTimeInterval(-3600),
                reactions: FeedbackReactions(like: 5, dislike: 1, heart: 2, fire: 0),
                comments: [
                    FeedbackComment(
                        text: "–¢–∞ –∂–µ –ø—Ä–æ–±–ª–µ–º–∞! –û—á–µ–Ω—å –Ω–µ—É–¥–æ–±–Ω–æ.",
                        author: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                        authorId: "user2",
                        createdAt: Date().addingTimeInterval(-1800)
                    ),
                    FeedbackComment(
                        text: "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.",
                        author: "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                        authorId: "admin1",
                        createdAt: Date().addingTimeInterval(-900),
                        isAdmin: true
                    )
                ],
                userReaction: .like
            ),
            FeedbackItem(
                title: "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É",
                description: "–ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.",
                type: .feature,
                status: .open,
                author: "–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                authorId: "user3",
                createdAt: Date().addingTimeInterval(-7200),
                reactions: FeedbackReactions(like: 12, dislike: 0, heart: 8, fire: 3),
                comments: [
                    FeedbackComment(
                        text: "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é! –ì–ª–∞–∑–∞ —É—Å—Ç–∞—é—Ç –æ—Ç –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞.",
                        author: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
                        authorId: "user4",
                        createdAt: Date().addingTimeInterval(-3600)
                    )
                ],
                userReaction: .heart
            )
        ]
    }
    
    private func loadFeedbacksFromServer() async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    private func createFeedbackOnServer(_ feedback: FeedbackModel) async -> Bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return false
    }
    
    private func updateReactionOnServer(feedbackId: UUID, reaction: ReactionType?) async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
    
    private func addCommentOnServer(feedbackId: UUID, comment: FeedbackComment) async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
}

import Foundation
import SwiftUI

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–¥–±—ç–∫–∞–º–∏
@MainActor
class FeedbackService: ObservableObject {
    static let shared = FeedbackService()
    
    @Published var feedbacks: [FeedbackItem] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    // ‚ö° –ù–û–í–û–ï: Offline queue –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    @Published var pendingFeedbacks: [FeedbackItem] = []
    @Published var networkStatus: NetworkStatus = .unknown
    
    private let mockData = true // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    // üìä –ù–û–í–û–ï: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    struct PerformanceMetrics {
        var averageGitHubCreateTime: TimeInterval = 0
        var successRate: Double = 0
        var totalFeedbacksCreated: Int = 0
        var lastSyncTime: Date?
    }
    
    @Published var performanceMetrics = PerformanceMetrics()
    
    private init() {
        startNetworkMonitoring()
        startOfflineQueueProcessor()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∏–¥–±—ç–∫–∏
    func loadFeedbacks() async {
        isLoading = true
        defer { isLoading = false }
        
        if mockData {
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            try? await Task.sleep(nanoseconds: 1_000_000_000)
            feedbacks = createMockFeedbacks()
        } else {
            // TODO: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            await loadFeedbacksFromServer()
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–µ–Ω—Ç—É —Ñ–∏–¥–±—ç–∫–æ–≤
    func refreshFeedbacks() async {
        await loadFeedbacks()
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫ —Å offline support
    func createFeedback(_ feedback: FeedbackModel) async -> Bool {
        isLoading = true
        defer { isLoading = false }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        let screenshotString = feedback.screenshot
        
        let newFeedbackItem = FeedbackItem(
            title: "\(feedback.type.capitalized) Report",
            description: feedback.text,
            type: FeedbackType(rawValue: feedback.type) ?? .question,
            author: "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            authorId: "current_user",
            screenshot: screenshotString,  // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            isOwnFeedback: true
        )
        
        // ‚úÖ 1. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ UI (< 0.5 —Å–µ–∫)
        feedbacks.insert(newFeedbackItem, at: 0)
        
        if mockData {
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
            try? await Task.sleep(nanoseconds: 500_000_000)
            
            // ‚úÖ 2. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GitHub (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            await processGitHubIntegration(newFeedbackItem)
            
            return true
        } else {
            return await createFeedbackOnServer(feedback)
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ —Ñ–∏–¥–±—ç–∫—É
    func addReaction(to feedbackId: UUID, reaction: ReactionType) {
        guard let index = feedbacks.firstIndex(where: { $0.id == feedbackId }) else { return }
        
        var feedback = feedbacks[index]
        var reactions = feedback.reactions
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if let currentReaction = feedback.userReaction {
            switch currentReaction {
            case .like: reactions.like = max(0, reactions.like - 1)
            case .dislike: reactions.dislike = max(0, reactions.dislike - 1)
            case .heart: reactions.heart = max(0, reactions.heart - 1)
            case .fire: reactions.fire = max(0, reactions.fire - 1)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–ª–∏ —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–ª–∏
        let newUserReaction: ReactionType?
        if feedback.userReaction == reaction {
            newUserReaction = nil
        } else {
            newUserReaction = reaction
            switch reaction {
            case .like: reactions.like += 1
            case .dislike: reactions.dislike += 1
            case .heart: reactions.heart += 1
            case .fire: reactions.fire += 1
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫
        feedbacks[index] = FeedbackItem(
            id: feedback.id,
            title: feedback.title,
            description: feedback.description,
            type: feedback.type,
            status: feedback.status,
            author: feedback.author,
            authorId: feedback.authorId,
            createdAt: feedback.createdAt,
            updatedAt: Date(),
            screenshot: feedback.screenshot,
            reactions: reactions,
            comments: feedback.comments,
            userReaction: newUserReaction,
            isOwnFeedback: feedback.isOwnFeedback
        )
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Task {
            await updateReactionOnServer(feedbackId: feedbackId, reaction: newUserReaction)
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–¥–±—ç–∫—É
    func addComment(to feedbackId: UUID, comment: String) {
        guard let index = feedbacks.firstIndex(where: { $0.id == feedbackId }) else { return }
        guard !comment.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        
        var feedback = feedbacks[index]
        let newComment = FeedbackComment(
            text: comment.trimmingCharacters(in: .whitespacesAndNewlines),
            author: "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            authorId: "current_user"
        )
        
        var updatedComments = feedback.comments
        updatedComments.append(newComment)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫
        feedbacks[index] = FeedbackItem(
            id: feedback.id,
            title: feedback.title,
            description: feedback.description,
            type: feedback.type,
            status: feedback.status,
            author: feedback.author,
            authorId: feedback.authorId,
            createdAt: feedback.createdAt,
            updatedAt: Date(),
            screenshot: feedback.screenshot,
            reactions: feedback.reactions,
            comments: updatedComments,
            userReaction: feedback.userReaction,
            isOwnFeedback: feedback.isOwnFeedback
        )
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Task {
            await addCommentOnServer(feedbackId: feedbackId, comment: newComment)
        }
    }
    
    // MARK: - Private Methods
    
    private func createMockFeedbacks() -> [FeedbackItem] {
        return [
            FeedbackItem(
                title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤",
                description: "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ö—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥.",
                type: .bug,
                status: .inProgress,
                author: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                authorId: "user1",
                createdAt: Date().addingTimeInterval(-3600),
                reactions: FeedbackReactions(like: 5, dislike: 1, heart: 2, fire: 0),
                comments: [
                    FeedbackComment(
                        text: "–¢–∞ –∂–µ –ø—Ä–æ–±–ª–µ–º–∞! –û—á–µ–Ω—å –Ω–µ—É–¥–æ–±–Ω–æ.",
                        author: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                        authorId: "user2",
                        createdAt: Date().addingTimeInterval(-1800)
                    ),
                    FeedbackComment(
                        text: "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.",
                        author: "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                        authorId: "admin1",
                        createdAt: Date().addingTimeInterval(-900),
                        isAdmin: true
                    )
                ],
                userReaction: .like
            ),
            FeedbackItem(
                title: "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É",
                description: "–ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.",
                type: .feature,
                status: .open,
                author: "–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                authorId: "user3",
                createdAt: Date().addingTimeInterval(-7200),
                reactions: FeedbackReactions(like: 12, dislike: 0, heart: 8, fire: 3),
                comments: [
                    FeedbackComment(
                        text: "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é! –ì–ª–∞–∑–∞ —É—Å—Ç–∞—é—Ç –æ—Ç –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞.",
                        author: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
                        authorId: "user4",
                        createdAt: Date().addingTimeInterval(-3600)
                    )
                ],
                userReaction: .heart
            )
        ]
    }
    
    private func loadFeedbacksFromServer() async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    private func createFeedbackOnServer(_ feedback: FeedbackModel) async -> Bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return false
    }
    
    private func updateReactionOnServer(feedbackId: UUID, reaction: ReactionType?) async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
    
    private func addCommentOnServer(feedbackId: UUID, comment: FeedbackComment) async {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
    
    // ‚ö° –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    private func processGitHubIntegration(_ feedback: FeedbackItem) async {
        let startTime = Date()
        
        if networkStatus == .connected {
            // ‚úÖ –ï—Å—Ç—å —Å–µ—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            let success = await ServerFeedbackService.shared.sendFeedbackItem(feedback)
            let duration = Date().timeIntervalSince(startTime)
            
            await updatePerformanceMetrics(duration: duration, success: success)
            
            if success {
                print("‚úÖ –§–∏–¥–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä (\(String(format: "%.2f", duration))—Å)")
                print("üìù –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç GitHub Issue")
            } else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ offline queue")
                addToOfflineQueue(feedback)
            }
        } else {
            // ‚ùå –ù–µ—Ç —Å–µ—Ç–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ offline queue
            print("üì¥ –ù–µ—Ç —Å–µ—Ç–∏ - —Ñ–∏–¥–±—ç–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ offline queue")
            addToOfflineQueue(feedback)
        }
    }
    
    // ‚ö° –ù–û–í–û–ï: Offline queue management
    private func addToOfflineQueue(_ feedback: FeedbackItem) {
        if !pendingFeedbacks.contains(where: { $0.id == feedback.id }) {
            pendingFeedbacks.append(feedback)
            print("üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ offline queue (\(pendingFeedbacks.count) –æ–∂–∏–¥–∞—é—Ç)")
        }
    }
    
    private func startOfflineQueueProcessor() {
        Task {
            while true {
                if networkStatus == .connected && !pendingFeedbacks.isEmpty {
                    await processOfflineQueue()
                }
                try? await Task.sleep(nanoseconds: 30_000_000_000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            }
        }
    }
    
    private func processOfflineQueue() async {
        print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offline queue (\(pendingFeedbacks.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        
        var processedItems: [UUID] = []
        
        for feedback in pendingFeedbacks {
            let success = await ServerFeedbackService.shared.sendFeedbackItem(feedback)
            if success {
                processedItems.append(feedback.id)
                print("‚úÖ Offline —Ñ–∏–¥–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: \(feedback.title)")
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        pendingFeedbacks.removeAll { processedItems.contains($0.id) }
        
        if !processedItems.isEmpty {
            print("üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ \(processedItems.count) offline —Ñ–∏–¥–±—ç–∫–æ–≤")
        }
    }
    
    // üìä –ù–û–í–û–ï: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private func updatePerformanceMetrics(duration: TimeInterval, success: Bool) async {
        let currentMetrics = performanceMetrics
        
        performanceMetrics = PerformanceMetrics(
            averageGitHubCreateTime: calculateAverageTime(current: currentMetrics.averageGitHubCreateTime, 
                                                         new: duration, 
                                                         count: currentMetrics.totalFeedbacksCreated),
            successRate: calculateSuccessRate(currentRate: currentMetrics.successRate, 
                                            newSuccess: success, 
                                            total: currentMetrics.totalFeedbacksCreated),
            totalFeedbacksCreated: currentMetrics.totalFeedbacksCreated + 1,
            lastSyncTime: Date()
        )
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        print("""
        üìä Feedback Performance Update:
        - Average GitHub time: \(String(format: "%.2f", performanceMetrics.averageGitHubCreateTime))s
        - Success rate: \(String(format: "%.1f", performanceMetrics.successRate * 100))%
        - Total created: \(performanceMetrics.totalFeedbacksCreated)
        - Pending: \(pendingFeedbacks.count)
        """)
    }
    
    private func calculateAverageTime(current: TimeInterval, new: TimeInterval, count: Int) -> TimeInterval {
        if count == 0 { return new }
        return (current * Double(count) + new) / Double(count + 1)
    }
    
    private func calculateSuccessRate(currentRate: Double, newSuccess: Bool, total: Int) -> Double {
        let currentSuccesses = currentRate * Double(total)
        let newSuccesses = currentSuccesses + (newSuccess ? 1 : 0)
        return newSuccesses / Double(total + 1)
    }
    
    // ‚ö° –ù–û–í–û–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏
    private func startNetworkMonitoring() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
        Task {
            while true {
                await checkNetworkStatus()
                try? await Task.sleep(nanoseconds: 10_000_000_000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            }
        }
    }
    
    private func checkNetworkStatus() async {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub API
        guard let url = URL(string: "https://api.github.com") else { return }
        
        do {
            let (_, response) = try await URLSession.shared.data(from: url)
            if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 {
                networkStatus = .connected
            } else {
                networkStatus = .disconnected
            }
        } catch {
            networkStatus = .disconnected
        }
    }
}

// ‚ö° –ù–û–í–û–ï: Network status enum
enum NetworkStatus {
    case connected
    case disconnected
    case unknown
    
    var emoji: String {
        switch self {
        case .connected: return "üü¢"
        case .disconnected: return "üî¥"
        case .unknown: return "üü°"
        }
    }
    
    var description: String {
        switch self {
        case .connected: return "Connected"
        case .disconnected: return "Offline"
        case .unknown: return "Unknown"
        }
    }
}

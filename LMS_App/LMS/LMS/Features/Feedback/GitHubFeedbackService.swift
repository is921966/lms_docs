import Foundation
import UIKit

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issues –∏–∑ —Ñ–∏–¥–±—ç–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class GitHubFeedbackService {
    static let shared = GitHubFeedbackService()
    
    // MARK: - Configuration
    private let githubToken: String
    private let repositoryOwner: String
    private let repositoryName: String
    private let baseURL = "https://api.github.com"
    
    // ‚ö° –ù–û–í–û–ï: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private let requestTimeout: TimeInterval = 10.0 // 10 —Å–µ–∫—É–Ω–¥ timeout
    private let maxRetries: Int = 3
    private let retryDelay: TimeInterval = 2.0
    
    private init() {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ Keychain
        self.githubToken = ProcessInfo.processInfo.environment["GITHUB_TOKEN"] ?? ""
        self.repositoryOwner = "ishirokov" // –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username
        self.repositoryName = "lms_docs" // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
    }
    
    // MARK: - Public Methods
    
    /// –°–æ–∑–¥–∞–µ—Ç GitHub Issue –∏–∑ —Ñ–∏–¥–±—ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    func createIssueFromFeedback(_ feedback: FeedbackItem) async -> Bool {
        guard !githubToken.isEmpty else {
            print("‚ùå GitHub token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return false
        }
        
        let issueData = createIssueData(from: feedback)
        
        // ‚ö° –ù–û–í–û–ï: Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        for attempt in 1...maxRetries {
            let startTime = Date()
            let success = await createGitHubIssue(issueData)
            let duration = Date().timeIntervalSince(startTime)
            
            if success {
                print("‚úÖ GitHub Issue —Å–æ–∑–¥–∞–Ω –∑–∞ \(String(format: "%.2f", duration))—Å (–ø–æ–ø—ã—Ç–∫–∞ \(attempt))")
                await notifyFeedbackCreated(feedback)
                
                // üìä –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                await logPerformanceMetrics(duration: duration, attempt: attempt, success: true)
                return true
            } else {
                print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ \(attempt)/\(maxRetries) –Ω–µ —É–¥–∞–ª–∞—Å—å (–≤—Ä–µ–º—è: \(String(format: "%.2f", duration))—Å)")
                
                if attempt < maxRetries {
                    // Exponential backoff
                    let delay = retryDelay * pow(2.0, Double(attempt - 1))
                    try? await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))
                } else {
                    // üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É
                    await logPerformanceMetrics(duration: duration, attempt: attempt, success: false)
                }
            }
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GitHub Issue –ø–æ—Å–ª–µ \(maxRetries) –ø–æ–ø—ã—Ç–æ–∫")
        return false
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å GitHub Issue
    func updateIssueStatus(_ feedback: FeedbackItem) async -> Bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Issue
        return true
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ GitHub Issue
    func addCommentToIssue(_ feedback: FeedbackItem, comment: FeedbackComment) async -> Bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ Issue
        return true
    }
    
    // MARK: - Private Methods
    
    private func createIssueData(from feedback: FeedbackItem) -> GitHubIssueData {
        let title = "[\(feedback.type.title)] \(feedback.title)"
        
        let body = """
        ## üìù –û–ø–∏—Å–∞–Ω–∏–µ
        \(feedback.description)
        
        ## üë§ –ê–≤—Ç–æ—Ä
        **\(feedback.author)** (ID: \(feedback.authorId))
        
        ## üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        \(DateFormatter.iso8601.string(from: feedback.createdAt))
        
        ## üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        - **–ú–æ–¥–µ–ª—å**: \(getDeviceInfo().model)
        - **iOS**: \(getDeviceInfo().osVersion)
        - **–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: \(getDeviceInfo().appVersion)
        - **–°–±–æ—Ä–∫–∞**: \(getDeviceInfo().buildNumber)
        
        ## üîÑ –°—Ç–∞—Ç—É—Å
        **\(feedback.status.title)**
        
        ## üí≠ –†–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        üëç \(feedback.reactions.like) | üëé \(feedback.reactions.dislike) | ‚ù§Ô∏è \(feedback.reactions.heart) | üî• \(feedback.reactions.fire)
        
        \(feedback.comments.isEmpty ? "" : generateCommentsSection(feedback.comments))
        
        ---
        *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LMS*
        """
        
        let labels = generateLabels(for: feedback)
        
        return GitHubIssueData(
            title: title,
            body: body,
            labels: labels,
            assignees: getAssignees(for: feedback.type)
        )
    }
    
    private func generateLabels(for feedback: FeedbackItem) -> [String] {
        var labels = ["feedback", "mobile-app"]
        
        // –õ–µ–π–±–ª –ø–æ —Ç–∏–ø—É
        switch feedback.type {
        case .bug:
            labels.append("bug")
        case .feature:
            labels.append("enhancement")
        case .improvement:
            labels.append("improvement")
        case .question:
            labels.append("question")
        }
        
        // –õ–µ–π–±–ª –ø–æ —Å—Ç–∞—Ç—É—Å—É
        switch feedback.status {
        case .open:
            labels.append("status:open")
        case .inProgress:
            labels.append("status:in-progress")
        case .resolved:
            labels.append("status:resolved")
        case .closed:
            labels.append("status:closed")
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–∫—Ü–∏–π
        let totalReactions = feedback.reactions.like + feedback.reactions.heart + feedback.reactions.fire
        if totalReactions > 10 {
            labels.append("priority:high")
        } else if totalReactions > 5 {
            labels.append("priority:medium")
        } else {
            labels.append("priority:low")
        }
        
        return labels
    }
    
    private func getAssignees(for type: FeedbackType) -> [String] {
        // –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        switch type {
        case .bug:
            return ["ishirokov"] // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥ –¥–ª—è –±–∞–≥–æ–≤
        case .feature, .improvement:
            return ["ishirokov"] // –ü—Ä–æ–¥—É–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ñ–∏—á
        case .question:
            return ["ishirokov"] // –°–∞–ø–ø–æ—Ä—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        }
    }
    
    private func generateCommentsSection(_ comments: [FeedbackComment]) -> String {
        guard !comments.isEmpty else { return "" }
        
        var section = "\n## üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        for comment in comments {
            let authorBadge = comment.isAdmin ? " üë§ **ADMIN**" : ""
            section += """
            **\(comment.author)**\(authorBadge) - *\(DateFormatter.relative.string(from: comment.createdAt))*
            > \(comment.text)
            
            """
        }
        
        return section
    }
    
    private func createGitHubIssue(_ issueData: GitHubIssueData) async -> Bool {
        guard let url = URL(string: "\(baseURL)/repos/\(repositoryOwner)/\(repositoryName)/issues") else {
            return false
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("token \(githubToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("LMS-Mobile-App/1.0", forHTTPHeaderField: "User-Agent")
        
        // ‚ö° –ù–û–í–û–ï: Timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–∞–∑–∞
        request.timeoutInterval = requestTimeout
        
        do {
            let jsonData = try JSONEncoder().encode(issueData)
            request.httpBody = jsonData
            
            let (data, response) = try await URLSession.shared.data(for: request)
            
            if let httpResponse = response as? HTTPURLResponse {
                if httpResponse.statusCode == 201 {
                    print("‚úÖ GitHub Issue —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                    if let responseData = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let issueNumber = responseData["number"] as? Int {
                        print("üìù Issue #\(issueNumber): \(issueData.title)")
                    }
                    return true
                } else {
                    print("‚ùå GitHub API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                    if let errorData = String(data: data, encoding: .utf8) {
                        print("‚ùå –û—à–∏–±–∫–∞: \(errorData)")
                    }
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: \(error)")
        }
        
        return false
    }
    
    // ‚ö° –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private func logPerformanceMetrics(duration: TimeInterval, attempt: Int, success: Bool) async {
        let metrics = """
        üìä GitHub API Performance:
        - Duration: \(String(format: "%.2f", duration))s
        - Attempt: \(attempt)
        - Success: \(success)
        - Timestamp: \(Date())
        """
        print(metrics)
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    }
    
    private func notifyFeedbackCreated(_ feedback: FeedbackItem) async {
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ Slack/Discord
        print("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ù–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫ –æ—Ç \(feedback.author): \(feedback.title)")
    }
    
    private func getDeviceInfo() -> (model: String, osVersion: String, appVersion: String, buildNumber: String) {
        return (
            model: UIDevice.current.model,
            osVersion: UIDevice.current.systemVersion,
            appVersion: Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "Unknown",
            buildNumber: Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "Unknown"
        )
    }
}

// MARK: - Data Models

struct GitHubIssueData: Codable {
    let title: String
    let body: String
    let labels: [String]
    let assignees: [String]
}

// MARK: - Date Formatters Extension

extension DateFormatter {
    static let iso8601: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'"
        formatter.timeZone = TimeZone(abbreviation: "UTC")
        return formatter
    }()
    
    static let relative: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter
    }()
} 
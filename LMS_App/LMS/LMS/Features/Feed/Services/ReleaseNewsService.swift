//
//  ReleaseNewsService.swift
//  LMS
//
//  –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ —Ä–µ–ª–∏–∑–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//

import SwiftUI

@MainActor
class ReleaseNewsService: ObservableObject {
    static let shared = ReleaseNewsService()
    
    // MARK: - Properties
    
    @Published var hasNewRelease: Bool = false
    
    private let userDefaults = UserDefaults.standard
    private let lastVersionKey = "lastAnnouncedAppVersion"
    private let lastBuildKey = "lastAnnouncedBuildNumber"
    private let releaseNotesKey = "currentReleaseNotes"
    
    // Current app info
    var currentAppVersion: String {
        Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0.0"
    }
    
    var currentBuildNumber: String {
        Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "1"
    }
    
    // MARK: - Initialization
    
    private init() {
        checkForNewRelease()
    }
    
    // MARK: - Public Methods
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    func checkForNewRelease() {
        let lastVersion = userDefaults.string(forKey: lastVersionKey)
        let lastBuild = userDefaults.string(forKey: lastBuildKey)
        
        hasNewRelease = (lastVersion != currentAppVersion || lastBuild != currentBuildNumber)
    }
    
    /// –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –æ —Ä–µ–ª–∏–∑–µ –≤ –ª–µ–Ω—Ç–µ
    func publishReleaseNews(releaseNotes: String? = nil) async {
        guard hasNewRelease else { return }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º release notes
        let notes = releaseNotes ?? getCurrentReleaseNotes()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º release notes
        userDefaults.set(notes, forKey: releaseNotesKey)
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ release notes
        let releaseNews = BuildReleaseNews.fromReleaseNotes(
            version: currentAppVersion,
            buildNumber: currentBuildNumber,
            releaseNotesContent: notes
        )
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FeedItem
        let feedItem = releaseNews.toFeedItem()
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–µ–Ω—Ç—É —á–µ—Ä–µ–∑ FeedService
        await FeedService.shared.addNewsItem(feedItem)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        userDefaults.set(currentAppVersion, forKey: lastVersionKey)
        userDefaults.set(currentBuildNumber, forKey: lastBuildKey)
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        hasNewRelease = false
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        sendNewReleaseNotification()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ release notes
    func getCurrentReleaseNotes() -> String {
        if let saved = userDefaults.string(forKey: releaseNotesKey) {
            return saved
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        if let bundlePath = Bundle.main.path(forResource: "RELEASE_NOTES", ofType: "md"),
           let content = try? String(contentsOfFile: bundlePath) {
            return content
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ release notes
        return generateDefaultReleaseNotes()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    func checkAndPublishOnAppLaunch() {
        checkForNewRelease()
        
        if hasNewRelease {
            // –ü—É–±–ª–∏–∫—É–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            Task {
                try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
                await publishReleaseNews()
            }
        }
    }
    
    // MARK: - Private Methods
    
    private func generateDefaultReleaseNotes() -> String {
        """
        <div style="font-family: -apple-system, system-ui; padding: 10px;">
            <h1 style="font-size: 24px; margin-bottom: 15px;">
                TestFlight Release v\(currentAppVersion)
            </h1>
            
            <p style="font-size: 18px; color: #666; margin-bottom: 20px;">
                <strong>Build:</strong> \(currentBuildNumber)
            </p>
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                    üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </h2>
                
                <div style="margin-top: 15px;">
                    <h3 style="font-size: 18px; color: #333; margin-bottom: 8px;">
                        ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    </h3>
                    <ul style="margin: 0; padding-left: 20px;">
                        <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                        <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
                        <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏</li>
                    </ul>
                </div>
            </div>
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                    üìã –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
                </h2>
                
                <h3 style="font-size: 18px; color: #333; margin-bottom: 8px;">
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
                </h3>
                <ul style="margin: 0; padding-left: 20px;">
                    <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                    <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
                    <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏</li>
                </ul>
            </div>
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #FF6B6B; margin-bottom: 10px;">
                    üêõ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                </h2>
                <ul style="margin: 0; padding-left: 20px;">
                    <li style="margin-bottom: 5px; color: #FF6B6B; line-height: 1.5;">–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π</li>
                </ul>
            </div>
            
            <hr style="margin: 25px 0; border: none; border-top: 1px solid #e0e0e0;">
            
            <p style="text-align: center; color: #666; font-size: 16px; margin-top: 20px;">
                –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! üôè
            </p>
        </div>
        """
    }
    
    private func sendNewReleaseNotification() {
        NotificationCenter.default.post(
            name: NSNotification.Name("NewReleaseAvailable"),
            object: nil,
            userInfo: [
                "version": currentAppVersion,
                "build": currentBuildNumber
            ]
        )
    }
    
    // MARK: - Helper Methods for Testing
    
    func loadReleaseNotesFromFile(path: String) async -> String? {
        return await Task {
            try? String(contentsOfFile: path)
        }.value
    }
}

// MARK: - Debug Helpers

#if DEBUG
extension ReleaseNewsService {
    /// –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    func resetForTesting() {
        userDefaults.removeObject(forKey: lastVersionKey)
        userDefaults.removeObject(forKey: lastBuildKey)
        userDefaults.removeObject(forKey: releaseNotesKey)
        checkForNewRelease()
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ release notes –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    func setTestReleaseNotes(_ notes: String) {
        userDefaults.set(notes, forKey: releaseNotesKey)
    }
}
#endif 
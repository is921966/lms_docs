//
//  MockFeedService.swift
//  LMS
//
//  Created by LMS Team on 13.01.2025.
//

import Foundation
import Combine

@MainActor
class MockFeedService: ObservableObject, FeedServiceProtocol {
    
    static let shared = MockFeedService()
    
    @Published private(set) var posts: [FeedPost] = []
    @Published private(set) var channels: [FeedChannel] = []
    @Published private(set) var channelPosts: [String: [FeedPost]] = [:] // channelId -> posts
    @Published private(set) var isLoading = false
    @Published var error: Error?
    @Published private(set) var permissions = FeedPermissions(
        canPost: false,
        canComment: true,
        canLike: true,
        canShare: true,
        canDelete: false,
        canEdit: false,
        canModerate: false,
        visibilityOptions: []
    )
    
    // Publishers for protocol conformance
    var postsPublisher: AnyPublisher<[FeedPost], Never> {
        $posts.eraseToAnyPublisher()
    }
    
    var isLoadingPublisher: AnyPublisher<Bool, Never> {
        $isLoading.eraseToAnyPublisher()
    }
    
    var errorPublisher: AnyPublisher<Error?, Never> {
        $error.eraseToAnyPublisher()
    }
    
    var permissionsPublisher: AnyPublisher<FeedPermissions, Never> {
        $permissions.eraseToAnyPublisher()
    }
    
    private let authService = MockAuthService.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        setupAuthObserver()
        loadMockData()
        checkAndAddReleaseNews()
        
        // Force synchronous update to ensure data is available
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            ComprehensiveLogger.shared.log(.data, .info, "MockFeedService: Force update after init", details: [
                "channelsCount": self.channels.count,
                "channelPostsCount": self.channelPosts.count,
                "totalPosts": self.posts.count
            ])
            
            // Force publish updates
            self.objectWillChange.send()
        }
    }
    
    private func setupAuthObserver() {
        authService.$currentUser
            .sink { [weak self] user in
                self?.updatePermissions(for: user)
            }
            .store(in: &cancellables)
    }
    
    private func updatePermissions(for user: UserResponse?) {
        guard let user = user else {
            permissions = FeedPermissions(
                canPost: false,
                canComment: true,
                canLike: true,
                canShare: true,
                canDelete: false,
                canEdit: false,
                canModerate: false,
                visibilityOptions: []
            )
            return
        }
        
        switch user.role {
        case .student:
            permissions = FeedPermissions.studentDefault
        case .instructor:
            permissions = FeedPermissions.instructorDefault
        case .admin, .superAdmin:
            permissions = FeedPermissions.adminDefault
        case .manager:
            permissions = FeedPermissions.managerDefault
        }
    }
    
    private func loadMockData() {
        let calendar = Calendar.current
        
        ComprehensiveLogger.shared.log(.data, .info, "MockFeedService: Starting to load data")
        
        // First, load real data from documentation and organize by channels
        let channelData = RealDataFeedService.shared.loadAllChannelPosts()
        
        ComprehensiveLogger.shared.log(.data, .info, "MockFeedService: Loaded channel data", details: [
            "channelTypes": channelData.keys.map { $0.rawValue },
            "totalChannels": channelData.count
        ])
        
        // Create channels and populate channelPosts
        channels = []
        channelPosts = [:]
        
        ComprehensiveLogger.shared.log(.data, .info, "Starting to create channels and channelPosts")
        
        for (channelType, posts) in channelData {
            ComprehensiveLogger.shared.log(.data, .debug, "Processing channel type: \(channelType.rawValue)", details: [
                "postsCount": posts.count
            ])
            
            if !posts.isEmpty {
                if let channel = FeedChannel.fromPosts(posts, type: channelType) {
                    channels.append(channel)
                    channelPosts[channel.id] = posts
                    
                    // Add all posts to the main posts array
                    self.posts.append(contentsOf: posts)
                    
                    ComprehensiveLogger.shared.log(.data, .info, "Created channel and added to channelPosts", details: [
                        "channelId": channel.id,
                        "channelName": channel.name,
                        "channelType": channelType.rawValue,
                        "postsCount": posts.count,
                        "unreadCount": channel.unreadCount,
                        "channelPostsKeys": Array(channelPosts.keys)
                    ])
                } else {
                    ComprehensiveLogger.shared.log(.data, .warning, "Failed to create channel for type: \(channelType.rawValue)")
                }
            } else {
                ComprehensiveLogger.shared.log(.data, .debug, "No posts for channel type: \(channelType.rawValue)")
            }
        }
        
        ComprehensiveLogger.shared.log(.data, .info, "Finished creating channels", details: [
            "totalChannels": channels.count,
            "channelPostsCount": channelPosts.count,
            "allChannelIds": Array(channelPosts.keys).sorted(),
            "postsPerChannel": channelPosts.mapValues { $0.count }
        ])
        
        // Sort channels by priority
        channels.sort { lhs, rhs in
            // Pinned channels first
            if lhs.isPinned != rhs.isPinned {
                return lhs.isPinned
            }
            // Then by last message date
            return lhs.lastMessage.date > rhs.lastMessage.date
        }
        
        // Sort all posts by date
        posts.sort { $0.createdAt > $1.createdAt }
        
        ComprehensiveLogger.shared.log(.data, .info, "MockFeedService: Data loading complete", details: [
            "totalChannels": channels.count,
            "totalPosts": posts.count,
            "channelNames": channels.map { $0.name }
        ])
    }
    
    private func checkAndAddReleaseNews() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤ Info.plist
        let hasNewRelease = Bundle.main.infoDictionary?["LMSHasNewRelease"] as? Bool ?? false
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        let currentVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0.0"
        let currentBuild = Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "1"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ–≤–æ—Å—Ç—å –æ —Ä–µ–ª–∏–∑–µ –≤ —Ç–µ–∫—É—â–∏—Ö –ø–æ—Å—Ç–∞—Ö
        let releasePostId = "release-\(currentVersion)-\(currentBuild)"
        let releaseNewsExists = posts.contains { $0.id == releasePostId }
        
        if hasNewRelease && !releaseNewsExists {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å release notes –∏–∑ bundle
            var releaseContent = ""
            
            if let releaseNotesPath = Bundle.main.path(forResource: "RELEASE_NOTES", ofType: "md"),
               let content = try? String(contentsOfFile: releaseNotesPath) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ñ–∞–π–ª–∞
                releaseContent = content
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
                releaseContent = """
                <div style="font-family: -apple-system, system-ui; padding: 10px;">
                    <h1 style="font-size: 24px; margin-bottom: 15px;">
                        üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è v2.1.1 <span style="color: #666; font-size: 18px;">(Build 213)</span>
                    </h1>
                    
                    <div style="margin-top: 20px;">
                        <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                            üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </h2>
                        
                        <div style="margin-top: 15px;">
                            <h3 style="font-size: 18px; color: #333; margin-bottom: 8px;">
                                ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                            </h3>
                            <ul style="margin: 0; padding-left: 20px;">
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä—ã</strong> - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ "–í—ã—à–µ—Å—Ç–æ—è—â–∏–π –ö–æ–¥" –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω Excel</strong> - —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É</strong> - –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫</li>
                            </ul>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <h3 style="font-size: 18px; color: #333; margin-bottom: 8px;">
                                üîß –£–ª—É—á—à–µ–Ω–∏—è
                            </h3>
                            <ul style="margin: 0; padding-left: 20px;">
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞</strong> - —É–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ –∫–æ–¥—É, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–≤–Ω–∞—è —Å–≤—è–∑—å</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–ì–∏–±–∫–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</strong> - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–¥—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;"><strong>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ</strong> - —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ Documents —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</li>
                            </ul>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <h3 style="font-size: 18px; color: #333; margin-bottom: 8px;">
                                üî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            </h3>
                            <ul style="margin: 0; padding-left: 20px;">
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏</li>
                                <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ sharedStrings XML</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                        </h2>
                        
                        <ul style="margin: 0; padding-left: 20px;">
                            <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω Excel —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω"</li>
                            <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É "–í—ã—à–µ—Å—Ç–æ—è—â–∏–π –ö–æ–¥" –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö</li>
                            <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª Excel"</li>
                        </ul>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <h2 style="font-size: 20px; color: #FF6B6B; margin-bottom: 10px;">
                            ‚ö†Ô∏è –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        </h2>
                        <ul style="margin: 0; padding-left: 20px;">
                            <li style="margin-bottom: 5px; color: #FF6B6B; line-height: 1.5;">–°—Ç–∞—Ä—ã–µ Excel —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ "–í—ã—à–µ—Å—Ç–æ—è—â–∏–π –ö–æ–¥"</li>
                            <li style="margin-bottom: 5px; color: #FF6B6B; line-height: 1.5;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–¥–∞ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</li>
                        </ul>
                    </div>
                    
                    <div style="margin-top: 25px; padding: 15px; background-color: #f5f5f5; border-radius: 8px;">
                        <h3 style="font-size: 16px; color: #666; margin-bottom: 8px;">üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <p style="margin: 3px 0; color: #888; font-size: 14px;">
                            –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è iOS: 17.0<br>
                            –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è iOS: 18.5<br>
                            –†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ~45 MB
                        </p>
                    </div>
                    
                    <div style="margin-top: 20px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
                        <p style="text-align: center; color: #007AFF; font-size: 14px;">
                            #release #update #testflight #orgstructure
                        </p>
                    </div>
                </div>
                """
            }
            
            let releasePost = FeedPost(
                id: releasePostId,
                author: UserResponse(
                    id: "system",
                    email: "system@lms.com",
                    name: "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: releaseContent,
                images: [],
                attachments: [],
                createdAt: Date(),
                visibility: .everyone,
                likes: [],
                comments: [],
                tags: ["#release", "#update", "#testflight"],
                mentions: [],
                metadata: [
                    "type": "app_release",
                    "contentType": "html",
                    "version": currentVersion,
                    "build": currentBuild
                ]
            )
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ª–µ–Ω—Ç—ã
            posts.insert(releasePost, at: 0)
        }
    }
    
    // MARK: - Public Methods
    
    func createPost(
        content: String,
        images: [String] = [],
        attachments: [FeedAttachment] = [],
        visibility: FeedVisibility = .everyone
    ) async throws {
        guard let currentUser = authService.currentUser else {
            throw FeedError.noPermission
        }
        
        guard permissions.canPost else {
            throw FeedError.noPermission
        }
        
        let newPost = FeedPost(
            id: UUID().uuidString,
            author: currentUser,
            content: content,
            images: images,
            attachments: attachments,
            createdAt: Date(),
            visibility: visibility,
            likes: [],
            comments: [],
            tags: extractTags(from: content),
            mentions: extractMentions(from: content)
        )
        
        posts.insert(newPost, at: 0)
    }
    
    func deletePost(_ postId: String) async throws {
        guard let post = posts.first(where: { $0.id == postId }) else {
            throw FeedError.postNotFound
        }
        
        let canDelete = post.author.id == authService.currentUser?.id || permissions.canModerate
        
        guard canDelete else {
            throw FeedError.noPermission
        }
        
        posts.removeAll { $0.id == postId }
    }
    
    func toggleLike(postId: String) async throws {
        guard let currentUser = authService.currentUser else {
            throw FeedError.noPermission
        }
        
        guard permissions.canLike else {
            throw FeedError.noPermission
        }
        
        guard let index = posts.firstIndex(where: { $0.id == postId }) else {
            throw FeedError.postNotFound
        }
        
        var post = posts[index]
        
        if post.likes.contains(currentUser.id) {
            post.likes.removeAll { $0 == currentUser.id }
        } else {
            post.likes.append(currentUser.id)
        }
        
        posts[index] = post
    }
    
    func addComment(to postId: String, content: String) async throws {
        guard let currentUser = authService.currentUser else {
            throw FeedError.noPermission
        }
        
        guard permissions.canComment else {
            throw FeedError.noPermission
        }
        
        guard let index = posts.firstIndex(where: { $0.id == postId }) else {
            throw FeedError.postNotFound
        }
        
        let newComment = FeedComment(
            id: UUID().uuidString,
            postId: postId,
            author: currentUser,
            content: content,
            createdAt: Date(),
            likes: []
        )
        
        var post = posts[index]
        post.comments.append(newComment)
        posts[index] = post
    }
    
    func refresh() {
        loadMockData()
        checkAndAddReleaseNews()
    }
    
    // MARK: - Helper Methods
    
    private func extractTags(from content: String) -> [String] {
        let pattern = "#[\\w\\u0400-\\u04FF]+"
        let regex = try? NSRegularExpression(pattern: pattern)
        let matches = regex?.matches(in: content, range: NSRange(content.startIndex..., in: content)) ?? []
        
        return matches.compactMap { match in
            guard let range = Range(match.range, in: content) else { return nil }
            return String(content[range])
        }
    }
    
    private func extractMentions(from content: String) -> [String] {
        let pattern = "@[\\w\\u0400-\\u04FF]+"
        let regex = try? NSRegularExpression(pattern: pattern)
        let matches = regex?.matches(in: content, range: NSRange(content.startIndex..., in: content)) ?? []
        
        return matches.compactMap { match in
            guard let range = Range(match.range, in: content) else { return nil }
            let mention = String(content[range])
            return String(mention.dropFirst()) // Remove @
        }
    }
    
    // MARK: - Test Helpers
    
    func reset() {
        posts.removeAll()
        error = nil
        isLoading = false
        loadMockData()
    }
    
    func setError(_ error: FeedError) {
        self.error = error
    }
    
    func setLoading(_ loading: Bool) {
        self.isLoading = loading
    }
} 
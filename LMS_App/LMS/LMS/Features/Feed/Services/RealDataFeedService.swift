//
//  RealDataFeedService.swift
//  LMS
//
//  Service for loading real release notes and sprint reports
//

import Foundation
import SwiftUI

@MainActor
class RealDataFeedService: ObservableObject {
    static let shared = RealDataFeedService()
    
    private init() {}
    
    /// Load all posts organized by channels
    func loadAllChannelPosts() -> [ChannelType: [FeedPost]] {
        var channelPosts: [ChannelType: [FeedPost]] = [:]
        
        // Load release notes
        channelPosts[.releases] = loadReleaseNotes()
        
        // Load sprint reports  
        channelPosts[.sprints] = loadSprintReports()
        
        // Load methodology updates
        channelPosts[.methodology] = loadMethodologyUpdates()
        
        // Load course announcements
        channelPosts[.courses] = loadCourseAnnouncements()
        
        // Load admin posts
        channelPosts[.admin] = loadAdminPosts()
        
        // Load HR posts
        channelPosts[.hr] = loadHRPosts()
        
        // Load user's courses
        channelPosts[.myCourses] = loadMyCourses()
        
        // Load community posts
        channelPosts[.userPosts] = loadUserPosts()
        
        return channelPosts
    }
    
    /// Load release notes from documentation files
    func loadReleaseNotes() -> [FeedPost] {
        ComprehensiveLogger.shared.log(.data, .info, "=== Starting loadReleaseNotes ===", details: [
            "timestamp": Date().timeIntervalSince1970,
            "thread": Thread.current.description
        ])
        
        var posts: [FeedPost] = []
        
        let fileManager = FileManager.default
        let releasePaths = [
            "/Users/ishirokov/lms_docs/docs/releases",
            "/Users/ishirokov/lms_docs/LMS_App/LMS" // Assuming some releases might be here too
        ]
        
        for path in releasePaths {
            ComprehensiveLogger.shared.log(.data, .debug, "Scanning release path", details: [
                "path": path,
                "exists": fileManager.fileExists(atPath: path)
            ])
            
            do {
                let files = try fileManager.contentsOfDirectory(atPath: path)
                let releaseFiles = files.filter { 
                    $0.contains("RELEASE") && $0.hasSuffix(".md")
                }
                
                ComprehensiveLogger.shared.log(.data, .info, "Found release files", details: [
                    "path": path,
                    "totalFiles": files.count,
                    "releaseFiles": releaseFiles.count,
                    "fileNames": releaseFiles.prefix(5).joined(separator: ", ")
                ])
                
                for file in releaseFiles {
                    let fullPath = path + "/" + file
                    if let content = try? String(contentsOfFile: fullPath, encoding: .utf8),
                       let post = createPostFromReleaseNotes(path: fullPath, content: content) {
                        posts.append(post)
                        ComprehensiveLogger.shared.log(.data, .debug, "Created post from \(file)")
                    } else {
                        ComprehensiveLogger.shared.log(.data, .warning, "Failed to create post from \(file)")
                    }
                }
            } catch {
                ComprehensiveLogger.shared.log(.data, .error, "Failed to load releases from \(path): \(error)")
            }
        }
        
        // Sort by date, newest first
        posts.sort { $0.createdAt > $1.createdAt }
        
        ComprehensiveLogger.shared.log(.data, .info, "Loaded \(posts.count) release posts total")
        
        return posts
    }
    
    /// Load sprint reports
    func loadSprintReports() -> [FeedPost] {
        ComprehensiveLogger.shared.log(.data, .info, "=== Starting loadSprintReports ===", details: [
            "timestamp": Date().timeIntervalSince1970,
            "thread": Thread.current.description
        ])
        
        var posts: [FeedPost] = []
        
        let fileManager = FileManager.default
        let sprintPaths = [
            "/Users/ishirokov/lms_docs/reports/sprints"
        ]
        
        for path in sprintPaths {
            ComprehensiveLogger.shared.log(.data, .debug, "Scanning sprint path", details: [
                "path": path,
                "exists": fileManager.fileExists(atPath: path)
            ])
            
            do {
                let files = try fileManager.contentsOfDirectory(atPath: path)
                let sprintFiles = files.filter { 
                    ($0.contains("COMPLETION_REPORT") || $0.contains("PROGRESS")) && $0.hasSuffix(".md")
                }
                
                ComprehensiveLogger.shared.log(.data, .info, "Found sprint files", details: [
                    "path": path,
                    "totalFiles": files.count,
                    "sprintFiles": sprintFiles.count,
                    "fileNames": sprintFiles.prefix(5).joined(separator: ", ")
                ])
                
                for file in sprintFiles {
                    let fullPath = path + "/" + file
                    if let content = try? String(contentsOfFile: fullPath, encoding: .utf8),
                       let post = createPostFromSprintReport(path: fullPath, content: content) {
                        posts.append(post)
                    }
                }
                
            } catch {
                ComprehensiveLogger.shared.log(.data, .error, "Failed to load sprint reports from \(path): \(error.localizedDescription)")
            }
        }
        
        // Sort by date, newest first
        posts.sort { $0.createdAt > $1.createdAt }
        
        ComprehensiveLogger.shared.log(.data, .info, "Loaded \(posts.count) sprint reports")
        
        return posts
    }
    
    /// Load methodology updates
    func loadMethodologyUpdates() -> [FeedPost] {
        ComprehensiveLogger.shared.log(.data, .info, "=== Starting loadMethodologyUpdates ===", details: [
            "timestamp": Date().timeIntervalSince1970,
            "thread": Thread.current.description
        ])
        
        var posts: [FeedPost] = []
        let fileManager = FileManager.default
        let methodologyPath = "/Users/ishirokov/lms_docs/reports/methodology"
        
        ComprehensiveLogger.shared.log(.data, .debug, "Scanning methodology path", details: [
            "path": methodologyPath,
            "exists": fileManager.fileExists(atPath: methodologyPath)
        ])
        
        do {
            let files = try fileManager.contentsOfDirectory(atPath: methodologyPath)
            let methodologyFiles = files.filter { $0.hasSuffix(".md") }
            
            ComprehensiveLogger.shared.log(.data, .info, "Found methodology files", details: [
                "path": methodologyPath,
                "totalFiles": files.count,
                "methodologyFiles": methodologyFiles.count,
                "fileNames": methodologyFiles.prefix(5).joined(separator: ", ")
            ])
            
            for file in methodologyFiles {
                let fullPath = methodologyPath + "/" + file
                if let content = try? String(contentsOfFile: fullPath, encoding: .utf8),
                   let post = createPostFromMethodology(path: fullPath, content: content) {
                    posts.append(post)
                    ComprehensiveLogger.shared.log(.data, .debug, "Created post from \(file)")
                } else {
                    ComprehensiveLogger.shared.log(.data, .warning, "Failed to create post from \(file)")
                }
            }
        } catch {
            ComprehensiveLogger.shared.log(.data, .error, "Failed to load methodology updates: \(error)")
        }
        
        // Sort by date, newest first
        posts.sort { $0.createdAt > $1.createdAt }
        
        ComprehensiveLogger.shared.log(.data, .info, "Loaded \(posts.count) methodology posts total")
        
        return posts
    }
    
    /// Load course announcements
    func loadCourseAnnouncements() -> [FeedPost] {
        return [
            FeedPost(
                id: "course-swift-ui",
                author: UserResponse(
                    id: "education-team",
                    email: "education@tsum.ru",
                    name: "–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¶–£–ú",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # üöÄ –ù–æ–≤—ã–π –∫—É—Ä—Å: SwiftUI –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
                
                ## –û –∫—É—Ä—Å–µ
                
                –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SwiftUI!
                
                ### –ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ:
                - –û—Å–Ω–æ–≤—ã Swift –∏ SwiftUI
                - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
                - –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                - –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å REST API
                - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ App Store
                
                ### –î–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –∫—É—Ä—Å:
                - –ù–∞—á–∏–Ω–∞—é—â–∏–µ iOS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
                - Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∂–µ–ª–∞—é—â–∏–µ –æ—Å–≤–æ–∏—Ç—å –º–æ–±–∏–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
                - –°—Ç—É–¥–µ–Ω—Ç—ã –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ IT —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
                
                **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: 8 –Ω–µ–¥–µ–ª—å  
                **–§–æ—Ä–º–∞—Ç**: –û–Ω–ª–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–Ω—Ç–æ—Ä–∞  
                **–°—Ç–∞—Ä—Ç**: 1 –∞–≤–≥—É—Å—Ç–∞ 2025  
                
                üéÅ **–ë–æ–Ω—É—Å**: –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏!
                """,
                images: ["swiftui-course-banner"],
                attachments: [
                    FeedAttachment(
                        id: "course-program",
                        type: .document,
                        url: "https://lms.tsum.ru/courses/swiftui/program.pdf",
                        name: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ SwiftUI.pdf",
                        size: 2457600, // 2.4 MB
                        thumbnailUrl: nil
                    )
                ],
                createdAt: Date().addingTimeInterval(-3600), // 1 hour ago
                visibility: .everyone,
                likes: ["user1", "user2", "user3", "user4", "user5"],
                comments: [
                    FeedComment(
                        id: "comment-course-1",
                        postId: "course-swift-ui",
                        author: UserResponse(
                            id: "user-developer",
                            email: "dev@tsum.ru",
                            name: "–ê–ª–µ–∫—Å–µ–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                            role: .student,
                            isActive: true,
                            createdAt: Date()
                        ),
                        content: "–î–∞–≤–Ω–æ –∂–¥–∞–ª —ç—Ç–æ—Ç –∫—É—Ä—Å! –ó–∞–ø–∏—Å–∞–ª—Å—è üéâ",
                        createdAt: Date().addingTimeInterval(-1800),
                        likes: ["user2", "user3"]
                    )
                ],
                tags: ["#–∫—É—Ä—Å", "#ios", "#swiftui", "#–Ω–æ–≤—ã–π"],
                mentions: [],
                metadata: ["type": "course", "courseId": "swiftui-basics", "featured": "true"]
            ),
            
            FeedPost(
                id: "course-kubernetes",
                author: UserResponse(
                    id: "education-team",
                    email: "education@tsum.ru",
                    name: "–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¶–£–ú",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # ‚ò∏Ô∏è Kubernetes –¥–ª—è DevOps –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
                
                ## –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
                
                –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å –ø–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å Kubernetes.
                
                ### –ü—Ä–æ–≥—Ä–∞–º–º–∞:
                1. **–ù–µ–¥–µ–ª—è 1-2**: –û—Å–Ω–æ–≤—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ Docker
                2. **–ù–µ–¥–µ–ª—è 3-4**: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Kubernetes
                3. **–ù–µ–¥–µ–ª—è 5-6**: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                4. **–ù–µ–¥–µ–ª—è 7-8**: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                
                ### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è:
                - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD pipeline
                - –†–∞–±–æ—Ç–∞ —Å Helm charts
                - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å Prometheus
                
                **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å**: –ò–≤–∞–Ω –ö—É–±–µ—Ä–Ω–µ—Ç–æ–≤ - Senior DevOps Engineer  
                **–°—Ç–∞—Ä—Ç**: 15 –∏—é–ª—è 2025  
                **–°—Ç–æ–∏–º–æ—Å—Ç—å**: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¶–£–ú
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-86400), // 1 day ago
                visibility: .everyone,
                likes: ["user1", "user2"],
                comments: [],
                tags: ["#–∫—É—Ä—Å", "#kubernetes", "#devops", "#–±–µ—Å–ø–ª–∞—Ç–Ω–æ"],
                mentions: [],
                metadata: ["type": "course", "courseId": "kubernetes-devops"]
            ),
            
            FeedPost(
                id: "course-sql-advanced",
                author: UserResponse(
                    id: "education-team",
                    email: "education@tsum.ru",
                    name: "–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¶–£–ú",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # üóÉÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π SQL –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
                
                –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
                
                ### –¢–µ–º—ã –∫—É—Ä—Å–∞:
                - –°–ª–æ–∂–Ω—ã–µ JOIN –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã
                - –û–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                - –ò–Ω–¥–µ–∫—Å—ã –∏ –ø–ª–∞–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                - –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                - NoSQL vs SQL: –∫–æ–≥–¥–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                
                üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞**: –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¶–£–ú (–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–º–∏)
                
                **–§–æ—Ä–º–∞—Ç**: –ì–∏–±—Ä–∏–¥–Ω—ã–π (–æ–Ω–ª–∞–π–Ω + 2 –æ—á–Ω—ã—Ö –≤–æ—Ä–∫—à–æ–ø–∞)  
                **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: 6 –Ω–µ–¥–µ–ª—å  
                **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è**: –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è SQL
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-172800), // 2 days ago
                visibility: .everyone,
                likes: ["user1", "user2", "user3"],
                comments: [],
                tags: ["#–∫—É—Ä—Å", "#sql", "#–±–∞–∑—ã–¥–∞–Ω–Ω—ã—Ö", "#–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
                mentions: [],
                metadata: ["type": "course", "courseId": "sql-advanced"]
            )
        ]
    }
    
    /// Load admin posts
    func loadAdminPosts() -> [FeedPost] {
        return [
            FeedPost(
                id: "admin-maintenance",
                author: UserResponse(
                    id: "admin-team",
                    email: "admin@tsum.ru",
                    name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # ‚ö†Ô∏è –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                
                **–ö–æ–≥–¥–∞**: 25 –∏—é–ª—è 2025, 03:00 - 05:00 –ú–°–ö
                
                –í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç—ã:
                - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ç—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                
                –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –æ–∫–æ–ª–æ 2 —á–∞—Å–æ–≤. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-3600),
                visibility: .everyone,
                likes: [],
                comments: [],
                tags: ["#–≤–∞–∂–Ω–æ", "#–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
                mentions: [],
                metadata: ["type": "admin", "priority": "high"]
            )
        ]
    }
    
    /// Load HR posts
    func loadHRPosts() -> [FeedPost] {
        return [
            FeedPost(
                id: "hr-welcome",
                author: UserResponse(
                    id: "hr-team",
                    email: "hr@tsum.ru",
                    name: "HR –∫–æ–º–∞–Ω–¥–∞ –¶–£–ú",
                    role: .manager,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–æ–≤—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!
                
                –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:
                - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - iOS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
                - –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ - Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
                - –ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤ - DevOps –∏–Ω–∂–µ–Ω–µ—Ä
                
                –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏! üéâ
                
                –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ.
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-7200),
                visibility: .everyone,
                likes: ["user1", "user2", "user3", "user4"],
                comments: [],
                tags: ["#hr", "#–Ω–æ–≤—ã–µ—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "#–∫–æ–º–∞–Ω–¥–∞"],
                mentions: [],
                metadata: ["type": "hr"]
            )
        ]
    }
    
    /// Load user's assigned courses
    func loadMyCourses() -> [FeedPost] {
        guard let currentUser = MockAuthService.shared.currentUser else { return [] }
        
        return [
            FeedPost(
                id: "my-course-1",
                author: UserResponse(
                    id: "lms-system",
                    email: "system@tsum.ru",
                    name: "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è",
                    role: .admin,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                # üìñ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∫—É—Ä—Å
                
                **–ö—É—Ä—Å**: –û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                **–°—Ä–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è**: –¥–æ 30 –∏—é–ª—è 2025
                **–ü—Ä–æ–≥—Ä–µ—Å—Å**: 0%
                
                –ö—É—Ä—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-86400),
                visibility: .specific,
                likes: [],
                comments: [],
                tags: ["#–º–æ–π–∫—É—Ä—Å", "#–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"],
                mentions: [currentUser.id],
                metadata: ["type": "course_assignment", "courseId": "security-basics"]
            )
        ]
    }
    
    /// Load community posts from users
    func loadUserPosts() -> [FeedPost] {
        return [
            FeedPost(
                id: "user-post-1",
                author: UserResponse(
                    id: "user-ivan",
                    email: "ivan@tsum.ru",
                    name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                    role: .student,
                    isActive: true,
                    createdAt: Date()
                ),
                content: """
                –ö–æ–ª–ª–µ–≥–∏, –∫—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫—É—Ä—Å –ø–æ Kubernetes? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! 
                
                –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π.
                """,
                images: [],
                attachments: [],
                createdAt: Date().addingTimeInterval(-10800),
                visibility: .everyone,
                likes: ["user2", "user3"],
                comments: [
                    FeedComment(
                        id: "comment-1",
                        postId: "user-post-1",
                        author: UserResponse(
                            id: "user-maria",
                            email: "maria@tsum.ru",
                            name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                            role: .student,
                            isActive: true,
                            createdAt: Date()
                        ),
                        content: "–û—Ç–ª–∏—á–Ω—ã–π –∫—É—Ä—Å! –ú–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é",
                        createdAt: Date().addingTimeInterval(-7200),
                        likes: ["user-ivan"]
                    )
                ],
                tags: ["#–≤–æ–ø—Ä–æ—Å", "#kubernetes", "#–æ–±—É—á–µ–Ω–∏–µ"],
                mentions: [],
                metadata: ["type": "user_post"]
            )
        ]
    }
    
    /// Create a feed post from release notes
    private func createPostFromReleaseNotes(path: String, content: String) -> FeedPost? {
        // Extract version and build from filename
        let filename = URL(fileURLWithPath: path).lastPathComponent
        var version = "2.1.1"
        var build = "215"
        
        if let versionMatch = filename.range(of: #"v(\d+\.\d+\.\d+)"#, options: .regularExpression) {
            version = String(filename[versionMatch]).replacingOccurrences(of: "v", with: "")
        }
        
        if let buildMatch = filename.range(of: #"build(\d+)"#, options: .regularExpression) {
            build = String(filename[buildMatch]).replacingOccurrences(of: "build", with: "")
        }
        
        // Parse date from content
        var releaseDate = Date()
        if let dateMatch = content.range(of: #"–î–∞—Ç–∞[:\s]+(.+)"#, options: .regularExpression) {
            let dateString = String(content[dateMatch]).replacingOccurrences(of: "–î–∞—Ç–∞:", with: "").trimmingCharacters(in: .whitespacesAndNewlines)
            // Simple date parsing for "14 –∏—é–ª—è 2025" format
            if dateString.contains("–∏—é–ª—è 2025") {
                releaseDate = Calendar.current.date(from: DateComponents(year: 2025, month: 7, day: 14)) ?? Date()
            }
        }
        
        // Convert markdown to HTML-like format for better display
        let htmlContent = convertMarkdownToHTML(content)
        
        return FeedPost(
            id: "release-\(version)-\(build)",
            author: UserResponse(
                id: "dev-team",
                email: "dev@tsum.ru",
                name: "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ LMS",
                role: .admin,
                isActive: true,
                createdAt: Date()
            ),
            content: htmlContent,
            images: [],
            attachments: [],
            createdAt: releaseDate,
            visibility: .everyone,
            likes: [],
            comments: [],
            tags: ["#release", "#testflight", "#v\(version)", "#build\(build)"],
            mentions: [],
            metadata: [
                "type": "app_release",
                "contentType": "html",
                "version": version,
                "build": build,
                "source": "documentation"
            ]
        )
    }
    
    /// Create a feed post from sprint report
    private func createPostFromSprintReport(path: String, content: String) -> FeedPost? {
        let filename = URL(fileURLWithPath: path).lastPathComponent
        var sprintNumber = "52"
        
        if let sprintMatch = filename.range(of: #"SPRINT_(\d+)"#, options: .regularExpression) {
            sprintNumber = String(filename[sprintMatch]).replacingOccurrences(of: "SPRINT_", with: "")
        }
        
        // Parse sprint dates
        var sprintDate = Date()
        if let dateMatch = content.range(of: #"–î–∞—Ç—ã[:\s]+(.+)"#, options: .regularExpression) {
            let dateString = String(content[dateMatch])
            // Extract the start date from format like "20-24 –∏—é–ª—è 2025"
            if dateString.contains("–∏—é–ª—è 2025") {
                if let dayMatch = dateString.range(of: #"(\d+)"#, options: .regularExpression),
                   let day = Int(String(dateString[dayMatch])) {
                    sprintDate = Calendar.current.date(from: DateComponents(year: 2025, month: 7, day: day)) ?? Date()
                }
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞, –∞ –Ω–µ summary
        let htmlContent = convertMarkdownToHTML(content)
        
        return FeedPost(
            id: "sprint-\(sprintNumber)-report",
            author: UserResponse(
                id: "project-team",
                email: "team@tsum.ru",
                name: "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                role: .admin,
                isActive: true,
                createdAt: Date()
            ),
            content: htmlContent,
            images: [],
            attachments: [],
            createdAt: sprintDate,
            visibility: .everyone,
            likes: [],
            comments: [],
            tags: ["#sprint\(sprintNumber)", "#progress", "#development"],
            mentions: [],
            metadata: [
                "type": "sprint_report",
                "contentType": "html",
                "sprintNumber": sprintNumber,
                "source": "documentation"
            ]
        )
    }
    
    /// Create post from methodology update
    private func createPostFromMethodology(path: String, content: String) -> FeedPost? {
        let filename = URL(fileURLWithPath: path).lastPathComponent
        var version = "2.2.0"
        
        if let versionMatch = filename.range(of: #"v(\d+\.\d+\.\d+)"#, options: .regularExpression) {
            version = String(filename[versionMatch]).replacingOccurrences(of: "v", with: "")
        }
        
        let htmlContent = convertMarkdownToHTML(content)
        
        return FeedPost(
            id: "methodology-\(version)",
            author: UserResponse(
                id: "methodology-team",
                email: "methodology@tsum.ru",
                name: "–ö–æ–º–∞–Ω–¥–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏",
                role: .admin,
                isActive: true,
                createdAt: Date()
            ),
            content: htmlContent,
            images: [],
            attachments: [],
            createdAt: Date().addingTimeInterval(-Double.random(in: 86400...604800)),
            visibility: .everyone,
            likes: [],
            comments: [],
            tags: ["#methodology", "#update", "#v\(version)"],
            mentions: [],
            metadata: [
                "type": "methodology_update",
                "version": version
            ]
        )
    }
    
    /// Convert markdown to HTML for better display
    private func convertMarkdownToHTML(_ markdown: String) -> String {
        var html = markdown
        
        // Convert headers - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        let lines = html.components(separatedBy: "\n")
        html = lines.map { line in
            if line.hasPrefix("### ") {
                return "<h3>" + line.dropFirst(4) + "</h3>"
            } else if line.hasPrefix("## ") {
                return "<h2>" + line.dropFirst(3) + "</h2>"
            } else if line.hasPrefix("# ") {
                return "<h1>" + line.dropFirst(2) + "</h1>"
            }
            return line
        }.joined(separator: "\n")
        
        // Convert bold
        html = html.replacingOccurrences(of: #"\*\*(.+?)\*\*"#, with: "<strong>$1</strong>", options: .regularExpression)
        
        // Convert italic (but not bold)
        html = html.replacingOccurrences(of: #"(?<!\*)\*([^\*]+?)\*(?!\*)"#, with: "<em>$1</em>", options: .regularExpression)
        
        // Convert lists - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        let listLines = html.components(separatedBy: "\n")
        html = listLines.map { line in
            if line.hasPrefix("- ") {
                return "<li>" + line.dropFirst(2) + "</li>"
            } else if line.hasPrefix("* ") {
                return "<li>" + line.dropFirst(2) + "</li>"
            } else if let match = line.range(of: #"^\d+\. "#, options: .regularExpression) {
                return "<li>" + line[match.upperBound...] + "</li>"
            }
            return line
        }.joined(separator: "\n")
        
        // Convert code blocks
        html = html.replacingOccurrences(of: #"```(\w*)\n([\s\S]*?)```"#, with: "<pre><code>$2</code></pre>", options: .regularExpression)
        
        // Convert inline code
        html = html.replacingOccurrences(of: #"`(.+?)`"#, with: "<code>$1</code>", options: .regularExpression)
        
        // Convert links
        html = html.replacingOccurrences(of: #"\[(.+?)\]\((.+?)\)"#, with: "<a href=\"$2\">$1</a>", options: .regularExpression)
        
        // Wrap consecutive list items in ul/ol tags
        let listPattern = #"(<li>.*</li>\s*)+"#
        do {
            let regex = try NSRegularExpression(pattern: listPattern, options: [])
            let matches = regex.matches(in: html, options: [], range: NSRange(html.startIndex..., in: html))
            
            // Process matches in reverse order to not affect indices
            for match in matches.reversed() {
                if let range = Range(match.range, in: html) {
                    let listItems = String(html[range])
                    html.replaceSubrange(range, with: "<ul>\n\(listItems)</ul>")
                }
            }
        } catch {
            ComprehensiveLogger.shared.log(.data, .warning, "Failed to wrap lists: \(error)")
        }
        
        // Convert line breaks to paragraphs
        let paragraphs = html.components(separatedBy: "\n\n")
        html = paragraphs
            .filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }
            .map { paragraph in
                // Don't wrap headers, lists, or pre-formatted content in paragraphs
                if paragraph.contains("<h") || paragraph.contains("<ul>") || paragraph.contains("<ol>") || paragraph.contains("<pre>") {
                    return paragraph
                }
                return "<p>\(paragraph)</p>"
            }
            .joined(separator: "\n")
        
        // Wrap in div with styling
        return """
        <div style="font-family: -apple-system, system-ui; padding: 15px; line-height: 1.6; color: #333;">
        \(html)
        </div>
        <style>
        h1, h2, h3 { margin: 15px 0 10px 0; }
        h1 { font-size: 24px; font-weight: bold; }
        h2 { font-size: 20px; font-weight: bold; }
        h3 { font-size: 18px; font-weight: bold; }
        p { margin: 10px 0; }
        ul, ol { margin: 10px 0; padding-left: 20px; }
        li { margin: 5px 0; }
        code { background: #f4f4f4; padding: 2px 4px; border-radius: 3px; font-family: monospace; }
        pre { background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
        a { color: #007AFF; text-decoration: none; }
        strong { font-weight: 600; }
        em { font-style: italic; }
        </style>
        """
    }
    
    /// Extract sprint summary from report
    private func extractSprintSummary(from content: String) -> String {
        var summary = "# –û—Ç—á–µ—Ç –æ —Å–ø—Ä–∏–Ω—Ç–µ\n\n"
        
        // Try to extract key sections
        if let achievementsRange = content.range(of: "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", options: .caseInsensitive) {
            let startIndex = achievementsRange.upperBound
            if let endRange = content[startIndex...].range(of: "\n##") {
                let achievements = String(content[startIndex..<endRange.lowerBound])
                summary += "## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\(achievements)\n\n"
            }
        }
        
        // Extract metrics if available
        if let metricsRange = content.range(of: "–ú–µ—Ç—Ä–∏–∫–∏", options: .caseInsensitive) {
            let startIndex = metricsRange.upperBound
            if let endRange = content[startIndex...].range(of: "\n##") {
                let metrics = String(content[startIndex..<endRange.lowerBound])
                summary += "## üìä –ú–µ—Ç—Ä–∏–∫–∏\n\(metrics)\n\n"
            }
        }
        
        // Add a default message if extraction fails
        if summary.count < 100 {
            summary = """
            # –û—Ç—á–µ—Ç –æ —Å–ø—Ä–∏–Ω—Ç–µ
            
            ## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            - –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Clean Architecture
            - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
            - –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            
            ## üì± –ß—Ç–æ –Ω–æ–≤–æ–≥–æ
            - –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ Telegram
            - –ü–∞–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            
            –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ–ª–Ω–æ–º –æ—Ç—á–µ—Ç–µ —Å–ø—Ä–∏–Ω—Ç–∞.
            """
        }
        
        return convertMarkdownToHTML(summary)
    }
    
    private func formatDateForPost(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.dateFormat = "d MMMM yyyy"
        return formatter.string(from: date)
    }
} 
//
//  BuildReleaseNews.swift
//  LMS
//
//  –ú–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–∞—Ö
//

import Foundation

/// –ú–æ–¥–µ–ª—å –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–µ–ª–∏–∑–µ –±–∏–ª–¥–∞
struct BuildReleaseNews {
    let id: UUID
    let version: String
    let buildNumber: String
    let releaseDate: Date
    let mainChanges: [ChangeCategory]
    let testingFocus: [String]
    let knownIssues: [String]
    let technicalInfo: TechnicalInfo
    
    /// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    struct ChangeCategory {
        let title: String
        let icon: String
        let changes: [String]
    }
    
    /// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    struct TechnicalInfo {
        let minIOSVersion: String
        let recommendedIOSVersion: String
        let appSize: String
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ Release Notes
    static func fromReleaseNotes(
        version: String,
        buildNumber: String,
        releaseNotesContent: String
    ) -> BuildReleaseNews {
        // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ release notes
        let parser = ReleaseNotesParser()
        let parsedData = parser.parse(releaseNotesContent)
        
        return BuildReleaseNews(
            id: UUID(),
            version: version,
            buildNumber: buildNumber,
            releaseDate: Date(),
            mainChanges: parsedData.changes,
            testingFocus: parsedData.testingFocus,
            knownIssues: parsedData.knownIssues,
            technicalInfo: parsedData.technicalInfo
        )
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ FeedItem –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–µ–Ω—Ç–µ
    func toFeedItem() -> FeedItem {
        var content = """
        <div style="font-family: -apple-system, system-ui; padding: 10px;">
            <h1 style="font-size: 24px; margin-bottom: 15px;">
                üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è \(version) <span style="color: #666; font-size: 18px;">(Build \(buildNumber))</span>
            </h1>
        """
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for category in mainChanges {
            content += """
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                    \(category.icon) \(category.title)
                </h2>
                <ul style="margin: 0; padding-left: 20px;">
            """
            
            for change in category.changes {
                content += """
                    <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">\(change)</li>
                """
            }
            
            content += """
                </ul>
            </div>
            """
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–∫—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if !testingFocus.isEmpty {
            content += """
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #333; margin-bottom: 10px;">
                    üîç –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                </h2>
                <ul style="margin: 0; padding-left: 20px;">
            """
            
            for focus in testingFocus {
                content += """
                    <li style="margin-bottom: 5px; color: #555; line-height: 1.5;">\(focus)</li>
                """
            }
            
            content += """
                </ul>
            </div>
            """
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if !knownIssues.isEmpty {
            content += """
            
            <div style="margin-top: 20px;">
                <h2 style="font-size: 20px; color: #FF6B6B; margin-bottom: 10px;">
                    ‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                </h2>
                <ul style="margin: 0; padding-left: 20px;">
            """
            
            for issue in knownIssues {
                content += """
                    <li style="margin-bottom: 5px; color: #FF6B6B; line-height: 1.5;">\(issue)</li>
                """
            }
            
            content += """
                </ul>
            </div>
            """
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        content += """
        
        <div style="margin-top: 25px; padding: 15px; background-color: #f5f5f5; border-radius: 8px;">
            <h3 style="font-size: 16px; color: #666; margin-bottom: 8px;">üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <p style="margin: 3px 0; color: #888; font-size: 14px;">
                –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è iOS: \(technicalInfo.minIOSVersion)<br>
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è iOS: \(technicalInfo.recommendedIOSVersion)<br>
                –†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(technicalInfo.appSize)
            </p>
        </div>
        
        </div>
        """
        
        return FeedItem(
            id: id,
            type: .announcement,
            title: "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è \(version)",
            content: content,
            author: "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            publishedAt: releaseDate,
            imageURL: nil,
            tags: ["release", "update", "testflight"],
            priority: .high,
            metadata: [
                "version": version,
                "build": buildNumber,
                "type": "app_release",
                "contentType": "html"
            ]
        )
    }
}

/// –ü–∞—Ä—Å–µ—Ä Release Notes
class ReleaseNotesParser {
    struct ParsedData {
        let changes: [BuildReleaseNews.ChangeCategory]
        let testingFocus: [String]
        let knownIssues: [String]
        let technicalInfo: BuildReleaseNews.TechnicalInfo
    }
    
    func parse(_ content: String) -> ParsedData {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è markdown —Ñ–æ—Ä–º–∞—Ç–∞
        let lines = content.components(separatedBy: .newlines)
        var changes: [BuildReleaseNews.ChangeCategory] = []
        var testingFocus: [String] = []
        var knownIssues: [String] = []
        var currentSection = ""
        var currentCategory: BuildReleaseNews.ChangeCategory?
        var currentChanges: [String] = []
        
        for line in lines {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
            if line.hasPrefix("### ") {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if let category = currentCategory {
                    changes.append(BuildReleaseNews.ChangeCategory(
                        title: category.title,
                        icon: category.icon,
                        changes: currentChanges
                    ))
                }
                
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                let title = line.replacingOccurrences(of: "### ", with: "")
                let icon = extractIcon(from: title)
                currentCategory = BuildReleaseNews.ChangeCategory(
                    title: title.replacingOccurrences(of: icon + " ", with: ""),
                    icon: icon,
                    changes: []
                )
                currentChanges = []
            } else if line.hasPrefix("## ") {
                currentSection = line.replacingOccurrences(of: "## ", with: "")
            } else if line.hasPrefix("- ") || line.hasPrefix("‚Ä¢ ") {
                let item = line
                    .replacingOccurrences(of: "- ", with: "")
                    .replacingOccurrences(of: "‚Ä¢ ", with: "")
                    .trimmingCharacters(in: .whitespaces)
                
                if currentSection.contains("—Ç–µ—Å—Ç–∏—Ä") || currentSection.contains("–ø—Ä–æ–≤–µ—Ä") {
                    testingFocus.append(item)
                } else if currentSection.contains("–ø—Ä–æ–±–ª–µ–º") || currentSection.contains("issue") {
                    knownIssues.append(item)
                } else if currentCategory != nil {
                    currentChanges.append(item)
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if let category = currentCategory {
            changes.append(BuildReleaseNews.ChangeCategory(
                title: category.title,
                icon: category.icon,
                changes: currentChanges
            ))
        }
        
        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥)
        let technicalInfo = BuildReleaseNews.TechnicalInfo(
            minIOSVersion: "17.0",
            recommendedIOSVersion: "18.5",
            appSize: "~45 MB"
        )
        
        return ParsedData(
            changes: changes,
            testingFocus: testingFocus,
            knownIssues: knownIssues,
            technicalInfo: technicalInfo
        )
    }
    
    private func extractIcon(from title: String) -> String {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        let emojis = ["‚úÖ", "üîß", "üì±", "üêõ", "üìä", "üîç", "üéØ", "‚ö†Ô∏è", "üöÄ"]
        for emoji in emojis {
            if title.hasPrefix(emoji) {
                return emoji
            }
        }
        return "üìå"
    }
} 
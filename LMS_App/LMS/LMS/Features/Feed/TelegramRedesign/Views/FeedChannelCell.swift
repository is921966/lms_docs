//
//  FeedChannelCell.swift
//  LMS
//
//  Sprint 50 - –Ø—á–µ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å—Ç–∏–ª–µ Telegram
//

import SwiftUI

/// –Ø—á–µ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π
struct FeedChannelCell: View {
    let channel: FeedChannel
    @Environment(\.colorScheme) var colorScheme
    
    private var textColor: Color {
        colorScheme == .dark ? .white : .black
    }
    
    private var secondaryColor: Color {
        Color(UIColor.systemGray)
    }
    
    private var timeFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        return formatter
    }
    
    var body: some View {
        HStack(spacing: 12) {
            // Avatar
            ChannelAvatar(avatarType: channel.avatarType)
            
            // Content
            VStack(alignment: .leading, spacing: 4) {
                // Header: Name and Time
                HStack(alignment: .top) {
                    HStack(spacing: 6) {
                        if channel.isPinned {
                            Image(systemName: "pin.fill")
                                .font(.system(size: 12))
                                .foregroundColor(secondaryColor)
                        }
                        
                        Text(channel.name)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(textColor)
                            .lineLimit(1)
                        
                        if channel.isMuted {
                            Image(systemName: "speaker.slash.fill")
                                .font(.system(size: 12))
                                .foregroundColor(secondaryColor)
                        }
                    }
                    
                    Spacer()
                    
                    Text(timeFormatter.string(from: channel.lastMessage.timestamp))
                        .font(.system(size: 14))
                        .foregroundColor(secondaryColor)
                }
                
                // Message and Badge
                HStack(alignment: .center) {
                    Text(channel.lastMessage.text)
                        .font(.system(size: 15))
                        .foregroundColor(channel.lastMessage.isRead ? secondaryColor : textColor)
                        .lineLimit(1)
                    
                    Spacer()
                    
                    if channel.hasUnread && !channel.isMuted {
                        UnreadBadge(count: channel.unreadCount)
                    }
                }
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .contentShape(Rectangle())
    }
}

// MARK: - Previews

struct FeedChannelCell_Previews: PreviewProvider {
    static var previews: some View {
        VStack(spacing: 0) {
            // Pinned channel with unread
            FeedChannelCell(channel: FeedChannel(
                id: UUID(),
                name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –¶–£–ú",
                avatarType: .text("–ê", .red),
                lastMessage: FeedMessage(
                    id: UUID(),
                    text: "üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã...",
                    timestamp: Date(),
                    author: "Admin",
                    isRead: false
                ),
                unreadCount: 1,
                category: .announcement,
                priority: .critical,
                isPinned: true
            ))
            
            Divider()
                .padding(.leading, 76)
            
            // Learning channel
            FeedChannelCell(channel: FeedChannel(
                id: UUID(),
                name: "–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
                avatarType: .icon("book.fill", .blue),
                lastMessage: FeedMessage(
                    id: UUID(),
                    text: "–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å Swift",
                    timestamp: Date().addingTimeInterval(-3600),
                    author: "Learning",
                    isRead: false
                ),
                unreadCount: 518,
                category: .learning,
                priority: .normal
            ))
            
            Divider()
                .padding(.leading, 76)
            
            // Muted HR Department
            FeedChannelCell(channel: FeedChannel(
                id: UUID(),
                name: "HR –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç",
                avatarType: .text("HR", .green),
                lastMessage: FeedMessage(
                    id: UUID(),
                    text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫",
                    timestamp: Date().addingTimeInterval(-7200),
                    author: "HR",
                    isRead: true
                ),
                unreadCount: 5,
                category: .department,
                priority: .normal,
                isMuted: true
            ))
            
            Divider()
                .padding(.leading, 76)
            
            // IT channel with important message
            FeedChannelCell(channel: FeedChannel(
                id: UUID(),
                name: "IT –ù–æ–≤–æ—Å—Ç–∏",
                avatarType: .icon("desktopcomputer", .purple),
                lastMessage: FeedMessage(
                    id: UUID(),
                    text: "üöÄ –í—ã–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LMS 2.0",
                    timestamp: Date().addingTimeInterval(-86400),
                    author: "IT",
                    isRead: false
                ),
                unreadCount: 1,
                category: .event,
                priority: .high
            ))
        }
        .background(Color(UIColor.systemBackground))
        .previewLayout(.sizeThatFits)
    }
} 
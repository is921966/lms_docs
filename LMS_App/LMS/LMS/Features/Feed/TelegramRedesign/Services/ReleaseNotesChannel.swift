import Foundation
import SwiftUI

struct ReleaseNotesChannel {
    static func createChannel() -> FeedChannel {
        let releases = loadReleaseNotes()
        let lastRelease = releases.first
        
        return FeedChannel(
            id: UUID(uuidString: "D47F3C4B-9F8E-4A5C-B623-7E8F9A1B2C3D")!,
            name: "üì± Release Notes",
            avatarType: .icon("app.badge", .indigo),
            lastMessage: FeedMessage(
                id: UUID(),
                text: lastRelease?.summary ?? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤",
                timestamp: lastRelease?.date ?? Date(),
                author: "Release Bot",
                isRead: false
            ),
            unreadCount: min(releases.count, 3),
            category: .announcement,
            priority: .high,
            isPinned: true
        )
    }
    
    private static func loadReleaseNotes() -> [ReleaseNote] {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        let releaseFiles = [
            "TESTFLIGHT_RELEASE_v2.1.1_build206.md",
            "TESTFLIGHT_RELEASE_v1.43.0.md",
            "TESTFLIGHT_BUILD_204_MENU_STRUCTURE.md"
        ]
        
        var notes: [ReleaseNote] = []
        
        for file in releaseFiles {
            if let content = loadFileContent(path: "docs/releases/\(file)") {
                if let note = parseReleaseNote(content: content, filename: file) {
                    notes.append(note)
                }
            }
        }
        
        return notes.sorted { $0.date > $1.date }
    }
    
    private static func loadFileContent(path: String) -> String? {
        // –í production —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ bundle
        // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
        let mockContent = """
        # TestFlight Release v2.1.1 (Build 206)
        
        ## –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞
        13 –∏—é–ª—è 2025
        
        ## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ
        - ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Cmi5 –∫—É—Ä—Å–æ–≤
        - ‚úÖ –ò–º–ø–æ—Ä—Ç CATAPULT –∫—É—Ä—Å–æ–≤
        - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        - ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        ## –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        - üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–µ–Ω—é "–ï—â—ë"
        - üêõ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–æ–≤
        """
        return mockContent
    }
    
    private static func parseReleaseNote(content: String, filename: String) -> ReleaseNote? {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è markdown
        let lines = content.split(separator: "\n")
        var version = ""
        var date = Date()
        var summary = ""
        
        for line in lines {
            if line.hasPrefix("# ") {
                version = String(line.dropFirst(2))
            } else if line.contains("–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞") {
                // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞" —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
                if let index = lines.firstIndex(of: line),
                   index + 1 < lines.count {
                    let dateString = String(lines[index + 1])
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    date = parseDate(dateString) ?? Date()
                }
            } else if line.contains("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ") {
                // –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤
                if let index = lines.firstIndex(of: line) {
                    var items: [String] = []
                    for i in (index + 1)..<min(index + 4, lines.count) {
                        let item = String(lines[i]).trimmingCharacters(in: .whitespaces)
                        if item.hasPrefix("-") {
                            items.append(item)
                        }
                    }
                    summary = items.joined(separator: " ")
                }
            }
        }
        
        if !version.isEmpty {
            return ReleaseNote(
                version: version,
                date: date,
                summary: summary.isEmpty ? "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞" : summary
            )
        }
        
        return nil
    }
    
    private static func parseDate(_ dateString: String) -> Date? {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.dateFormat = "d MMMM yyyy"
        return formatter.date(from: dateString.trimmingCharacters(in: .whitespaces))
    }
    
    struct ReleaseNote {
        let version: String
        let date: Date
        let summary: String
    }
} 
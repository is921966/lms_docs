import Foundation
import Combine
import SwiftUI

/// Mock implementation of TelegramFeedServiceProtocol for development
class MockTelegramFeedService: TelegramFeedServiceProtocol {
    static let shared = MockTelegramFeedService()
    
    private var channels: [FeedChannel] = []
    private let updateSubject = PassthroughSubject<FeedChannel, Never>()
    
    private init() {
        setupMockData()
        ComprehensiveLogger.shared.log(.data, .info, "MockTelegramFeedService initialized", details: [
            "channelsCount": channels.count
        ])
    }
    
    // Helper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FeedMessage
    private func createMessage(_ text: String, timestamp: Date, author: String = "System", isRead: Bool = false) -> FeedMessage {
        FeedMessage(
            id: UUID(),
            text: text,
            timestamp: timestamp,
            author: author,
            isRead: isRead
        )
    }
    
    func loadChannels() async throws -> [FeedChannel] {
        ComprehensiveLogger.shared.log(.network, .info, "Loading channels started", details: [
            "currentCount": channels.count,
            "isAsync": true
        ])
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        try await Task.sleep(nanoseconds: 500_000_000)
        
        ComprehensiveLogger.shared.log(.network, .info, "Channels loaded successfully", details: [
            "count": channels.count,
            "categories": Set(channels.map { $0.category.rawValue }).joined(separator: ", "),
            "pinnedCount": channels.filter { $0.isPinned }.count,
            "unreadTotal": channels.reduce(0) { $0 + $1.unreadCount }
        ])
        
        // Log each channel for debugging
        for (index, channel) in channels.enumerated() {
            ComprehensiveLogger.shared.log(.data, .debug, "Channel \(index)", details: [
                "name": channel.name,
                "category": channel.category.rawValue,
                "unreadCount": channel.unreadCount,
                "isPinned": channel.isPinned,
                "lastMessagePreview": String(channel.lastMessage.text.prefix(50))
            ])
        }
        
        return channels
    }
    
    func markAsRead(channelId: UUID) async throws {
        if let index = channels.firstIndex(where: { $0.id == channelId }) {
            channels[index].unreadCount = 0
            channels[index].lastMessage.isRead = true
        }
    }
    
    func updateNotificationSettings(channelId: UUID, enabled: Bool) async throws {
        // Simulate update
        try await Task.sleep(nanoseconds: 200_000_000)
    }
    
    func getUpdatesPublisher() -> AnyPublisher<FeedChannel, Never> {
        updateSubject.eraseToAnyPublisher()
    }
    
    private func setupMockData() {
        let now = Date()
        
        channels = [
            // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            FeedChannel(
                id: UUID(),
                name: "üö® –í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                avatarType: .icon("exclamationmark.triangle.fill", .red),
                lastMessage: createMessage(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—é",
                    timestamp: now.addingTimeInterval(-300),
                    author: "Security Team"
                ),
                unreadCount: 1,
                category: .announcement,
                priority: .critical,
                isPinned: true
            ),
            
            // –û–±—É—á–µ–Ω–∏–µ
            FeedChannel(
                id: UUID(),
                name: "üìö –ê–∫–∞–¥–µ–º–∏—è –¶–£–ú",
                avatarType: .icon("book.fill", .blue),
                lastMessage: createMessage(
                    "–ù–æ–≤—ã–π –∫—É—Ä—Å: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏",
                    timestamp: now.addingTimeInterval(-3600),
                    author: "Learning Team"
                ),
                unreadCount: 3,
                category: .learning,
                priority: .high
            ),
            
            FeedChannel(
                id: UUID(), 
                name: "üéØ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                avatarType: .icon("target", .orange),
                lastMessage: createMessage(
                    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ –∫—É—Ä—Å—É 'Compliance 2024'",
                    timestamp: now.addingTimeInterval(-7200),
                    author: "Learning Platform"
                ),
                unreadCount: 1,
                category: .learning,
                priority: .critical
            ),
            
            // –°–æ–±—ã—Ç–∏—è
            FeedChannel(
                id: UUID(),
                name: "üéâ –°–æ–±—ã—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏",
                avatarType: .icon("party.popper.fill", .purple),
                lastMessage: createMessage(
                    "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –ª–µ—Ç–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 15 –∏—é–ª—è! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞",
                    timestamp: now.addingTimeInterval(-86400),
                    author: "Event Team"
                ),
                unreadCount: 2,
                category: .event,
                priority: .normal
            ),
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            FeedChannel(
                id: UUID(),
                name: "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                avatarType: .icon("trophy.fill", .yellow),
                lastMessage: createMessage(
                    "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 'iOS Developer Professional'",
                    timestamp: now.addingTimeInterval(-10800),
                    author: "Achievement Bot"
                ),
                unreadCount: 5,
                category: .achievement,
                priority: .normal
            ),
            
            // –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
            FeedChannel(
                id: UUID(),
                name: "üíº HR –æ—Ç–¥–µ–ª",
                avatarType: .text("HR", .green),
                lastMessage: createMessage(
                    "–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤ –Ω–∞ –∞–≤–≥—É—Å—Ç: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞—Ç—ã",
                    timestamp: now.addingTimeInterval(-14400),
                    author: "HR Department"
                ),
                unreadCount: 0,
                category: .department,
                priority: .normal
            ),
            
            FeedChannel(
                id: UUID(),
                name: "üõ† IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                avatarType: .icon("wrench.and.screwdriver.fill", .gray),
                lastMessage: createMessage(
                    "–ü–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã 16.07: –≤–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–±–æ–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ CRM",
                    timestamp: now.addingTimeInterval(-21600),
                    author: "IT Support",
                    isRead: true
                ),
                unreadCount: 0,
                category: .department,
                priority: .normal
            ),
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            ReleaseNotesChannel.createChannel(),
            SprintReportsChannel.createChannel(),
            MethodologyChannel.createChannel()
        ]
    }
    
    private func simulateUpdates() {
        // Simulate new messages arriving
        Timer.scheduledTimer(withTimeInterval: 30, repeats: true) { [weak self] _ in
            guard let self = self,
                  !self.channels.isEmpty else { return }
            
            let randomIndex = Int.random(in: 0..<self.channels.count)
            var channel = self.channels[randomIndex]
            
            // Update channel with new message
            let newMessage = self.generateRandomMessage(for: channel.category)
            
            channel = FeedChannel(
                id: channel.id,
                name: channel.name,
                avatarType: channel.avatarType,
                lastMessage: self.createMessage(newMessage, timestamp: Date(), author: "Update System"),
                unreadCount: channel.unreadCount + 1,
                category: channel.category,
                priority: channel.priority
            )
            
            self.channels[randomIndex] = channel
            self.updateSubject.send(channel)
        }
    }
    
    private func generateRandomMessage(for category: NewsCategory) -> String {
        switch category {
        case .announcement:
            return ["–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", "–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"].randomElement()!
        case .learning:
            return ["–ù–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω", "–ù–∞—á–∞–ª–æ –∫—É—Ä—Å–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≥–æ—Ç–æ–≤—ã", "–í–µ–±–∏–Ω–∞—Ä —Å–µ–≥–æ–¥–Ω—è –≤ 15:00"].randomElement()!
        case .achievement:
            return ["–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!", "–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø—Ä–æ–¥–∞–∂", "–õ—É—á—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–µ—Å—è—Ü–∞", "–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"].randomElement()!
        case .event:
            return ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Å–æ–±—ã—Ç–∏—è", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"].randomElement()!
        case .department:
            return ["–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞", "–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ", "–í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã –≤ 16:00"].randomElement()!
        }
    }
} 
//
//  FeedChannel.swift
//  LMS
//
//  –ú–æ–¥–µ–ª—å –∫–∞–Ω–∞–ª–∞ –¥–ª—è Telegram-style feed
//

import Foundation
import SwiftUI

/// –¢–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤
enum ChannelType: String, CaseIterable {
    case releases = "releases"          // –†–µ–ª–∏–∑–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    case sprints = "sprints"           // –û—Ç—á–µ—Ç—ã –æ —Å–ø—Ä–∏–Ω—Ç–∞—Ö  
    case methodology = "methodology"    // –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
    case courses = "courses"           // –ù–æ–≤–æ—Å—Ç–∏ –æ –∫—É—Ä—Å–∞—Ö
    case admin = "admin"               // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
    case hr = "hr"                     // HR –Ω–æ–≤–æ—Å—Ç–∏
    case myCourses = "my_courses"      // –ú–æ–∏ –∫—É—Ä—Å—ã
    case userPosts = "user_posts"      // –ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    var name: String {
        switch self {
        case .releases: return "üì± –†–µ–ª–∏–∑—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        case .sprints: return "üöÄ –°–ø—Ä–∏–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        case .methodology: return "üìö –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è"
        case .courses: return "üéì –ù–æ–≤—ã–µ –∫—É—Ä—Å—ã"
        case .admin: return "üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
        case .hr: return "üë• HR –∏ –∫–æ–º–∞–Ω–¥–∞"
        case .myCourses: return "üìñ –ú–æ–∏ –∫—É—Ä—Å—ã"
        case .userPosts: return "üí¨ –°–æ–æ–±—â–µ—Å—Ç–≤–æ"
        }
    }
    
    var icon: String {
        switch self {
        case .releases: return "app.badge"
        case .sprints: return "chart.line.uptrend.xyaxis"
        case .methodology: return "book.closed"
        case .courses: return "graduationcap"
        case .admin: return "shield"
        case .hr: return "person.3"
        case .myCourses: return "books.vertical"
        case .userPosts: return "bubble.left.and.bubble.right"
        }
    }
    
    var color: Color {
        switch self {
        case .releases: return .blue
        case .sprints: return .green
        case .methodology: return .purple
        case .courses: return .orange
        case .admin: return .red
        case .hr: return .teal
        case .myCourses: return .indigo
        case .userPosts: return .pink
        }
    }
    
    var sourcePattern: String? {
        switch self {
        case .releases: return "docs/releases/"
        case .sprints: return "reports/sprints/"
        case .methodology: return "methodology/"
        default: return nil
        }
    }
}

/// –ú–æ–¥–µ–ª—å –∫–∞–Ω–∞–ª–∞ –ª–µ–Ω—Ç—ã
struct FeedChannel: Identifiable, Equatable {
    let id: String
    let type: ChannelType
    let name: String
    let avatar: FeedChannelAvatar
    let description: String
    let lastMessage: FeedMessage
    let unreadCount: Int
    let isPinned: Bool
    let isMuted: Bool
    let members: Int
    let isVerified: Bool
    let customData: [String: Any]?
    
    init(
        id: String = UUID().uuidString,
        type: ChannelType,
        name: String? = nil,
        avatar: FeedChannelAvatar? = nil,
        description: String = "",
        lastMessage: FeedMessage,
        unreadCount: Int = 0,
        isPinned: Bool = false,
        isMuted: Bool = false,
        members: Int = 0,
        isVerified: Bool = false,
        customData: [String: Any]? = nil
    ) {
        self.id = id
        self.type = type
        self.name = name ?? type.name
        self.avatar = avatar ?? FeedChannelAvatar(
            type: .icon(type.icon),
            backgroundColor: type.color
        )
        self.description = description
        self.lastMessage = lastMessage
        self.unreadCount = unreadCount
        self.isPinned = isPinned
        self.isMuted = isMuted
        self.members = members
        self.isVerified = isVerified
        self.customData = customData
    }
    
    static func == (lhs: FeedChannel, rhs: FeedChannel) -> Bool {
        lhs.id == rhs.id
    }
    
    var hasUnread: Bool {
        return unreadCount > 0
    }
}

/// –ê–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞
struct FeedChannelAvatar: Equatable {
    enum AvatarType: Equatable {
        case image(String)
        case icon(String)
        case text(String)
    }
    
    let type: AvatarType
    let backgroundColor: Color
    
    static func == (lhs: FeedChannelAvatar, rhs: FeedChannelAvatar) -> Bool {
        lhs.type == rhs.type && lhs.backgroundColor == rhs.backgroundColor
    }
}

/// –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
struct FeedMessage: Identifiable, Equatable {
    let id: String
    let content: String
    let author: String
    let date: Date
    let isRead: Bool
    
    init(
        id: String = UUID().uuidString,
        content: String,
        author: String,
        date: Date = Date(),
        isRead: Bool = false
    ) {
        self.id = id
        self.content = content
        self.author = author
        self.date = date
        self.isRead = isRead
    }
    
    static func == (lhs: FeedMessage, rhs: FeedMessage) -> Bool {
        lhs.id == rhs.id
    }
    
    var timestamp: Date {
        return date
    }
}

/// –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
enum FeedFilter: String, CaseIterable {
    case all = "all"
    case unread = "unread"
    case personal = "personal"
    case channels = "channels"
    case groups = "groups"
    case bots = "bots"
    
    var title: String {
        switch self {
        case .all: return "–í—Å–µ"
        case .unread: return "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
        case .personal: return "–õ–∏—á–Ω—ã–µ"
        case .channels: return "–ö–∞–Ω–∞–ª—ã"
        case .groups: return "–ì—Ä—É–ø–ø—ã"
        case .bots: return "–ë–æ—Ç—ã"
        }
    }
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–æ—Å—Ç–æ–≤
extension FeedChannel {
    static func fromPosts(_ posts: [FeedPost], type: ChannelType) -> FeedChannel? {
        guard let lastPost = posts.first else { return nil }
        
        let unreadCount = posts.filter { post in
            // –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            Date().timeIntervalSince(post.createdAt) < 86400
        }.count
        
        let lastMessage = FeedMessage(
            content: lastPost.content.prefix(100) + "...",
            author: lastPost.author.name,
            date: lastPost.createdAt,
            isRead: unreadCount == 0
        )
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ç–∏–ø–µ –∫–∞–Ω–∞–ª–∞
        let channelId = "channel-\(type.rawValue)"
        
        return FeedChannel(
            id: channelId,
            type: type,
            description: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            lastMessage: lastMessage,
            unreadCount: unreadCount,
            isPinned: type == .releases || type == .admin,
            members: posts.map { $0.author.id }.unique().count,
            isVerified: true
        )
    }
}

// Helper extension for unique array elements
extension Array where Element: Hashable {
    func unique() -> [Element] {
        var seen = Set<Element>()
        return filter { seen.insert($0).inserted }
    }
}

// Standard channel instances
extension FeedChannel {
    static let releasesChannel = FeedChannel(
        id: "channel-releases",
        type: .releases,
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isPinned: true,
        isVerified: true
    )
    
    static let sprintsChannel = FeedChannel(
        id: "channel-sprints",
        type: .sprints,
        description: "–û—Ç—á–µ—Ç—ã –æ —Ö–æ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
    
    static let methodologyChannel = FeedChannel(
        id: "channel-methodology",
        type: .methodology,
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
    
    static let coursesChannel = FeedChannel(
        id: "channel-courses",
        type: .courses,
        description: "–ù–æ–≤—ã–µ –∫—É—Ä—Å—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
    
    static let adminChannel = FeedChannel(
        id: "channel-admin",
        type: .admin,
        description: "–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isPinned: true,
        isVerified: true
    )
    
    static let hrChannel = FeedChannel(
        id: "channel-hr",
        type: .hr,
        description: "–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç HR –æ—Ç–¥–µ–ª–∞",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
    
    static let myCoursesChannel = FeedChannel(
        id: "channel-my_courses",
        type: .myCourses,
        description: "–í–∞—à–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
    
    static let userPostsChannel = FeedChannel(
        id: "channel-user_posts",
        type: .userPosts,
        description: "–û–±—Å—É–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
        lastMessage: FeedMessage(content: "–ó–∞–≥—Ä—É–∑–∫–∞...", author: "–°–∏—Å—Ç–µ–º–∞", date: Date()),
        isVerified: true
    )
} 
import SwiftUI

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Feature Registry
class FeatureRegistryManager: ObservableObject {
    static let shared = FeatureRegistryManager()

    @Published var lastUpdate = Date()

    private init() {}

    /// –û–±–Ω–æ–≤–∏—Ç—å UI –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è feature flags
    func refresh() {
        DispatchQueue.main.async {
            self.lastUpdate = Date()
        }
    }

    /// –í–∫–ª—é—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
    func enableReadyModules() {
        Feature.enableReadyModules()
        refresh()
        print("üîÑ FeatureRegistry –æ–±–Ω–æ–≤–ª–µ–Ω - UI –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    }
}

/// –ï–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
enum Feature: String, CaseIterable {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (–≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    case auth = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    case users = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    case courses = "–ö—É—Ä—Å—ã"
    case profile = "–ü—Ä–æ—Ñ–∏–ª—å"
    case settings = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    case tests = "–¢–µ—Å—Ç—ã"
    case analytics = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    case onboarding = "–û–Ω–±–æ—Ä–¥–∏–Ω–≥"

    // –ì–æ—Ç–æ–≤—ã–µ –Ω–æ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    case competencies = "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"
    case positions = "–î–æ–ª–∂–Ω–æ—Å—Ç–∏"
    case feed = "–ù–æ–≤–æ—Å—Ç–∏"

    // –ë—É–¥—É—â–∏–µ –º–æ–¥—É–ª–∏
    case certificates = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    case gamification = "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è"
    case notifications = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
    var isEnabled: Bool {
        switch self {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã
        case .auth, .users, .courses, .profile, .settings, .tests, .analytics:
            return true

        // –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        case .onboarding:
            return true

        // Feature flags –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        default:
            return UserDefaults.standard.bool(forKey: "feature_\(self.rawValue)")
        }
    }

    /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∞–±–æ–≤
    var icon: String {
        switch self {
        case .auth: return "person.circle"
        case .users: return "person.2"
        case .courses: return "book"
        case .profile: return "person"
        case .settings: return "gear"
        case .tests: return "checkmark.circle"
        case .analytics: return "chart.bar"
        case .onboarding: return "star"
        case .competencies: return "lightbulb"
        case .positions: return "briefcase"
        case .feed: return "newspaper"
        case .certificates: return "rosette"
        case .gamification: return "gamecontroller"
        case .notifications: return "bell"
        }
    }

    /// View –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
    @ViewBuilder
    var view: some View {
        switch self {
        case .auth:
            LoginView()
        case .users:
            AdminManagementView()
        case .courses:
            CourseListView()
        case .profile:
            ProfileView()
        case .settings:
            SettingsView()
        case .tests:
            TestListView()
        case .analytics:
            AnalyticsDashboard()
        case .onboarding:
            MyOnboardingProgramsView()
        case .competencies:
            // Wrapper view –¥–ª—è CompetencyListView —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å environment object
            CompetencyListWrapper()
        case .positions:
            // Wrapper view –¥–ª—è PositionListView —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å environment object
            PositionListWrapper()
        case .feed:
            // Wrapper view –¥–ª—è FeedView —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å environment object
            FeedWrapper()
        case .certificates:
            PlaceholderView(title: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", icon: "rosette")
        case .gamification:
            PlaceholderView(title: "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è", icon: "gamecontroller")
        case .notifications:
            PlaceholderView(title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", icon: "bell")
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–∞—Ö
    var shouldShowInTabs: Bool {
        switch self {
        case .auth:
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–∞–±–∞—Ö
            return false
        case .profile, .settings:
            // –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω —Ç–∞–±
            return false
        default:
            return isEnabled
        }
    }
}

// MARK: - Wrapper Views –¥–ª—è –º–æ–¥—É–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö @EnvironmentObject

/// Wrapper –¥–ª—è CompetencyListView
struct CompetencyListWrapper: View {
    @EnvironmentObject var authViewModel: AuthViewModel

    var body: some View {
        CompetencyListView()
            .environmentObject(authViewModel)
    }
}

/// Wrapper –¥–ª—è PositionListView  
struct PositionListWrapper: View {
    @EnvironmentObject var authViewModel: AuthViewModel

    var body: some View {
        PositionListView()
            .environmentObject(authViewModel)
    }
}

/// Wrapper –¥–ª—è FeedView
struct FeedWrapper: View {
    @EnvironmentObject var authViewModel: AuthViewModel

    var body: some View {
        FeedView()
            .environmentObject(authViewModel)
    }
}

/// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–æ–¥—É–ª–µ–π
struct PlaceholderView: View {
    let title: String
    let icon: String

    var body: some View {
        NavigationStack {
            VStack(spacing: 20) {
                Image(systemName: icon)
                    .font(.system(size: 80))
                    .foregroundColor(.secondary)

                Text("–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    .font(.title2)
                    .foregroundColor(.secondary)

                Text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)

                Spacer()
            }
            .padding(.top, 50)
            .navigationTitle(title)
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è feature flags
extension Feature {
    /// –í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
    static func enable(_ feature: Feature) {
        UserDefaults.standard.set(true, forKey: "feature_\(feature.rawValue)")
    }

    /// –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
    static func disable(_ feature: Feature) {
        UserDefaults.standard.set(false, forKey: "feature_\(feature.rawValue)")
    }

    /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
    func toggle() {
        if isEnabled {
            Feature.disable(self)
        } else {
            Feature.enable(self)
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–∞–±–æ–≤
    static var enabledTabFeatures: [Feature] {
        allCases.filter { $0.shouldShowInTabs }
    }

    /// –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    static func enableReadyModules() {
        // –í–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –Ω–æ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã
        Feature.enable(.competencies)
        Feature.enable(.positions)
        Feature.enable(.feed)

        print("‚úÖ –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã:")
        print("  - –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏")
        print("  - –î–æ–ª–∂–Ω–æ—Å—Ç–∏")
        print("  - –ù–æ–≤–æ—Å—Ç–∏")

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        FeatureRegistryManager.shared.refresh()
        print("üîÑ UI —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö Feature Registry")
    }

    /// –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    static func disableExtraModules() {
        Feature.disable(.competencies)
        Feature.disable(.positions)
        Feature.disable(.feed)
        Feature.disable(.certificates)
        Feature.disable(.gamification)
        Feature.disable(.notifications)

        print("‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã")
    }
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
struct FeatureToggleSettings: View {
    @State private var features = Feature.allCases

    var body: some View {
        List {
            Section("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏") {
                ForEach(features, id: \.self) { feature in
                    if feature != .auth {
                        Toggle(isOn: Binding(
                            get: { feature.isEnabled },
                            set: { _ in feature.toggle() }
                        )) {
                            Label(feature.rawValue, systemImage: feature.icon)
                        }
                        .disabled(feature.shouldShowInTabs && feature.isEnabled)
                    }
                }
            }
            .listRowBackground(Color(.systemGray6))
        }
        .navigationTitle("Feature Flags")
        .navigationBarTitleDisplayMode(.inline)
    }
}

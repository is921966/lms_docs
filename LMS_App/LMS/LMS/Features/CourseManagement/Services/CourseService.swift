import Foundation

protocol CourseServiceProtocol {
    func fetchCourses() async throws -> [ManagedCourse]
    func fetchCourse(id: UUID) async throws -> ManagedCourse
    func createCourse(_ course: ManagedCourse) async throws -> ManagedCourse
    func updateCourse(_ course: ManagedCourse) async throws -> ManagedCourse
    func deleteCourse(id: UUID) async throws
    func assignCourseToUsers(courseId: UUID, userIds: [UUID]) async throws
    func duplicateCourse(_ id: UUID) async throws -> ManagedCourse
}

class CourseService: CourseServiceProtocol {
    private let apiClient: APIClient
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É—Ä—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏
    @MainActor
    private static var storedCourses: [ManagedCourse] = ManagedCourse.mockCourses
    
    init(apiClient: APIClient = .shared) {
        self.apiClient = apiClient
    }
    
    func fetchCourses() async throws -> [ManagedCourse] {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        return await MainActor.run {
            print("üìö CourseService.fetchCourses: Returning \(Self.storedCourses.count) courses")
            return Self.storedCourses
        }
    }
    
    func fetchCourse(id: UUID) async throws -> ManagedCourse {
        let courses = try await fetchCourses()
        guard let course = courses.first(where: { $0.id == id }) else {
            throw CourseError.notFound
        }
        return course
    }
    
    func createCourse(_ course: ManagedCourse) async throws -> ManagedCourse {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await MainActor.run {
            print("üìö CourseService.createCourse: Before adding - \(Self.storedCourses.count) courses")
            Self.storedCourses.append(course)
            print("üìö CourseService.createCourse: After adding - \(Self.storedCourses.count) courses")
        }
        print("üìö CourseService: Created course '\(course.title)' (ID: \(course.id))")
        if course.cmi5PackageId != nil {
            print("   - This course was created from Cmi5 package")
        }
        return course
    }
    
    func updateCourse(_ course: ManagedCourse) async throws -> ManagedCourse {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        await MainActor.run {
            if let index = Self.storedCourses.firstIndex(where: { $0.id == course.id }) {
                Self.storedCourses[index] = course
            }
        }
        return course
    }
    
    func deleteCourse(id: UUID) async throws {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        await MainActor.run {
            Self.storedCourses.removeAll { $0.id == id }
        }
    }
    
    func assignCourseToUsers(courseId: UUID, userIds: [UUID]) async throws {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        print("üìö CourseService: Assigning course \(courseId) to \(userIds.count) users")
    }
    
    func duplicateCourse(_ id: UUID) async throws -> ManagedCourse {
        let course = try await fetchCourse(id: id)
        let newCourse = try await createCourse(course)
        return newCourse
    }
}

enum CourseError: LocalizedError {
    case notFound
    case invalidData
    case networkError
    case courseNotFound
    case invalidCourse
    case duplicateFailed
    case permissionDenied
    
    var errorDescription: String? {
        switch self {
        case .notFound, .courseNotFound:
            return "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        case .invalidData, .invalidCourse:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞"
        case .networkError:
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        case .duplicateFailed:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å"
        case .permissionDenied:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
        }
    }
}

// Mock data
extension ManagedCourse {
    static let mockCourses: [ManagedCourse] = [
        ManagedCourse(
            title: "–û—Å–Ω–æ–≤—ã Swift",
            description: "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Swift",
            duration: 40,
            status: .published,
            competencies: [UUID()],
            modules: [
                ManagedCourseModule(
                    id: UUID(),
                    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Swift",
                    description: "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —è–∑—ã–∫–∞",
                    order: 1,
                    contentType: .video,
                    duration: 60
                ),
                ManagedCourseModule(
                    id: UUID(),
                    title: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã",
                    description: "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏",
                    order: 2,
                    contentType: .document,
                    duration: 30
                )
            ]
        ),
        ManagedCourse(
            title: "AI Fluency Course",
            description: "Comprehensive AI education course with Cmi5 modules",
            duration: 60,
            status: .published,
            competencies: [UUID()],
            modules: [
                ManagedCourseModule(
                    id: UUID(),
                    title: "Introduction to AI",
                    description: "Learn the basics of artificial intelligence",
                    order: 1,
                    contentType: .cmi5,
                    contentUrl: "intro_to_ai", // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç activityId –≤ Cmi5Repository
                    duration: 30
                ),
                ManagedCourseModule(
                    id: UUID(),
                    title: "AI Applications",
                    description: "Explore real-world AI applications",
                    order: 2,
                    contentType: .cmi5,
                    contentUrl: "ai_applications", // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç activityId –≤ Cmi5Repository
                    duration: 45
                )
            ],
            cmi5PackageId: UUID(uuidString: "550e8400-e29b-41d4-a716-446655440000") // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Cmi5Repository.aiFlencyPackageId
        ),
        ManagedCourse(
            title: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            description: "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã",
            duration: 80,
            status: .draft,
            competencies: [],
            modules: []
        )
    ]
} 
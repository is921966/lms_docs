//
//  Cmi5Service.swift
//  LMS
//
//  Created on Sprint 40 Day 3 - Service Layer
//

import Foundation
import Combine

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cmi5 –ø–∞–∫–µ—Ç–∞–º–∏
@MainActor
public final class Cmi5Service: ObservableObject {
    
    // MARK: - Shared Instance
    
    public static let shared = Cmi5Service()
    
    // MARK: - Published Properties
    
    @Published public private(set) var packages: [Cmi5Package] = []
    @Published public private(set) var isLoading = false
    @Published public private(set) var error: Error?
    
    // MARK: - Types
    
    public enum ServiceError: LocalizedError {
        case invalidFile
        case uploadFailed(String)
        case validationFailed([String])
        case importFailed(String)
        case packageNotFound
        case storageError(String)
        
        public var errorDescription: String? {
            switch self {
            case .invalidFile:
                return "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
            case .uploadFailed(let reason):
                return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(reason)"
            case .validationFailed(let errors):
                return "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: \(errors.joined(separator: ", "))"
            case .importFailed(let reason):
                return "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: \(reason)"
            case .packageNotFound:
                return "–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            case .storageError(let reason):
                return "–û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: \(reason)"
            }
        }
    }
    
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–∞
    public struct ImportResult {
        public let package: Cmi5Package
        public let warnings: [String]
        public let storageUrl: URL
    }
    
    // MARK: - Properties
    
    private let parser = Cmi5FullParser()
    private let archiveHandler = Cmi5ArchiveHandler()
    private let repository: Cmi5RepositoryProtocol
    private let fileStorage: FileStorageService
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    public init(
        repository: Cmi5RepositoryProtocol? = nil,
        fileStorage: FileStorageService? = nil
    ) {
        self.repository = repository ?? Cmi5Repository()
        self.fileStorage = fileStorage ?? FileStorageService()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        Task {
            await loadPackages()
        }
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    public func loadPackages() async {
        print("üîç [Cmi5Service] loadPackages() started")
        isLoading = true
        error = nil
        
        do {
            packages = try await repository.getAllPackages()
            print("üîç [Cmi5Service] Loaded \(packages.count) packages:")
            for (index, package) in packages.enumerated() {
                print("   Package \(index + 1): \(package.title) (ID: \(package.id))")
                if let rootBlock = package.manifest.course?.rootBlock {
                    let activityCount = countActivities(in: rootBlock)
                    print("     - Activities: \(activityCount)")
                }
            }
        } catch {
            print("üîç [Cmi5Service] Failed to load packages: \(error)")
            self.error = error
        }
        
        isLoading = false
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–∫–µ—Ç –ø–æ ID
    public func loadPackage(id: UUID) async throws -> Cmi5Package {
        if let cached = packages.first(where: { $0.id == id }) {
            return cached
        }
        
        let package = try await repository.getPackage(id: id)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        if let index = packages.firstIndex(where: { $0.id == id }) {
            packages[index] = package
        } else {
            packages.append(package)
        }
        
        return package
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Cmi5 –∞—Ä—Ö–∏–≤
    public func validateArchive(at url: URL) async throws -> (isValid: Bool, errors: [String], warnings: [String]) {
        do {
            try archiveHandler.validateArchive(at: url)
            return (isValid: true, errors: [], warnings: [])
        } catch let error as Cmi5ArchiveHandler.ArchiveError {
            return (isValid: false, errors: [error.localizedDescription], warnings: [])
        } catch {
            return (isValid: false, errors: [error.localizedDescription], warnings: [])
        }
    }
    
    /// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Cmi5 –ø–∞–∫–µ—Ç
    public func importPackage(
        from url: URL,
        courseId: UUID? = nil,
        uploadedBy: UUID
    ) async throws -> ImportResult {
        print("üîç CMI5 SERVICE: Starting import from \(url.lastPathComponent)")
        isLoading = true
        error = nil
        
        defer {
            isLoading = false
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤
        print("üîç CMI5 SERVICE: Validating archive...")
        let validation = try await validateArchive(at: url)
        if !validation.isValid {
            print("üîç CMI5 SERVICE: Validation failed: \(validation.errors)")
            throw ServiceError.validationFailed(validation.errors)
        }
        
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        print("üîç CMI5 SERVICE: Extracting archive...")
        let extractionResult = try await archiveHandler.extractArchive(from: url)
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        defer {
            archiveHandler.cleanupPackage(packageId: extractionResult.packageId)
        }
        
        // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        print("üîç CMI5 SERVICE: Reading manifest from: \(extractionResult.cmi5ManifestPath.path)")
        var manifestData = try Data(contentsOf: extractionResult.cmi5ManifestPath)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º BOM (Byte Order Mark) –µ—Å–ª–∏ –µ—Å—Ç—å
        if manifestData.count >= 3 {
            let bomBytes = [UInt8](manifestData.prefix(3))
            if bomBytes == [0xEF, 0xBB, 0xBF] {
                print("‚ö†Ô∏è CMI5 SERVICE: Found UTF-8 BOM, removing it")
                manifestData = manifestData.dropFirst(3)
            } else if manifestData.count >= 2 {
                let bomBytes2 = [UInt8](manifestData.prefix(2))
                if bomBytes2 == [0xFF, 0xFE] || bomBytes2 == [0xFE, 0xFF] {
                    print("‚ö†Ô∏è CMI5 SERVICE: Found UTF-16 BOM, need to convert")
                    // –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ UTF-16
                    if let utf16String = String(data: manifestData, encoding: .utf16),
                       let utf8Data = utf16String.data(using: .utf8) {
                        manifestData = utf8Data
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if let xmlString = String(data: manifestData, encoding: .utf8) {
            print("üîç CMI5 SERVICE: Manifest content preview (first 300 chars):")
            print(String(xmlString.prefix(300)))
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if !xmlString.contains("<courseStructure") {
                print("‚ùå CMI5 SERVICE: Manifest missing <courseStructure> element")
            }
            if !xmlString.contains("xmlns=") {
                print("‚ö†Ô∏è CMI5 SERVICE: Manifest missing xmlns attribute")
            }
        } else {
            print("‚ùå CMI5 SERVICE: Failed to decode manifest as UTF-8")
            // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            for encoding in [String.Encoding.windowsCP1251, .isoLatin1, .utf16] {
                if let xmlString = String(data: manifestData, encoding: encoding) {
                    print("‚úÖ CMI5 SERVICE: Successfully decoded with \(encoding)")
                    if let utf8Data = xmlString.data(using: .utf8) {
                        manifestData = utf8Data
                    }
                    break
                }
            }
        }
        
        let xmlParser = Cmi5XMLParser()
        let parseResult = try xmlParser.parseManifest(manifestData, baseURL: extractionResult.coursePath)
        let manifest = parseResult.manifest
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
        let attributes = try FileManager.default.attributesOfItem(atPath: url.path)
        let fileSize = attributes[.size] as? Int64 ?? 0
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
        var package = Cmi5Package(
            packageId: manifest.identifier,
            title: manifest.title,
            description: manifest.description,
            courseId: courseId,
            manifest: manifest,
            filePath: extractionResult.extractedPath.path,
            size: fileSize,
            uploadedBy: uploadedBy,
            version: manifest.version ?? "1.0",
            isValid: validation.isValid,
            validationErrors: validation.errors
        )
        
        print("üîç CMI5 SERVICE: Created package: \(package.title) (ID: \(package.id))")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º packageId –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
        if var course = package.manifest.course,
           var rootBlock = course.rootBlock {
            updateActivityPackageIds(in: &rootBlock, packageId: package.id)
            course.rootBlock = rootBlock
            package.manifest.course = course
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        print("üîç CMI5 SERVICE: Saving package files...")
        let storageUrl = try await savePackageFiles(package: package, from: extractionResult.extractedPath)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
        package.filePath = storageUrl.path
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        print("üîç CMI5 SERVICE: Saving to repository...")
        let savedPackage = try await repository.createPackage(package)
        
        // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫—É—Ä—Å –∏–∑ Cmi5 –ø–∞–∫–µ—Ç–∞
        print("üîç CMI5 SERVICE: Creating managed course from Cmi5 package...")
        print("   - Package ID: \(savedPackage.id)")
        print("   - Package Title: \(savedPackage.title)")
        let managedCourse = Cmi5CourseConverter.convertToManagedCourse(from: savedPackage)
        print("üîç CMI5 SERVICE: Converted course:")
        print("   - Course ID: \(managedCourse.id)")
        print("   - Course Title: \(managedCourse.title)")
        print("   - cmi5PackageId: \(String(describing: managedCourse.cmi5PackageId))")
        print("   - Modules: \(managedCourse.modules.count)")
        for (index, module) in managedCourse.modules.enumerated() {
            print("     Module \(index + 1): \(module.title)")
            print("       - contentType: \(module.contentType)")
            print("       - contentUrl: \(String(describing: module.contentUrl))")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å —á–µ—Ä–µ–∑ CourseService
        do {
            let courseService = CourseService()
            print("üîç CMI5 SERVICE: Calling courseService.createCourse()...")
            let createdCourse = try await courseService.createCourse(managedCourse)
            print("üîç CMI5 SERVICE: Created managed course: \(createdCourse.title) (ID: \(createdCourse.id))")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            let allCourses = try await courseService.fetchCourses()
            print("üîç CMI5 SERVICE: Total courses after creation: \(allCourses.count)")
            if allCourses.contains(where: { $0.id == createdCourse.id }) {
                print("üîç CMI5 SERVICE: ‚úÖ Course found in storage!")
            } else {
                print("üîç CMI5 SERVICE: ‚ùå Course NOT found in storage!")
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
            print("üîç CMI5 SERVICE: Posting Cmi5CourseImported notification...")
            await MainActor.run {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                Task {
                    try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫—É–Ω–¥—ã
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫—É—Ä—Å–µ
                    NotificationCenter.default.post(
                        name: NSNotification.Name("Cmi5CourseImported"), 
                        object: nil,
                        userInfo: ["courseId": createdCourse.id, "courseTitle": createdCourse.title]
                    )
                    print("üîç CMI5 SERVICE: Posted Cmi5CourseImported notification from MainActor with course info")
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
            package.courseId = createdCourse.id
            let updatedPackage = try await repository.updatePackage(package)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
            packages.append(updatedPackage)
            print("üîç CMI5 SERVICE: Package imported successfully! Total packages: \(packages.count)")
            
            return ImportResult(
                package: updatedPackage,
                warnings: validation.warnings,
                storageUrl: storageUrl
            )
        } catch {
            print("üîç CMI5 SERVICE: Failed to create managed course: \(error)")
            // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫—É—Ä—Å, –ø–∞–∫–µ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            packages.append(savedPackage)
            
            var warnings = validation.warnings
            warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            
            return ImportResult(
                package: savedPackage,
                warnings: warnings,
                storageUrl: storageUrl
            )
        }
    }
    
    /// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∫ –∫—É—Ä—Å—É
    public func assignPackageToCourse(packageId: UUID, courseId: UUID) async throws {
        guard var package = packages.first(where: { $0.id == packageId }) else {
            throw ServiceError.packageNotFound
        }
        
        package.courseId = courseId
        
        let updated = try await repository.updatePackage(package)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫—ç—à–µ
        if let index = packages.firstIndex(where: { $0.id == packageId }) {
            packages[index] = updated
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –ø–∞–∫–µ—Ç
    public func deletePackage(id: UUID) async throws {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        try await fileStorage.deletePackageFiles(packageId: id)
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        try await repository.deletePackage(id: id)
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        packages.removeAll { $0.id == id }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
    public func getActivities(for packageId: UUID) async throws -> [Cmi5Activity] {
        let package = try await loadPackage(id: packageId)
        
        // –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        var activities: [Cmi5Activity] = []
        
        func parseBlock(_ block: Cmi5Block, parentId: String? = nil) {
            for activity in block.activities {
                activities.append(activity)
            }
            
            for childBlock in block.blocks {
                parseBlock(childBlock, parentId: block.id)
            }
        }
        
        if let rootBlock = package.manifest.rootBlock {
            parseBlock(rootBlock)
        }
        
        return activities
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    public func getLaunchURL(
        for activity: Cmi5Activity,
        studentId: UUID,
        sessionId: UUID
    ) async throws -> URL {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        let baseURL = try await fileStorage.getPackageURL(packageId: activity.packageId)
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        let launchURL = baseURL.appendingPathComponent(activity.launchUrl)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Cmi5
        var components = URLComponents(url: launchURL, resolvingAgainstBaseURL: true)!
        components.queryItems = [
            URLQueryItem(name: "endpoint", value: getLRSEndpoint()),
            URLQueryItem(name: "fetch", value: getFetchURL(sessionId: sessionId).absoluteString),
            URLQueryItem(name: "registration", value: sessionId.uuidString),
            URLQueryItem(name: "activityId", value: activity.activityId),
            URLQueryItem(name: "actor", value: getActorJSON(studentId: studentId))
        ]
        
        return components.url!
    }
    
    // MARK: - Private Methods
    
    private func savePackageFiles(package: Cmi5Package, from extractedPath: URL) async throws -> URL {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        // extractedPath —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π, –Ω–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        let storageURL = try await fileStorage.savePackage(
            id: package.id,
            from: extractedPath
        )
        
        return storageURL
    }
    
    private func getLRSEndpoint() -> String {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return "https://lrs.example.com/xapi"
    }
    
    private func getFetchURL(sessionId: UUID) -> URL {
        // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è auth token
        return URL(string: "https://api.example.com/cmi5/fetch/\(sessionId)")!
    }
    
    private func getActorJSON(studentId: UUID) -> String {
        // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è actor
        let actor: [String: Any] = [
            "objectType": "Agent",
            "account": [
                "name": studentId.uuidString,
                "homePage": "https://lms.example.com"
            ]
        ]
        
        if let data = try? JSONSerialization.data(withJSONObject: actor),
           let json = String(data: data, encoding: .utf8) {
            return json
        }
        
        return "{}"
    }
    
    private func countActivities(in block: Cmi5Block) -> Int {
        var count = block.activities.count
        for subBlock in block.blocks {
            count += countActivities(in: subBlock)
        }
        return count
    }
    
    private func updateActivityPackageIds(in block: inout Cmi5Block, packageId: UUID) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º packageId
        var updatedActivities: [Cmi5Activity] = []
        for activity in block.activities {
            var updatedActivity = activity
            updatedActivity.packageId = packageId
            updatedActivities.append(updatedActivity)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
        block = Cmi5Block(
            id: block.id,
            title: block.title,
            description: block.description,
            blocks: block.blocks.map { childBlock in
                var updatedChild = childBlock
                updateActivityPackageIds(in: &updatedChild, packageId: packageId)
                return updatedChild
            },
            activities: updatedActivities
        )
    }
}

// MARK: - Repository Protocol

/// –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è Cmi5
public protocol Cmi5RepositoryProtocol {
    func getAllPackages() async throws -> [Cmi5Package]
    func getPackage(id: UUID) async throws -> Cmi5Package
    func createPackage(_ package: Cmi5Package) async throws -> Cmi5Package
    func updatePackage(_ package: Cmi5Package) async throws -> Cmi5Package
    func deletePackage(id: UUID) async throws
}

// MARK: - Mock Repository

/// Mock —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
public final class Cmi5Repository: Cmi5RepositoryProtocol {
    private var packages: [Cmi5Package] = []
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID –¥–ª—è –¥–µ–º–æ –ø–∞–∫–µ—Ç–∞ AI Fluency
    static let aiFlencyPackageId = UUID(uuidString: "550e8400-e29b-41d4-a716-446655440000")!
    
    init() {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–∞–∫–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        createDemoPackages()
    }
    
    private func createDemoPackages() {
        print("üîç CMI5 REPO: Creating demo packages...")
        
        // AI Fluency demo package
        let aiPackageId = Self.aiFlencyPackageId // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID
        let aiActivities = [
            Cmi5Activity(
                id: UUID(),
                packageId: aiPackageId,
                activityId: "intro_to_ai",
                title: "Introduction to AI",
                description: "Learn the basics of artificial intelligence",
                launchUrl: "content/intro/index.html",
                launchMethod: .anyWindow,
                moveOn: .completedOrPassed,
                masteryScore: 0.8,
                activityType: "http://adlnet.gov/expapi/activities/lesson",
                duration: "PT30M"
            ),
            Cmi5Activity(
                id: UUID(),
                packageId: aiPackageId,
                activityId: "ai_applications",
                title: "AI Applications",
                description: "Explore real-world AI applications",
                launchUrl: "content/applications/index.html",
                launchMethod: .anyWindow,
                moveOn: .completedOrPassed,
                masteryScore: 0.8,
                activityType: "http://adlnet.gov/expapi/activities/lesson",
                duration: "PT45M"
            )
        ]
        
        let aiBlock = Cmi5Block(
            id: "ai_block_1",
            title: [Cmi5LangString(lang: "en", value: "AI Fundamentals")],
            description: [Cmi5LangString(lang: "en", value: "Core concepts of AI")],
            activities: aiActivities
        )
        
        let aiCourse = Cmi5Course(
            id: "ai_fluency_course",
            title: [Cmi5LangString(lang: "en", value: "AI Fluency")],
            description: [Cmi5LangString(lang: "en", value: "Comprehensive AI education course")],
            auCount: aiActivities.count,
            rootBlock: aiBlock
        )
        
        let aiManifest = Cmi5Manifest(
            identifier: "ai_fluency_v1",
            title: "AI Fluency",
            description: "Learn artificial intelligence fundamentals",
            course: aiCourse
        )
        
        let aiPackage = Cmi5Package(
            id: aiPackageId,
            packageId: aiManifest.identifier,
            title: aiManifest.title,
            description: aiManifest.description,
            manifest: aiManifest,
            filePath: "/demo/ai_fluency.zip",
            size: 1024 * 1024, // 1MB
            uploadedBy: UUID()
        )
        
        packages.append(aiPackage)
        print("üîç CMI5 REPO: Created demo package: \(aiPackage.title)")
    }
    
    public func getAllPackages() async throws -> [Cmi5Package] {
        print("üîç CMI5 REPO: getAllPackages() called")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        await loadPackagesFromFileSystem()
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        try await Task.sleep(nanoseconds: 500_000_000)
        print("üîç CMI5 REPO: Returning \(packages.count) packages")
        return packages
    }
    
    @MainActor
    private func loadPackagesFromFileSystem() async {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Cmi5Storage
        let fileManager = FileManager.default
        guard let documentsPath = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("‚ùå CMI5 REPO: Could not find documents directory")
            return
        }
        
        let cmi5StoragePath = documentsPath.appendingPathComponent("Cmi5Storage")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        guard fileManager.fileExists(atPath: cmi5StoragePath.path) else {
            print("‚ùå CMI5 REPO: Cmi5Storage directory does not exist")
            return
        }
        
        print("üìÅ CMI5 REPO: Loading packages from: \(cmi5StoragePath.path)")
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
            let packageDirs = try fileManager.contentsOfDirectory(at: cmi5StoragePath, 
                                                                 includingPropertiesForKeys: [.isDirectoryKey],
                                                                 options: .skipsHiddenFiles)
            
            print("üìÅ CMI5 REPO: Found \(packageDirs.count) package directories")
            
            for packageDir in packageDirs {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                var isDirectory: ObjCBool = false
                if fileManager.fileExists(atPath: packageDir.path, isDirectory: &isDirectory), isDirectory.boolValue {
                    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å cmi5.xml
                    let cmi5XmlPath = packageDir.appendingPathComponent("cmi5.xml")
                    if fileManager.fileExists(atPath: cmi5XmlPath.path) {
                        print("üìÅ CMI5 REPO: Found cmi5.xml in \(packageDir.lastPathComponent)")
                        
                        // –ü–∞—Ä—Å–∏–º XML —Ñ–∞–π–ª
                        if let xmlData = try? Data(contentsOf: cmi5XmlPath) {
                            do {
                                let parser = Cmi5XMLParser()
                                let parseResult = try parser.parseManifest(xmlData, baseURL: packageDir)
                                let parsedManifest = parseResult.manifest
                                
                                // –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                                if let packageId = UUID(uuidString: packageDir.lastPathComponent) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç
                                    if !packages.contains(where: { $0.id == packageId }) {
                                        let package = Cmi5Package(
                                            id: packageId,
                                            packageId: parsedManifest.identifier,
                                            title: parsedManifest.title,
                                            description: parsedManifest.description,
                                            manifest: parsedManifest,
                                            filePath: packageDir.path,
                                            size: 0,
                                            uploadedBy: UUID()
                                        )
                                        
                                        packages.append(package)
                                        print("‚úÖ CMI5 REPO: Loaded package: \(package.title) (ID: \(packageId))")
                                    }
                                }
                            } catch {
                                print("‚ùå CMI5 REPO: Error parsing cmi5.xml: \(error)")
                            }
                        }
                    }
                }
            }
            
        } catch {
            print("‚ùå CMI5 REPO: Error loading packages: \(error)")
        }
    }
    
    public func getPackage(id: UUID) async throws -> Cmi5Package {
        print("üîç CMI5 REPO: getPackage(id: \(id)) called")
        guard let package = packages.first(where: { $0.id == id }) else {
            throw Cmi5Service.ServiceError.packageNotFound
        }
        return package
    }
    
    public func createPackage(_ package: Cmi5Package) async throws -> Cmi5Package {
        print("üîç CMI5 REPO: createPackage() - \(package.title)")
        packages.append(package)
        print("üîç CMI5 REPO: Package saved. Total packages: \(packages.count)")
        return package
    }
    
    public func updatePackage(_ package: Cmi5Package) async throws -> Cmi5Package {
        print("üîç CMI5 REPO: updatePackage() - \(package.title)")
        guard let index = packages.firstIndex(where: { $0.id == package.id }) else {
            throw Cmi5Service.ServiceError.packageNotFound
        }
        packages[index] = package
        return package
    }
    
    public func deletePackage(id: UUID) async throws {
        print("üîç CMI5 REPO: deletePackage(id: \(id)) called")
        packages.removeAll { $0.id == id }
    }
}

// MARK: - File Storage Service

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
public final class FileStorageService {
    private let fileManager = FileManager.default
    private let storageURL: URL
    
    public init() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Documents directory –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        let documentsPath = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first!
        self.storageURL = documentsPath.appendingPathComponent("Cmi5Storage", isDirectory: true)
        
        try? fileManager.createDirectory(at: storageURL, withIntermediateDirectories: true)
        print("üìÅ [FileStorageService] Storage directory: \(storageURL.path)")
    }
    
    public func savePackage(id: UUID, from sourceURL: URL) async throws -> URL {
        let packageURL = storageURL.appendingPathComponent(id.uuidString, isDirectory: true)
        
        print("üíæ [FileStorageService] Saving package:")
        print("   - From: \(sourceURL.path)")
        print("   - To: \(packageURL.path)")
        
        if fileManager.fileExists(atPath: packageURL.path) {
            try fileManager.removeItem(at: packageURL)
        }
        
        try fileManager.copyItem(at: sourceURL, to: packageURL)
        print("‚úÖ [FileStorageService] Package saved successfully")
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if let enumerator = fileManager.enumerator(at: packageURL, includingPropertiesForKeys: [.isRegularFileKey]) {
            print("üìÇ [FileStorageService] Saved files:")
            for case let fileURL as URL in enumerator {
                let relativePath = fileURL.path.replacingOccurrences(of: packageURL.path + "/", with: "")
                print("   - \(relativePath)")
            }
        }
        
        return packageURL
    }
    
    public func getPackageURL(packageId: UUID) async throws -> URL {
        let packageURL = storageURL.appendingPathComponent(packageId.uuidString, isDirectory: true)
        
        guard fileManager.fileExists(atPath: packageURL.path) else {
            throw Cmi5Service.ServiceError.packageNotFound
        }
        
        return packageURL
    }
    
    public func deletePackageFiles(packageId: UUID) async throws {
        let packageURL = storageURL.appendingPathComponent(packageId.uuidString, isDirectory: true)
        
        if fileManager.fileExists(atPath: packageURL.path) {
            try fileManager.removeItem(at: packageURL)
        }
    }
} 
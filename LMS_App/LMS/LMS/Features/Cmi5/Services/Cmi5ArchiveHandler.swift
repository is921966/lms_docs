//
//  Cmi5ArchiveHandler.swift
//  LMS
//
//  Created on 24.06.2025.
//

import Foundation
import UniformTypeIdentifiers
import ZIPFoundation

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ZIP –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è Cmi5 –ø–∞–∫–µ—Ç–æ–≤
public class Cmi5ArchiveHandler {
    
    // MARK: - Types
    
    public enum ArchiveError: LocalizedError {
        case invalidArchive
        case extractionFailed(String)
        case fileTooLarge(maxSize: Int64)
        case unsupportedFormat
        case fileNotFound(String)
        case temporaryDirectoryError
        
        public var errorDescription: String? {
            switch self {
            case .invalidArchive:
                return "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º."
            case .extractionFailed(let reason):
                return "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: \(reason)"
            case .fileTooLarge(let maxSize):
                let sizeMB = maxSize / 1024 / 1024
                return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: \(sizeMB) –ú–ë"
            case .unsupportedFormat:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
            case .fileNotFound(let filename):
                return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: \(filename)"
            case .temporaryDirectoryError:
                return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            }
        }
    }
    
    public struct ExtractionResult {
        public let packageId: String
        public let extractedPath: URL
        public let cmi5ManifestPath: URL
        public let coursePath: URL
        public let extractedFiles: [String]
    }
    
    // MARK: - Properties
    
    private let fileManager = FileManager.default
    private let tempDirectory: URL
    private let maxArchiveSize: Int64 = 100 * 1024 * 1024 // 100 MB
    
    // MARK: - Initialization
    
    public init() {
        self.tempDirectory = fileManager.temporaryDirectory
            .appendingPathComponent("cmi5_packages", isDirectory: true)
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try? fileManager.createDirectory(at: tempDirectory, withIntermediateDirectories: true)
    }
    
    // MARK: - Public Methods
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏–≤ –±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
    public func validateArchive(at url: URL) throws {
        print("üîç [Cmi5ArchiveHandler] Validating archive at: \(url.path)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        guard fileManager.fileExists(atPath: url.path) else {
            print("‚ùå [Cmi5ArchiveHandler] File does not exist at path: \(url.path)")
            throw ArchiveError.invalidArchive
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        let attributes = try fileManager.attributesOfItem(atPath: url.path)
        let fileSize = attributes[.size] as? Int64 ?? 0
        print("üìè [Cmi5ArchiveHandler] File size: \(fileSize) bytes")
        
        if fileSize > maxArchiveSize {
            print("‚ùå [Cmi5ArchiveHandler] File too large: \(fileSize) > \(maxArchiveSize)")
            throw ArchiveError.fileTooLarge(maxSize: maxArchiveSize)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
        let hasSecurityScope = url.startAccessingSecurityScopedResource()
        defer { 
            if hasSecurityScope {
                url.stopAccessingSecurityScopedResource()
            }
        }
        
        if !hasSecurityScope {
            print("‚ö†Ô∏è [Cmi5ArchiveHandler] Could not access security scoped resource - continuing without it")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP —Ñ–∞–π–ª
        do {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            let fileHandle = try FileHandle(forReadingFrom: url)
            let signature = fileHandle.readData(ofLength: 4)
            fileHandle.closeFile()
            
            // ZIP —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å PK (0x504B)
            if signature.count >= 2 {
                let bytes = [UInt8](signature)
                print("üìã [Cmi5ArchiveHandler] File signature: \(bytes.map { String(format: "%02X", $0) }.joined())")
                if bytes[0] != 0x50 || bytes[1] != 0x4B {
                    print("‚ùå [Cmi5ArchiveHandler] Invalid ZIP signature (expected PK/504B)")
                }
            }
            
            guard let archive = Archive(url: url, accessMode: .read) else {
                print("‚ùå [Cmi5ArchiveHandler] Could not open as ZIP archive")
                throw ArchiveError.invalidArchive
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
            var entryCount = 0
            var entries: [String] = []
            for entry in archive {
                entryCount += 1
                if entries.count < 5 {
                    entries.append(entry.path)
                }
            }
            
            print("üì¶ [Cmi5ArchiveHandler] Archive entries count: \(entryCount)")
            if entryCount == 0 {
                print("‚ùå [Cmi5ArchiveHandler] Archive is empty")
                throw ArchiveError.invalidArchive
            }
            
            // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for path in entries {
                print("   - \(path)")
            }
            
            print("‚úÖ [Cmi5ArchiveHandler] Archive is valid ZIP file with \(entryCount) entries")
        } catch {
            print("‚ùå [Cmi5ArchiveHandler] Archive validation failed: \(error)")
            print("   Error type: \(type(of: error))")
            print("   Error description: \(error.localizedDescription)")
            throw ArchiveError.invalidArchive
        }
    }
    
    /// –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–π–ª–∞–º
    public func extractArchive(from url: URL) async throws -> ExtractionResult {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤
        try validateArchive(at: url)
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        let packageId = UUID().uuidString
        let extractionPath = tempDirectory.appendingPathComponent(packageId, isDirectory: true)
        
        try fileManager.createDirectory(at: extractionPath, withIntermediateDirectories: true)
        
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ZIPFoundation
        do {
            let hasSecurityScope = url.startAccessingSecurityScopedResource()
            defer { 
                if hasSecurityScope {
                    url.stopAccessingSecurityScopedResource()
                }
            }
            
            if !hasSecurityScope {
                print("‚ö†Ô∏è [Cmi5ArchiveHandler] Could not access security scoped resource - attempting extraction anyway")
            }
            
            try fileManager.unzipItem(at: url, to: extractionPath)
        } catch {
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try? fileManager.removeItem(at: extractionPath)
            throw ArchiveError.extractionFailed(error.localizedDescription)
        }
        
        // –ò—â–µ–º cmi5.xml —Ñ–∞–π–ª
        let cmi5ManifestPath = try findCmi5Manifest(in: extractionPath)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—É—Ä—Å–∞
        let coursePath = cmi5ManifestPath.deletingLastPathComponent()
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        let extractedFiles = try listExtractedFiles(at: extractionPath)
        
        return ExtractionResult(
            packageId: packageId,
            extractedPath: extractionPath,
            cmi5ManifestPath: cmi5ManifestPath,
            coursePath: coursePath,
            extractedFiles: extractedFiles
        )
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    public func cleanupPackage(packageId: String) {
        let packagePath = tempDirectory.appendingPathComponent(packageId)
        try? fileManager.removeItem(at: packagePath)
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    public func cleanupAll() {
        try? fileManager.removeItem(at: tempDirectory)
        try? fileManager.createDirectory(at: tempDirectory, withIntermediateDirectories: true)
    }
    
    // MARK: - Private Methods
    
    private func findCmi5Manifest(in directory: URL) throws -> URL {
        let enumerator = fileManager.enumerator(
            at: directory,
            includingPropertiesForKeys: [.isRegularFileKey],
            options: [.skipsHiddenFiles]
        )
        
        while let fileURL = enumerator?.nextObject() as? URL {
            if fileURL.lastPathComponent.lowercased() == "cmi5.xml" {
                return fileURL
            }
        }
        
        throw ArchiveError.fileNotFound("cmi5.xml")
    }
    
    private func listExtractedFiles(at directory: URL) throws -> [String] {
        var files: [String] = []
        
        let enumerator = fileManager.enumerator(
            at: directory,
            includingPropertiesForKeys: [.isRegularFileKey],
            options: [.skipsHiddenFiles]
        )
        
        while let fileURL = enumerator?.nextObject() as? URL {
            let relativePath = fileURL.path.replacingOccurrences(
                of: directory.path + "/",
                with: ""
            )
            files.append(relativePath)
        }
        
        return files
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–º–æ-–ø–∞–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public func createDemoPackage() async throws -> URL {
        let demoPackageId = "demo-\(UUID().uuidString)"
        let demoPath = tempDirectory.appendingPathComponent(demoPackageId, isDirectory: true)
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        try fileManager.createDirectory(at: demoPath, withIntermediateDirectories: true)
        
        // –°–æ–∑–¥–∞–µ–º cmi5.xml —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        let cmi5Content = """
        <?xml version="1.0" encoding="utf-8"?>
        <courseStructure xmlns="https://w3id.org/xapi/profiles/cmi5/v1/coursestructure.xsd" id="demo-course-001">
            <title>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—É—Ä—Å</title>
            <description>–ü—Ä–∏–º–µ—Ä Cmi5 –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</description>
            <course id="demo-course">
                <title>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—É—Ä—Å</title>
                <description>–ü—Ä–∏–º–µ—Ä Cmi5 –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</description>
                <au id="demo-activity" moveOn="Passed" launchMethod="OwnWindow">
                    <title>–í–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫</title>
                    <description>–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞</description>
                    <url>index.html</url>
                </au>
            </course>
        </courseStructure>
        """
        
        let cmi5Path = demoPath.appendingPathComponent("cmi5.xml")
        try cmi5Content.write(to: cmi5Path, atomically: true, encoding: .utf8)
        
        // –°–æ–∑–¥–∞–µ–º index.html
        let indexContent = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—É—Ä—Å</title>
            <meta charset="utf-8">
            <style>
                body { 
                    font-family: -apple-system, system-ui; 
                    padding: 20px;
                    max-width: 800px;
                    margin: 0 auto;
                }
                h1 { color: #333; }
                .button {
                    background-color: #007AFF;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    border-radius: 8px;
                    font-size: 16px;
                    cursor: pointer;
                    margin-top: 20px;
                }
                .button:hover {
                    background-color: #0051D5;
                }
            </style>
        </head>
        <body>
            <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—É—Ä—Å!</h1>
            <p>–≠—Ç–æ –ø—Ä–∏–º–µ—Ä Cmi5 –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞.</p>
            <p>–í —Ä–µ–∞–ª—å–Ω–æ–º –∫—É—Ä—Å–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.</p>
            <button class="button" onclick="alert('–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –í —Ä–µ–∞–ª—å–Ω–æ–º –∫—É—Ä—Å–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ xAPI statement.')">–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫</button>
        </body>
        </html>
        """
        
        let indexPath = demoPath.appendingPathComponent("index.html")
        try indexContent.write(to: indexPath, atomically: true, encoding: .utf8)
        
        // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        let zipPath = tempDirectory.appendingPathComponent("\(demoPackageId).zip")
        try fileManager.zipItem(at: demoPath, to: zipPath)
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        try fileManager.removeItem(at: demoPath)
        
        return zipPath
    }
} 
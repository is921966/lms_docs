//  Cmi5PlayerView.swift
//  LMS
//
//  Created by LMS on 17.01.2025.
//

import SwiftUI
import WebKit

/// View –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π xAPI
struct Cmi5PlayerView: View {
    // MARK: - Properties
    
    let packageId: UUID?
    let activityId: String?
    let sessionId: String
    let launchParameters: [String: String]
    
    @State private var isLoading = true
    @State private var loadingProgress: Double = 0
    @State private var error: Error?
    @State private var webView: WKWebView?
    @State private var showControls = true
    @State private var isFullScreen = false
    @State private var activity: Cmi5Activity?
    
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject private var cmi5Service: Cmi5Service
    @EnvironmentObject private var lrsService: LRSService
    
    // MARK: - Callbacks
    
    var onStatement: ((XAPIStatement) -> Void)?
    var onCompletion: ((Bool) -> Void)?
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // WebView container
            webViewContainer
                .ignoresSafeArea(isFullScreen ? .all : .init())
            
            // Loading overlay
            if isLoading {
                loadingOverlay
            }
            
            // Error view
            if let error = error {
                errorView(error)
            }
            
            // Controls overlay
            if showControls && !isLoading {
                controlsOverlay
            }
        }
        .navigationBarHidden(isFullScreen)
        .statusBar(hidden: isFullScreen)
        .onAppear {
            launchActivity()
        }
        .onDisappear {
            terminateActivity()
        }
    }
    
    // MARK: - Views
    
    private var webViewContainer: some View {
        WebViewRepresentable(
            url: buildLaunchURL() ?? URL(string: "about:blank")!,
            onLoadStart: { webView in
                self.webView = webView
                isLoading = true
            },
            onLoadProgress: { progress in
                loadingProgress = progress
            },
            onLoadComplete: { success in
                isLoading = false
                if success {
                    sendInitializedStatement()
                }
            },
            onError: { error in
                self.error = error
                isLoading = false
            },
            onStatement: { statement in
                self.onStatement?(statement)
            },
            onCompletion: self.onCompletion
        )
    }
    
    private var loadingOverlay: some View {
        ZStack {
            Color.black.opacity(0.3)
            
            VStack(spacing: 20) {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.5)
                
                Text("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                    .foregroundColor(.white)
                    .font(.headline)
                
                ProgressView(value: loadingProgress)
                    .progressViewStyle(LinearProgressViewStyle(tint: .white))
                    .frame(width: 200)
            }
            .padding(30)
            .background(Color.black.opacity(0.7))
            .cornerRadius(15)
        }
    }
    
    private func errorView(_ error: Error) -> some View {
        VStack(spacing: 20) {
            Image(systemName: "exclamationmark.triangle.fill")
                .font(.system(size: 50))
                .foregroundColor(.orange)
            
            Text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                .font(.title2)
                .fontWeight(.semibold)
            
            Text(error.localizedDescription)
                .font(.body)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
            
            HStack(spacing: 20) {
                Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") {
                    self.error = nil
                    launchActivity()
                }
                .buttonStyle(.borderedProminent)
                
                Button("–ó–∞–∫—Ä—ã—Ç—å") {
                    dismiss()
                }
                .buttonStyle(.bordered)
            }
        }
        .padding()
        .frame(maxWidth: 400)
    }
    
    private var controlsOverlay: some View {
        VStack {
            // Top controls
            HStack {
                Button(action: { dismiss() }) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.title)
                        .foregroundColor(.white)
                        .background(Color.black.opacity(0.5))
                        .clipShape(Circle())
                }
                
                Spacer()
                
                Button(action: toggleFullScreen) {
                    Image(systemName: isFullScreen ? "arrow.down.right.and.arrow.up.left" : "arrow.up.left.and.arrow.down.right")
                        .font(.title2)
                        .foregroundColor(.white)
                        .padding(8)
                        .background(Color.black.opacity(0.5))
                        .clipShape(Circle())
                }
            }
            .padding()
            
            Spacer()
            
            // Bottom info bar
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text(activity?.title ?? "Loading...")
                        .font(.headline)
                        .foregroundColor(.white)
                    
                    Text("Session: \(sessionId)")
                        .font(.caption)
                        .foregroundColor(.white.opacity(0.7))
                }
                
                Spacer()
            }
            .padding()
            .background(
                LinearGradient(
                    colors: [Color.black.opacity(0.7), Color.clear],
                    startPoint: .bottom,
                    endPoint: .top
                )
            )
        }
        .opacity(showControls ? 1 : 0)
        .animation(.easeInOut(duration: 0.3), value: showControls)
        .onTapGesture {
            withAnimation {
                showControls.toggle()
            }
        }
    }
    
    // MARK: - Methods
    
    private func buildLaunchURL() -> URL? {
        guard let packageId = packageId,
              let activityId = activityId else {
            print("‚ùå [Cmi5PlayerView] Missing packageId or activityId")
            return nil
        }
        
        print("üîç [Cmi5PlayerView] buildLaunchURL() started")
        print("   - packageId: \(packageId)")
        print("   - activityId: \(activityId)")
        
        let fileManager = FileManager.default
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        guard let documentsPath = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("‚ùå [Cmi5PlayerView] Could not find documents directory")
            return nil
        }
        
        // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–∞–∫–µ—Ç–∞ –≤ Cmi5Storage
        let packagePath = documentsPath.appendingPathComponent("Cmi5Storage").appendingPathComponent(packageId.uuidString)
        
        print("üìÅ [Cmi5PlayerView] Package path: \(packagePath.path)")
        print("üìÅ [Cmi5PlayerView] Package exists: \(fileManager.fileExists(atPath: packagePath.path))")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–∞–∫–µ—Ç–∞
        guard fileManager.fileExists(atPath: packagePath.path) else {
            print("‚ùå [Cmi5PlayerView] Package directory not found")
            return nil
        }
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å cmi5.xml —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ URL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let cmi5XmlPath = packagePath.appendingPathComponent("cmi5.xml")
        
        if fileManager.fileExists(atPath: cmi5XmlPath.path),
           let xmlData = try? Data(contentsOf: cmi5XmlPath) {
            
            do {
                let parser = Cmi5XMLParser()
                let parseResult = try parser.parseManifest(xmlData, baseURL: packagePath)
                let manifest = parseResult.manifest
                
                // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ID
                if let activity = findActivityInManifest(manifest, activityId: activityId) {
                    print("‚úÖ [Cmi5PlayerView] Found activity: \(activity.title)")
                    print("   - Launch URL: \(activity.launchUrl)")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    let contentUrl = packagePath.appendingPathComponent(activity.launchUrl)
                    
                    if fileManager.fileExists(atPath: contentUrl.path) {
                        print("‚úÖ [Cmi5PlayerView] Content file exists: \(contentUrl.path)")
                        return contentUrl
                    } else {
                        print("‚ùå [Cmi5PlayerView] Content file not found: \(contentUrl.path)")
                        
                        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
                        let alternativePaths = [
                            packagePath.appendingPathComponent("index.html"),
                            packagePath.appendingPathComponent("content/index.html"),
                            packagePath.appendingPathComponent("content.html")
                        ]
                        
                        for altPath in alternativePaths {
                            if fileManager.fileExists(atPath: altPath.path) {
                                print("‚úÖ [Cmi5PlayerView] Found alternative content: \(altPath.path)")
                                return altPath
                            }
                        }
                    }
                } else {
                    print("‚ùå [Cmi5PlayerView] Activity not found in manifest")
                }
            } catch {
                print("‚ùå [Cmi5PlayerView] Error parsing manifest: \(error)")
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ index.html –Ω–∞–ø—Ä—è–º—É—é
        let indexPath = packagePath.appendingPathComponent("index.html")
        if fileManager.fileExists(atPath: indexPath.path) {
            print("‚úÖ [Cmi5PlayerView] Found index.html: \(indexPath.path)")
            return indexPath
        }
        
        print("‚ùå [Cmi5PlayerView] No content file found")
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if let contents = try? fileManager.contentsOfDirectory(atPath: packagePath.path) {
            print("üìÅ [Cmi5PlayerView] Package contents:")
            for file in contents {
                print("   - \(file)")
            }
        }
        
        return nil
    }
    
    private func findActivityInManifest(_ manifest: Cmi5Manifest, activityId: String) -> Cmi5Activity? {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –±–ª–æ–∫–µ
        if let rootBlock = manifest.course?.rootBlock {
            return findActivityInBlock(rootBlock, activityId: activityId)
        }
        return nil
    }
    
    private func findActivityInBlock(_ block: Cmi5Block, activityId: String) -> Cmi5Activity? {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
        for activity in block.activities {
            if activity.activityId == activityId {
                return activity
            }
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        for subBlock in block.blocks {
            if let activity = findActivityInBlock(subBlock, activityId: activityId) {
                return activity
            }
        }
        
        return nil
    }
    
    private func launchActivity() {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        Task {
            await loadActivity()
            
            if activity != nil {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º launched statement –≤ LRS
                do {
                    let statement = try XAPIStatementBuilder()
                        .setActor(lrsService.currentActor)
                        .setVerb(XAPIStatementBuilder.Cmi5Verb.launched)
                        .setObject(XAPIObject.activity(activity!.toXAPIActivity()))
                        .setCmi5Context(sessionId: sessionId, registration: UUID().uuidString)
                        .build()
                    
                    try await lrsService.sendStatement(statement)
                    onStatement?(statement)
                } catch {
                    print("‚ùå [Cmi5PlayerView] Error creating/sending launched statement: \(error)")
                }
            }
        }
    }
    
    @MainActor
    private func loadActivity() async {
        guard let packageId = packageId,
              let activityId = activityId else {
            print("‚ùå [Cmi5PlayerView] Missing packageId or activityId")
            return
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        let fileManager = FileManager.default
        guard let documentsPath = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            return
        }
        
        let packagePath = documentsPath.appendingPathComponent("Cmi5Storage").appendingPathComponent(packageId.uuidString)
        let cmi5XmlPath = packagePath.appendingPathComponent("cmi5.xml")
        
        if fileManager.fileExists(atPath: cmi5XmlPath.path),
           let xmlData = try? Data(contentsOf: cmi5XmlPath) {
            
            do {
                let parser = Cmi5XMLParser()
                let parseResult = try parser.parseManifest(xmlData, baseURL: packagePath)
                let manifest = parseResult.manifest
                
                // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
                if let foundActivity = findActivityInManifest(manifest, activityId: activityId) {
                    self.activity = foundActivity
                    print("‚úÖ [Cmi5PlayerView] Activity loaded: \(foundActivity.title)")
                }
            } catch {
                print("‚ùå [Cmi5PlayerView] Error parsing manifest: \(error)")
            }
        }
    }
    
    private func sendInitializedStatement() {
        Task {
            if let activity = activity {
                do {
                    let statement = try XAPIStatementBuilder()
                        .setActor(lrsService.currentActor)
                        .setVerb(XAPIStatementBuilder.Cmi5Verb.initialized)
                        .setObject(XAPIObject.activity(activity.toXAPIActivity()))
                        .setCmi5Context(sessionId: sessionId, registration: UUID().uuidString)
                        .build()
                    
                    try await lrsService.sendStatement(statement)
                    onStatement?(statement)
                } catch {
                    print("‚ùå [Cmi5PlayerView] Error sending initialized statement: \(error)")
                }
            }
        }
    }
    
    private func terminateActivity() {
        Task {
            if let activity = activity {
                do {
                    let statement = try XAPIStatementBuilder()
                        .setActor(lrsService.currentActor)
                        .setVerb(XAPIStatementBuilder.Cmi5Verb.terminated)
                        .setObject(XAPIObject.activity(activity.toXAPIActivity()))
                        .setCmi5Context(sessionId: sessionId, registration: UUID().uuidString)
                        .build()
                    
                    try await lrsService.sendStatement(statement)
                    onStatement?(statement)
                    onCompletion?(true)
                } catch {
                    print("‚ùå [Cmi5PlayerView] Error sending terminated statement: \(error)")
                }
            }
        }
    }
    
    private func handleStatement(_ statement: XAPIStatement) {
        // Notify callback
        onStatement?(statement)
        
        // Check for completion
        if statement.verb.id == XAPIStatementBuilder.Cmi5Verb.completed.id ||
           statement.verb.id == XAPIStatementBuilder.Cmi5Verb.passed.id {
            onCompletion?(true)
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º view
            DispatchQueue.main.async {
                self.dismiss()
            }
        } else if statement.verb.id == XAPIStatementBuilder.Cmi5Verb.failed.id {
            onCompletion?(false)
        }
    }
    
    private func handleCmi5Message(_ message: [String: Any]) {
        print("üì® [Cmi5PlayerView] Received Cmi5 message: \(message)")
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if let command = message["command"] as? String {
            switch command {
            case "terminate":
                terminateActivity()
            case "complete":
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                onCompletion?(true)
            case "pass":
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                onCompletion?(true)
            case "fail":
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                onCompletion?(false)
            default:
                print("‚ö†Ô∏è [Cmi5PlayerView] Unknown Cmi5 command: \(command)")
            }
        }
    }
    
    private func toggleFullScreen() {
        withAnimation {
            isFullScreen.toggle()
            showControls = false
        }
    }
}

// MARK: - WebView Representable

struct WebViewRepresentable: UIViewRepresentable {
    let url: URL
    let onLoadStart: (WKWebView) -> Void
    let onLoadProgress: (Double) -> Void
    let onLoadComplete: (Bool) -> Void
    let onError: (Error) -> Void
    let onStatement: (XAPIStatement) -> Void
    let onCompletion: ((Bool) -> Void)?  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    func makeUIView(context: Context) -> WKWebView {
        let configuration = WKWebViewConfiguration()
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []
        
        // Add xAPI message handler
        configuration.userContentController.add(
            context.coordinator,
            name: "xapi"
        )
        
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.navigationDelegate = context.coordinator
        
        return webView
    }
    
    func updateUIView(_ webView: WKWebView, context: Context) {
        if webView.url != url {
            let request = URLRequest(url: url)
            webView.load(request)
            onLoadStart(webView)
        }
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, WKNavigationDelegate, WKScriptMessageHandler {
        let parent: WebViewRepresentable
        
        init(_ parent: WebViewRepresentable) {
            self.parent = parent
        }
        
        // MARK: - WKNavigationDelegate
        
        func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
            parent.onLoadProgress(0)
        }
        
        func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
            parent.onLoadProgress(0.5)
        }
        
        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            parent.onLoadProgress(1.0)
            parent.onLoadComplete(true)
        }
        
        func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
            parent.onError(error)
            parent.onLoadComplete(false)
        }
        
        // MARK: - WKScriptMessageHandler
        
        func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
            guard message.name == "xapi" else { return }
            
            print("üì± [Cmi5PlayerView] Received xAPI message: \(message.body)")
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if let messageBody = message.body as? [String: Any] {
                // –ü–æ–ª—É—á–∞–µ–º verb
                let verb = messageBody["verb"] as? String ?? "unknown"
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                switch verb {
                case "completed":
                    print("‚úÖ [Cmi5PlayerView] Activity completed!")
                    // –í—ã–∑—ã–≤–∞–µ–º callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    DispatchQueue.main.async {
                        self.parent.onCompletion?(true)
                        
                        // –¢–∞–∫–∂–µ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å alert
                        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                           let rootViewController = windowScene.windows.first?.rootViewController {
                            let alert = UIAlertController(
                                title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                                message: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Ä–æ–∫.",
                                preferredStyle: .alert
                            )
                            alert.addAction(UIAlertAction(title: "OK", style: .default) { _ in
                                // –ó–∞–∫—Ä—ã–≤–∞–µ–º view —á–µ—Ä–µ–∑ onCompletion
                                self.parent.onCompletion?(true)
                            })
                            rootViewController.present(alert, animated: true)
                        }
                    }
                    
                case "progressed":
                    if let result = messageBody["result"] as? [String: Any],
                       let extensions = result["extensions"] as? [String: Any],
                       let progress = extensions["progress"] as? Double {
                        print("üìä [Cmi5PlayerView] Progress: \(progress * 100)%")
                    }
                    
                case "initialized":
                    print("üöÄ [Cmi5PlayerView] Activity initialized")
                    
                default:
                    print("‚ÑπÔ∏è [Cmi5PlayerView] Unknown verb: \(verb)")
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π XAPIStatement (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                // –≠—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö xAPI —Å–æ–æ–±—â–µ–Ω–∏–π
                if let statementData = try? JSONSerialization.data(withJSONObject: messageBody),
                   let statement = try? JSONDecoder().decode(XAPIStatement.self, from: statementData) {
                    parent.onStatement(statement)
                }
            }
        }
    }
}

// MARK: - Preview

struct Cmi5PlayerView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            Cmi5PlayerView(
                packageId: UUID(),
                activityId: "activity-1",
                sessionId: UUID().uuidString,
                launchParameters: [
                    "lang": "ru",
                    "theme": "light"
                ]
            )
        }
        .environmentObject(Cmi5Service())
        .environmentObject(LRSService())
    }
} 
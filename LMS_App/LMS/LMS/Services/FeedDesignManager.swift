import SwiftUI
import Combine

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–æ–º –ª–µ–Ω—Ç—ã
class FeedDesignManager: ObservableObject {
    static let shared = FeedDesignManager()
    
    static let feedDesignChangedNotification = Foundation.Notification.Name("feedDesignChanged")
    
    @Published var useNewDesign: Bool {
        didSet {
            print("üéØ FeedDesignManager: useNewDesign changed to \(useNewDesign)")
            ComprehensiveLogger.shared.log(.ui, .info, "Feed design changed", details: [
                "oldValue": oldValue,
                "newValue": useNewDesign,
                "source": "direct"
            ])
            
            UserDefaults.standard.set(useNewDesign, forKey: "useNewFeedDesign")
            UserDefaults.standard.synchronize()
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö view
            NotificationCenter.default.post(
                name: FeedDesignManager.feedDesignChangedNotification,
                object: nil,
                userInfo: ["useNewDesign": useNewDesign]
            )
        }
    }
    
    private var cancellables = Set<AnyCancellable>()
    
    private init() {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è TestFlight
        #if DEBUG
        // –í debug —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let savedValue = UserDefaults.standard.object(forKey: "useNewFeedDesign") as? Bool
        self.useNewDesign = savedValue ?? false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–µ–Ω—Ç–∞)
        #else
        // –í release (TestFlight) –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω
        self.useNewDesign = true
        UserDefaults.standard.set(true, forKey: "useNewFeedDesign")
        #endif
        
        print("üéØ FeedDesignManager init: useNewDesign = \(useNewDesign)")
        ComprehensiveLogger.shared.log(.ui, .info, "FeedDesignManager initialized", details: [
            "useNewDesign": useNewDesign,
            "isDebug": true
        ])
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è UserDefaults
        NotificationCenter.default.publisher(for: UserDefaults.didChangeNotification)
            .sink { [weak self] _ in
                let newValue = UserDefaults.standard.bool(forKey: "useNewFeedDesign")
                if self?.useNewDesign != newValue {
                    print("üéØ FeedDesignManager: detected external change to \(newValue)")
                    ComprehensiveLogger.shared.log(.ui, .info, "Feed design external change detected", details: [
                        "currentValue": self?.useNewDesign ?? false,
                        "newValue": newValue,
                        "source": "UserDefaults"
                    ])
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    self?.useNewDesign = newValue
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    NotificationCenter.default.post(name: FeedDesignManager.feedDesignChangedNotification, object: nil)
                }
            }
            .store(in: &cancellables)
    }
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–∏–∑–∞–π–Ω –ª–µ–Ω—Ç—ã
    func toggleDesign() {
        print("üéØ FeedDesignManager: toggle called")
        ComprehensiveLogger.shared.log(.ui, .info, "Feed design toggle called", details: [
            "beforeToggle": useNewDesign
        ])
        useNewDesign.toggle()
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    func setDesign(_ useNew: Bool) {
        print("üéØ FeedDesignManager: setDesign(\(useNew))")
        UserDefaults.standard.set(useNew, forKey: "useNewFeedDesign")
        UserDefaults.standard.synchronize()
        self.useNewDesign = useNew
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        NotificationCenter.default.post(name: FeedDesignManager.feedDesignChangedNotification, object: nil)
        
        print("üéØ FeedDesignManager: useNewDesign changed to \(useNewDesign)")
        ComprehensiveLogger.shared.log(.ui, .info, "Feed design changed", details: [
            "newValue": useNew,
            "source": "Manual"
        ])
    }
    
    func forceRefresh() {
        let currentValue = UserDefaults.standard.bool(forKey: "useNewFeedDesign")
        if currentValue != useNewDesign {
            print("üîÑ FeedDesignManager: forceRefresh detected mismatch - updating from \(useNewDesign) to \(currentValue)")
            self.useNewDesign = currentValue
            NotificationCenter.default.post(name: FeedDesignManager.feedDesignChangedNotification, object: nil)
        }
    }
    
    /// –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    func resetToDefault() {
        #if DEBUG
        setDesign(true) // –í debug —Ä–µ–∂–∏–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω
        #else
        setDesign(true) // –í release –≤—Å–µ–≥–¥–∞ –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω
        #endif
    }
} 
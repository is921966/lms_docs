//
//  LMSApp+ReleaseNews.swift
//  LMS
//
//  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–∞—Ö
//

import SwiftUI

extension LMSApp {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–∞—Ö
    func setupReleaseNewsService() {
        let releaseService = ReleaseNewsService.shared
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        releaseService.checkAndPublishOnAppLaunch()
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("NewReleaseAvailable"),
            object: nil,
            queue: .main
        ) { notification in
            if let userInfo = notification.userInfo,
               let version = userInfo["version"] as? String,
               let build = userInfo["build"] as? String {
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showReleaseAlert(version: version, build: build)
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    private func showReleaseAlert(version: String, build: String) {
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first,
              let rootViewController = window.rootViewController else {
            return
        }
        
        let alert = UIAlertController(
            title: "üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!",
            message: "–î–æ—Å—Ç—É–ø–Ω–∞ –≤–µ—Ä—Å–∏—è \(version) (Build \(build)). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", style: .default) { _ in
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π
            NotificationCenter.default.post(
                name: NSNotification.Name("NavigateToFeed"),
                object: nil
            )
        })
        
        alert.addAction(UIAlertAction(title: "–ü–æ–∑–∂–µ", style: .cancel))
        
        rootViewController.present(alert, animated: true)
    }
}

// MARK: - Debug Menu Extension

#if DEBUG
extension DebugMenuView {
    /// –°–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–∞—Ö
    var releaseNewsSection: some View {
        Section("Release News Testing") {
            Button("Simulate New Release") {
                simulateNewRelease()
            }
            
            Button("Clear Release History") {
                clearReleaseHistory()
            }
            
            Button("Show Current Version") {
                showCurrentVersion()
            }
        }
    }
    
    private func simulateNewRelease() {
        let releaseService = ReleaseNewsService.shared
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        UserDefaults.standard.removeObject(forKey: "lastAnnouncedAppVersion")
        UserDefaults.standard.removeObject(forKey: "lastAnnouncedBuildNumber")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        releaseService.checkForNewRelease()
        
        // –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
        Task {
            await releaseService.publishReleaseNews()
        }
    }
    
    private func clearReleaseHistory() {
        UserDefaults.standard.removeObject(forKey: "lastAnnouncedAppVersion")
        UserDefaults.standard.removeObject(forKey: "lastAnnouncedBuildNumber")
        UserDefaults.standard.removeObject(forKey: "currentReleaseNotes")
        
        print("Release history cleared")
    }
    
    private func showCurrentVersion() {
        let releaseService = ReleaseNewsService.shared
        print("Version: \(releaseService.currentAppVersion)")
        print("Build: \(releaseService.currentBuildNumber)")
        print("Has new release: \(releaseService.hasNewRelease)")
    }
}
#endif

// MARK: - Feed Integration

extension FeedView {
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–µ–Ω—Ç—ã
    func checkForReleaseNews() {
        let releaseService = ReleaseNewsService.shared
        
        if releaseService.hasNewRelease {
            // –ù–æ–≤–æ—Å—Ç—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            // –ù–æ –º–æ–∂–Ω–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ª–µ–Ω—Ç—É —Ä–∞–Ω—å—à–µ
            Task {
                await releaseService.publishReleaseNews()
            }
        }
    }
}

// MARK: - Settings Integration

extension SettingsView {
    /// –°–µ–∫—Ü–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏
    var versionSection: some View {
        Section("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏") {
            HStack {
                Text("–í–µ—Ä—Å–∏—è")
                Spacer()
                Text("\(ReleaseNewsService.shared.currentAppVersion) (\(ReleaseNewsService.shared.currentBuildNumber))")
                    .foregroundColor(.secondary)
            }
            
            Button("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ") {
                showReleaseNotes()
            }
        }
    }
    
    private func showReleaseNotes() {
        let notes = ReleaseNewsService.shared.getCurrentReleaseNotes()
        
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ª–µ–Ω—Ç–µ
        NotificationCenter.default.post(
            name: NSNotification.Name("ShowReleaseNotes"),
            object: nil,
            userInfo: ["notes": notes]
        )
    }
} 
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # Общие настройки для всех lanes
  end

  desc "Run tests"
  lane :test do
    run_tests(
      scheme: "LMS",
      project: "LMS.xcodeproj",
      clean: true,
      destination: "platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5",
      skip_build: false,
      code_coverage: true
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    # Set up App Store Connect API
    app_store_connect_api_key(
      key_id: "7JF867FY76",
      issuer_id: "cd103a3c-5d58-4921-aafb-c220081abea3",
      key_filepath: "./private_keys/AuthKey_7JF867FY76.p8",
      in_house: false
    )
    
    # Don't check git status in CI
    unless ENV['CI']
      ensure_git_status_clean
    end
    
    # Get latest build number from TestFlight
    latest_build = latest_testflight_build_number(
      app_identifier: "ru.tsum.lms.igor",
      initial_build_number: 0
    )
    
    # Increment build number
    increment_build_number(
      build_number: latest_build + 1,
      xcodeproj: "LMS.xcodeproj"
    )
    
    # Build the app
    build_app(
      scheme: "LMS",
      project: "LMS.xcodeproj",
      clean: true,
      export_method: "app-store",
      output_directory: "./build",
      output_name: "LMS.ipa",
      skip_profile_detection: ENV['CI'] ? true : false,
      export_options: ENV['CI'] ? {
        provisioningProfiles: {
          "ru.tsum.lms.igor" => "match AppStore ru.tsum.lms.igor"
        }
      } : nil
    )
    
    # Get changelog from git commits or environment variable
    changelog = if ENV['TESTFLIGHT_CHANGELOG']
      ENV['TESTFLIGHT_CHANGELOG']
    elsif ENV['CI']
      # Get last 5 commit messages
      sh("git log --pretty=format:'• %s' -5").strip
    else
      "Bug fixes and improvements"
    end
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: changelog,
      distribute_external: false,
      notify_external_testers: false,
      beta_app_description: "LMS - Корпоративная система обучения",
      beta_app_feedback_email: "feedback@lms.com",
      groups: ["Internal Testers"]
    )
    
    # Commit the version bump only if not in CI
    unless ENV['CI']
      commit_version_bump(
        message: "Version Bump",
        xcodeproj: "LMS.xcodeproj"
      )
    end
  end

  desc "Deploy to App Store"
  lane :release do
    # Build the app
    build_app(
      scheme: "LMS",
      project: "LMS.xcodeproj",
      clean: true,
      export_method: "app-store"
    )
    
    # Upload to App Store
    upload_to_app_store(
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      force: true,
      precheck_include_in_app_purchases: false
    )
  end

  desc "Create a new build without uploading"
  lane :build do
    build_app(
      scheme: "LMS",
      project: "LMS.xcodeproj",
      clean: true,
      export_method: "app-store",
      output_directory: "./build",
      output_name: "LMS.ipa"
    )
  end

  desc "Fetch TestFlight feedback and screenshots"
  lane :fetch_feedback do |options|
    # Параметры
    days = options[:days] || 7
    create_issues = options[:create_issues] || false
    
    UI.message "📱 Fetching TestFlight feedback for the last #{days} days..."
    
    # Получаем feedback
    count = fetch_testflight_feedback(
      app_identifier: ENV["APP_IDENTIFIER"] || "ru.tsum.LMS",
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
      key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
      output_directory: "testflight_feedback_#{Time.now.strftime('%Y%m%d_%H%M%S')}",
      create_github_issues: create_issues,
      github_token: ENV["GITHUB_TOKEN"],
      github_repo: ENV["GITHUB_REPOSITORY"] || "ishirokov/lms_docs",
      verbose: true
    )
    
    if count > 0
      UI.success "✅ Successfully fetched #{count} feedback items"
      
      # Отправляем уведомление в Slack если настроено
      if ENV["SLACK_WEBHOOK"]
        send_slack_notification(count)
      end
    else
      UI.important "No feedback found or error occurred"
    end
  end

  desc "Send Slack notification about new feedback"
  private_lane :send_slack_notification do |feedback_count|
    slack(
      message: "📱 New TestFlight Feedback",
      slack_url: ENV["SLACK_WEBHOOK"],
      default_payloads: [],
      payload: {
        "Feedback Count" => feedback_count.to_s,
        "Build Number" => get_build_number,
        "Version" => get_version_number
      },
      success: true
    )
  end

  desc "Create GitHub issues from TestFlight feedback"
  private_lane :create_github_issues_from_feedback do
    UI.message "Creating GitHub issues from feedback..."
    
    # Читаем последний отчет
    reports = Dir.glob("testflight_feedback_*/feedback_report.json").sort
    
    if reports.empty?
      UI.error "No feedback reports found"
      return
    end
    
    latest_report = reports.last
    UI.message "Using report: #{latest_report}"
    
    # Здесь можно добавить дополнительную логику обработки
  end

  desc "Fetch TestFlight data using improved Spaceship methods"
  lane :fetch_feedback_v2 do |options|
    UI.message "📱 Fetching TestFlight data with Spaceship v2..."
    
    # Получаем данные через Spaceship
    count = fetch_testflight_feedback_v2(
      app_identifier: ENV["APP_IDENTIFIER"] || "ru.tsum.LMS",
      app_id: ENV["APP_ID"] || "6747716243",
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
      key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
      verbose: true
    )
    
    if count > 0
      UI.success "✅ Successfully fetched data for #{count} testers"
    else
      UI.important "No data found or error occurred"
    end
  end
end

import XCTest

final class ComprehensiveUITest: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI-Testing"]
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    // MARK: - –¢–µ—Å—Ç –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    func testAllUIElementsAndMenuItems() throws {
        // 1. –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞...")
        testLoginScreen()
        
        // 2. –í—Ö–æ–¥ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç
        print("üë§ –í—Ö–æ–¥ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç...")
        loginAsStudent()
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫...")
        testAllTabs()
        
        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        print("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
        testProfileTab()
        
        // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        testSettingsTab()
        
        // 6. –í—ã—Ö–æ–¥ –∏ –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        print("üîÑ –í—ã—Ö–æ–¥ –∏ –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...")
        logout()
        loginAsAdmin()
        
        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        testAdminFeatures()
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    }
    
    // MARK: - Helper –º–µ—Ç–æ–¥—ã
    
    private func testLoginScreen() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—Ö–æ–¥–∞
        XCTAssertTrue(app.staticTexts["–¶–£–ú - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"].exists)
        XCTAssertTrue(app.staticTexts["(–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"].exists)
        XCTAssertTrue(app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"].exists)
        XCTAssertTrue(app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"].exists)
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        takeScreenshot(named: "01_LoginScreen")
    }
    
    private func loginAsStudent() {
        app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"].tap()
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        takeScreenshot(named: "02_StudentMainScreen")
    }
    
    private func loginAsAdmin() {
        app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"].tap()
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        takeScreenshot(named: "03_AdminMainScreen")
    }
    
    private func testAllTabs() {
        let tabBar = app.tabBars.firstMatch
        
        // –ì–ª–∞–≤–Ω–∞—è
        if tabBar.buttons["–ì–ª–∞–≤–Ω–∞—è"].exists {
            tabBar.buttons["–ì–ª–∞–≤–Ω–∞—è"].tap()
            sleep(1)
            takeScreenshot(named: "04_MainTab")
        }
        
        // –ö—É—Ä—Å—ã
        if tabBar.buttons["–ö—É—Ä—Å—ã"].exists {
            tabBar.buttons["–ö—É—Ä—Å—ã"].tap()
            sleep(1)
            takeScreenshot(named: "05_CoursesTab")
        }
        
        // –ü—Ä–æ—Ñ–∏–ª—å
        if tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].exists {
            tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
            sleep(1)
            takeScreenshot(named: "06_ProfileTab")
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        if tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists {
            tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
            sleep(1)
            takeScreenshot(named: "07_SettingsTab")
        }
    }
    
    private func testProfileTab() {
        let tabBar = app.tabBars.firstMatch
        tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
        XCTAssertTrue(app.navigationBars["–ü—Ä–æ—Ñ–∏–ª—å"].exists)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if app.buttons["–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"].exists {
            app.buttons["–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"].tap()
            sleep(1)
            takeScreenshot(named: "08_ProfileAchievements")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            XCTAssertTrue(app.images.count > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if app.buttons["–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"].exists {
            app.buttons["–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"].tap()
            sleep(1)
            takeScreenshot(named: "09_ProfileActivity")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if app.cells.count > 0 {
                print("üìä –ù–∞–π–¥–µ–Ω–æ \(app.cells.count) –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
        if app.buttons["–ù–∞–≤—ã–∫–∏"].exists {
            app.buttons["–ù–∞–≤—ã–∫–∏"].tap()
            sleep(1)
            takeScreenshot(named: "10_ProfileSkills")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists {
            app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
            sleep(1)
            takeScreenshot(named: "11_ProfileSettings")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
            XCTAssertTrue(app.switches.count > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Ä—Å–∏—é
        app.swipeUp()
        sleep(1)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ä—Å–∏–∏
        let versionPredicate = NSPredicate(format: "label CONTAINS[c] '–í–µ—Ä—Å–∏—è'")
        let versionLabel = app.staticTexts.element(matching: versionPredicate)
        if versionLabel.exists {
            takeScreenshot(named: "12_ProfileVersion")
            print("üì± –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: \(versionLabel.label)")
        }
    }
    
    private func testSettingsTab() {
        let tabBar = app.tabBars.firstMatch
        tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        XCTAssertTrue(app.navigationBars["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        let switches = app.switches
        for i in 0..<switches.count {
            let switchElement = switches.element(boundBy: i)
            if switchElement.exists && switchElement.isHittable {
                let label = switchElement.label
                print("üîò –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: \(label)")
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç—É–¥–∞-—Å—é–¥–∞
                let initialValue = switchElement.value as? String ?? "0"
                switchElement.tap()
                sleep(0.5)
                
                let newValue = switchElement.value as? String ?? "0"
                XCTAssertNotEqual(initialValue, newValue, "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å '\(label)' –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                switchElement.tap()
                sleep(0.5)
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        app.swipeUp()
        sleep(1)
        
        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let versionPredicate = NSPredicate(format: "label CONTAINS[c] '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
        let versionRow = app.staticTexts.element(matching: versionPredicate)
        if versionRow.exists {
            takeScreenshot(named: "13_SettingsVersion")
            
            // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            let cells = app.cells
            for i in 0..<cells.count {
                let cell = cells.element(boundBy: i)
                if cell.staticTexts["–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"].exists {
                    let versionTexts = cell.staticTexts.allElementsBoundByIndex
                    for text in versionTexts {
                        if text.label.contains("(Build") {
                            print("üì± –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(text.label)")
                        }
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        if app.buttons["–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"].exists {
            takeScreenshot(named: "14_SettingsLogout")
        }
    }
    
    private func logout() {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let tabBar = app.tabBars.firstMatch
        if tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists {
            tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
        } else if tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].exists {
            // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –∏—â–µ–º –≤—ã—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
            app.swipeUp() // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        }
        
        // –ù–∞–∂–∏–º–∞–µ–º –≤—ã—Ö–æ–¥
        let logoutButton = app.buttons["–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]
        if logoutButton.waitForExistence(timeout: 3) {
            logoutButton.tap()
            sleep(2)
        }
    }
    
    private func testAdminFeatures() {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let tabBar = app.tabBars.firstMatch
        tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
        
        // –ò—â–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        let adminSwitch = app.switches["–ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º"]
        if adminSwitch.exists {
            print("üëë –í–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º...")
            
            // –í–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω
            if adminSwitch.value as? String == "0" {
                adminSwitch.tap()
                sleep(1)
            }
            
            takeScreenshot(named: "15_AdminModeEnabled")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            XCTAssertTrue(app.staticTexts["ADMIN"].exists, "–î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ADMIN")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if app.cells["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏"].exists {
                app.cells["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏"].tap()
                sleep(1)
                takeScreenshot(named: "16_FeatureFlags")
                app.navigationBars.buttons.firstMatch.tap() // –ù–∞–∑–∞–¥
            }
        }
    }
    
    // MARK: - Utilities
    
    private func takeScreenshot(named name: String) {
        let screenshot = XCUIScreen.main.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = name
        attachment.lifetime = .keepAlways
        add(attachment)
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å Shake gesture

extension ComprehensiveUITest {
    
    func testShakeGesture() throws {
        // –í—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        loginAsStudent()
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º shake gesture
        print("üì≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Shake gesture...")
        
        // –í —Å–∏–º—É–ª—è—Ç–æ—Ä–µ shake –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é Device
        // –ù–æ –≤ UI —Ç–µ—Å—Ç–∞—Ö —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if app.buttons["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"].exists {
            app.buttons["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"].tap()
            sleep(1)
            
            if app.navigationBars["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"].exists {
                takeScreenshot(named: "17_FeedbackForm")
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                let textView = app.textViews.firstMatch
                if textView.exists {
                    textView.tap()
                    textView.typeText("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞")
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º
                if app.navigationBars.buttons["–û—Ç–º–µ–Ω–∞"].exists {
                    app.navigationBars.buttons["–û—Ç–º–µ–Ω–∞"].tap()
                }
            }
        }
    }
}

// MARK: - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

extension ComprehensiveUITest {
    
    func testGenerateDetailedReport() throws {
        var report = "# –û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LMS\n\n"
        report += "–î–∞—Ç–∞: \(Date())\n"
        report += "–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1.0 (Build 202507021600)\n\n"
        
        report += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        loginAsStudent()
        
        let tabBar = app.tabBars.firstMatch
        let tabButtons = tabBar.buttons.allElementsBoundByIndex
        
        report += "### –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: \(tabButtons.count)\n"
        for button in tabButtons {
            if button.exists {
                report += "- \(button.label)\n"
            }
        }
        
        report += "\n### –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:\n"
        report += "- ‚úÖ –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞\n"
        report += "- ‚úÖ –í—Ö–æ–¥ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç\n"
        report += "- ‚úÖ –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        report += "- ‚úÖ –í—Å–µ –≤–∫–ª–∞–¥–∫–∏\n"
        report += "- ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        report += "- ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        report += "- ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        report += "- ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
        report += "- ‚úÖ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        report += "- ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞\n"
        
        print(report)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ
        let attachment = XCTAttachment(string: report)
        attachment.name = "TestReport.md"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
} 
import XCTest

final class QuickComprehensiveTest: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI-Testing"]
        app.launch()
    }
    
    func testQuickAllElements() throws {
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        
        // 1. –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞...")
        XCTAssertTrue(app.staticTexts["–¶–£–ú - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"].exists)
        XCTAssertTrue(app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"].exists)
        XCTAssertTrue(app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"].exists)
        takeScreenshot(named: "01_LoginScreen")
        
        // 2. –í—Ö–æ–¥ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç
        print("üë§ –í—Ö–æ–¥ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç...")
        app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"].tap()
        sleep(2)
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–æ–≤
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        takeScreenshot(named: "02_MainScreen")
        
        print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–æ–∫...")
        var foundTabs: [String] = []
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–∫–∞—Ö
        for i in 0..<tabBar.buttons.count {
            let button = tabBar.buttons.element(boundBy: i)
            if button.exists {
                foundTabs.append(button.label)
            }
        }
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: \(foundTabs.count)")
        for tab in foundTabs {
            print("   - \(tab)")
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≤–∫–ª–∞–¥–∫—É
        for (index, tabName) in foundTabs.enumerated() {
            if tabBar.buttons[tabName].exists {
                print("üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: \(tabName)")
                tabBar.buttons[tabName].tap()
                sleep(1)
                takeScreenshot(named: "Tab_\(index)_\(tabName)")
            }
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists {
            print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            tabBar.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
            sleep(1)
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            app.swipeUp()
            sleep(1)
            
            // –ò—â–µ–º –≤–µ—Ä—Å–∏—é
            let cells = app.cells
            for i in 0..<min(cells.count, 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                let cell = cells.element(boundBy: i)
                if cell.exists && cell.staticTexts["–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"].exists {
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                    takeScreenshot(named: "AppVersion")
                    break
                }
            }
        }
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generateReport(tabs: foundTabs)
    }
    
    private func takeScreenshot(named name: String) {
        let screenshot = XCUIScreen.main.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = name
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    private func generateReport(tabs: [String]) {
        var report = """
        # –û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LMS
        
        –î–∞—Ç–∞: \(Date())
        –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1.0 (Build 202507021600)
        
        ## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
        - –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        - –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"
        - –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        - –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å \(tabs.count) –≤–∫–ª–∞–¥–∫–∞–º–∏
        
        ### üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏:
        """
        
        for tab in tabs {
            report += "\n- \(tab)"
        }
        
        report += "\n\n### üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: \(tabs.count + 2) —à—Ç."
        
        print("\n" + report)
        
        let attachment = XCTAttachment(string: report)
        attachment.name = "TestReport.md"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
} 
//
//  FeatureRegistryIntegrationTests.swift
//  LMSUITests
//
//  Created on 29/06/2025.
//

import XCTest

final class FeatureRegistryIntegrationTests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI-Testing"]
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    func testAllMainModulesAreAccessible() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–∞–±–∞—Ö
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5), "Tab bar –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω")
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±—ã:")
        for button in tabBar.buttons.allElementsBoundByIndex {
            if button.exists {
                print("  - \(button.label)")
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã
        let expectedTabs = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–ö—É—Ä—Å—ã", 
            "–¢–µ—Å—Ç—ã",
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "More"  // –í iOS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è More –∫–æ–≥–¥–∞ —Ç–∞–±–æ–≤ –±–æ–ª—å—à–µ 5
        ]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤
        for tabName in expectedTabs {
            let tab = tabBar.buttons[tabName]
            if !tab.exists {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                let predicate = NSPredicate(format: "label CONTAINS[c] %@", tabName)
                let matchingTab = tabBar.buttons.matching(predicate).firstMatch
                XCTAssertTrue(matchingTab.exists, "–¢–∞–± '\(tabName)' –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ More –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        let moreTab = tabBar.buttons["More"]
        if moreTab.exists {
            moreTab.tap()
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ More
            let moreTable = app.tables.firstMatch
            XCTAssertTrue(moreTable.waitForExistence(timeout: 2), "–°–ø–∏—Å–æ–∫ More –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π –≤ More
            let modulesInMore = ["–ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–ü—Ä–æ—Ñ–∏–ª—å"]
            for moduleName in modulesInMore {
                let cell = moreTable.cells.containing(.staticText, identifier: moduleName).firstMatch
                print("üîç –ò—â–µ–º –≤ More: \(moduleName) - \(cell.exists ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω")")
            }
        }
    }
    
    func testReadyModulesAreAccessibleInDebug() throws {
        // TDD –ü–†–ò–ù–¶–ò–ü: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ß–ù–û —Ç–æ, —á—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏
        // –ï—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞–ª–∏ –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏, –æ–Ω–∏ –í–°–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
        
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –¢–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏
        let expectedReadyModules = [
            "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", 
            "–î–æ–ª–∂–Ω–æ—Å—Ç–∏", 
            "–ù–æ–≤–æ—Å—Ç–∏"
        ]
        
        // iOS –ø–æ–º–µ—â–∞–µ—Ç —Ç–∞–±—ã –ø–æ—Å–ª–µ 5-–≥–æ –≤ More
        let tabCount = tabBar.buttons.count
        print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤: \(tabCount)")
        
        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–æ–≤ + –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        let expectedMinimumTabs = 5 + expectedReadyModules.count
        XCTAssertGreaterThanOrEqual(tabCount, expectedMinimumTabs, 
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º \(expectedMinimumTabs) —Ç–∞–±–æ–≤ (5 –æ—Å–Ω–æ–≤–Ω—ã—Ö + \(expectedReadyModules.count) –≥–æ—Ç–æ–≤—ã—Ö)")
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å More —Ç–∞–±, –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤ –Ω–µ–º
        let moreTab = tabBar.buttons["More"]
        XCTAssertTrue(moreTab.exists, "More —Ç–∞–± –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π")
        
        moreTab.tap()
        
        let moreTable = app.tables.firstMatch
        XCTAssertTrue(moreTable.waitForExistence(timeout: 3), 
            "–°–ø–∏—Å–æ–∫ More –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è")
        
        // TDD: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–´–ô —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        for moduleName in expectedReadyModules {
            let moduleCell = moreTable.cells.containing(.staticText, identifier: moduleName).firstMatch
            
            XCTAssertTrue(moduleCell.exists, 
                "üö® TDD FAILURE: –ú–æ–¥—É–ª—å '\(moduleName)' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ More! " +
                "–ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç - –∏—Å–ø—Ä–∞–≤—å—Ç–µ Feature Registry, –∞ –Ω–µ —Ç–µ—Å—Ç!")
            
            print("‚úÖ TDD SUCCESS: –ú–æ–¥—É–ª—å '\(moduleName)' –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
        for moduleName in expectedReadyModules {
            let moduleCell = moreTable.cells.containing(.staticText, identifier: moduleName).firstMatch
            XCTAssertTrue(moduleCell.isEnabled, 
                "–ú–æ–¥—É–ª—å '\(moduleName)' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º)")
        }
        
        print("üéØ TDD VALIDATION: –í—Å–µ \(expectedReadyModules.count) –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    }
    
    func testNavigationToEachModule() throws {
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é
        let modules = [
            ("–ö—É—Ä—Å—ã", "–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"), // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ("–¢–µ—Å—Ç—ã", "–¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è"), // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        ]
        
        for (tabName, expectedTitle) in modules {
            let tab = tabBar.buttons[tabName]
            if tab.exists {
                tab.tap()
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                sleep(1)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                let navBar = app.navigationBars.firstMatch
                XCTAssertTrue(navBar.waitForExistence(timeout: 3), 
                    "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '\(tabName)' –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ç–∞–±—É
                tabBar.buttons.firstMatch.tap()
            }
        }
    }
    
    func testAdminModeToggle() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –ò–¥–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
        let profileTab = tabBar.buttons["–ü—Ä–æ—Ñ–∏–ª—å"]
        if profileTab.exists {
            profileTab.tap()
        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ More
            let moreTab = tabBar.buttons["More"]
            moreTab.tap()
            
            let profileCell = app.tables.cells.containing(.staticText, identifier: "–ü—Ä–æ—Ñ–∏–ª—å").firstMatch
            if profileCell.exists {
                profileCell.tap()
            }
        }
        
        // –í –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let settingsButton = app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        if settingsButton.waitForExistence(timeout: 3) {
            settingsButton.tap()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
            let adminSection = app.staticTexts["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"]
            print("üîç –°–µ–∫—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: \(adminSection.exists ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")")
        }
    }
    
    func testFeatureTogglesInAdminMode() throws {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Feature Registry –±–µ–∑ Debug —Ç–∞–±–∞
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Feature Registry –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é –º–æ–¥—É–ª–µ–π
        // –î–ª—è —ç—Ç–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ç–∞–±–æ–≤
        let initialTabCount = tabBar.buttons.count
        print("üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤: \(initialTabCount)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª–∏ –∏–∑ Feature Registry –¥–æ—Å—Ç—É–ø–Ω—ã
        XCTAssertGreaterThanOrEqual(initialTabCount, 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–æ–≤")
    }
    
    func testModuleIntegrationStatus() throws {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤
        let tabCount = tabBar.buttons.count
        print("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤: \(tabCount)")
        
        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 —Ç–∞–±–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏)
        XCTAssertGreaterThanOrEqual(tabCount, 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Ç–∞–±–æ–≤")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ More –¥–ª—è –º–æ–¥—É–ª–µ–π —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
        if tabCount >= 5 {
            let moreTab = tabBar.buttons["More"]
            XCTAssertTrue(moreTab.exists, "–ü—Ä–∏ 5+ —Ç–∞–±–∞—Ö –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è More")
        }
    }
} 
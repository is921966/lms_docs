//
//  FeatureRegistryIntegrationTests.swift
//  LMSUITests
//
//  Created on 29/06/2025.
//

import XCTest

final class FeatureRegistryIntegrationTests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI-Testing"]
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    func testAllMainModulesAreAccessible() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–∞–±–∞—Ö
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5), "Tab bar –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω")
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±—ã:")
        for button in tabBar.buttons.allElementsBoundByIndex {
            if button.exists {
                print("  - \(button.label)")
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã
        let expectedTabs = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–ö—É—Ä—Å—ã", 
            "–¢–µ—Å—Ç—ã",
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "More"  // –í iOS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è More –∫–æ–≥–¥–∞ —Ç–∞–±–æ–≤ –±–æ–ª—å—à–µ 5
        ]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤
        for tabName in expectedTabs {
            let tab = tabBar.buttons[tabName]
            if !tab.exists {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                let predicate = NSPredicate(format: "label CONTAINS[c] %@", tabName)
                let matchingTab = tabBar.buttons.matching(predicate).firstMatch
                XCTAssertTrue(matchingTab.exists, "–¢–∞–± '\(tabName)' –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ More –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        let moreTab = tabBar.buttons["More"]
        if moreTab.exists {
            moreTab.tap()
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ More
            let moreTable = app.tables.firstMatch
            XCTAssertTrue(moreTable.waitForExistence(timeout: 2), "–°–ø–∏—Å–æ–∫ More –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π –≤ More
            let modulesInMore = ["–ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–ü—Ä–æ—Ñ–∏–ª—å"]
            for moduleName in modulesInMore {
                let cell = moreTable.cells.containing(.staticText, identifier: moduleName).firstMatch
                print("üîç –ò—â–µ–º –≤ More: \(moduleName) - \(cell.exists ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω")")
            }
        }
    }
    
    func testReadyModulesAreAccessibleInDebug() throws {
        // –í DEBUG —Ä–µ–∂–∏–º–µ –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ More
        #if DEBUG
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // iOS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—â–∞–µ—Ç —Ç–∞–±—ã –ø–æ—Å–ª–µ 5-–≥–æ –≤ More
        // –ü–æ—Å–∫–æ–ª—å–∫—É –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã, –æ–±—â–µ–µ —á–∏—Å–ª–æ —Ç–∞–±–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 5
        let tabCount = tabBar.buttons.count
        print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤: \(tabCount)")
        
        // –í DEBUG —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–± Debug
        let debugTab = tabBar.buttons["Debug"]
        XCTAssertTrue(debugTab.exists, "–í DEBUG —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–± Debug")
        #endif
    }
    
    func testNavigationToEachModule() throws {
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é
        let modules = [
            ("–ö—É—Ä—Å—ã", "–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"), // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ("–¢–µ—Å—Ç—ã", "–¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è"), // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        ]
        
        for (tabName, expectedTitle) in modules {
            let tab = tabBar.buttons[tabName]
            if tab.exists {
                tab.tap()
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                sleep(1)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                let navBar = app.navigationBars.firstMatch
                XCTAssertTrue(navBar.waitForExistence(timeout: 3), 
                    "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '\(tabName)' –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ç–∞–±—É
                tabBar.buttons.firstMatch.tap()
            }
        }
    }
    
    func testAdminModeToggle() throws {
        #if DEBUG
        // –í DEBUG —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Debug —Ç–∞–±
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        let debugTab = tabBar.buttons["Debug"]
        XCTAssertTrue(debugTab.exists, "Debug —Ç–∞–± –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ DEBUG —Ä–µ–∂–∏–º–µ")
        debugTab.tap()
        
        // –í–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º
        let adminSwitch = app.switches["Admin Mode"]
        XCTAssertTrue(adminSwitch.waitForExistence(timeout: 3), 
            "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Admin Mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ Debug –º–µ–Ω—é")
        
        // –í–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω
        if adminSwitch.value as? String == "0" {
            adminSwitch.tap()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∞ (–∫–æ—Ä–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º ADMIN)
        let adminIndicator = app.staticTexts["ADMIN"]
        XCTAssertTrue(adminIndicator.waitForExistence(timeout: 3),
            "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
        #else
        // –í –Ω–µ-DEBUG —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        throw XCTSkip("Admin mode –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ DEBUG")
        #endif
    }
    
    func testFeatureTogglesInAdminMode() throws {
        #if DEBUG
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Debug —Ç–∞–±
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        let debugTab = tabBar.buttons["Debug"]
        debugTab.tap()
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Feature Flags
        let featureFlagsCell = app.cells.containing(.staticText, identifier: "Feature Flags").firstMatch
        XCTAssertTrue(featureFlagsCell.waitForExistence(timeout: 3),
            "Feature Flags –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Debug –º–µ–Ω—é")
        featureFlagsCell.tap()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–¥—É–ª–µ–π
        let moduleNames = [
            "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
            "–î–æ–ª–∂–Ω–æ—Å—Ç–∏",
            "–ù–æ–≤–æ—Å—Ç–∏"
        ]
        
        for moduleName in moduleNames {
            let moduleToggle = app.switches.containing(.staticText, identifier: moduleName).firstMatch
            XCTAssertTrue(moduleToggle.exists, 
                "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –º–æ–¥—É–ª—è '\(moduleName)' –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
        }
        #else
        throw XCTSkip("Feature toggles –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ DEBUG")
        #endif
    }
    
    func testModuleIntegrationStatus() throws {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤
        let tabCount = tabBar.buttons.count
        print("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤: \(tabCount)")
        
        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 —Ç–∞–±–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏)
        XCTAssertGreaterThanOrEqual(tabCount, 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Ç–∞–±–æ–≤")
        
        #if DEBUG
        // –í DEBUG —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–± Debug
        XCTAssertGreaterThanOrEqual(tabCount, 6, "–í DEBUG —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Ç–∞–±–æ–≤")
        #endif
    }
} 
import XCTest

/// UI —Ç–µ—Å—Ç—ã –¥–ª—è Cmi5 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
/// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ TESTING_SCENARIOS_CMI5.md
class Cmi5UITests: UITestBase {
    
    // MARK: - Setup
    
    override func setUpWithError() throws {
        try super.setUpWithError()
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        login(as: .student)
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ Cmi5 –ø–∞–∫–µ—Ç–∞
    
    func testScenario1_BasicCmi5Launch() throws {
        // 1. –ù–∞–π—Ç–∏ –∫—É—Ä—Å —Å Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        app.tabBars.buttons["–ö—É—Ä—Å—ã"].tap()
        waitForElement(app.tables[AccessibilityIdentifiers.Courses.coursesList])
        
        // –ò—â–µ–º –∫—É—Ä—Å —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        let predicate = NSPredicate(format: "label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π' OR label CONTAINS[c] 'Cmi5'")
        let cmi5Course = app.tables[AccessibilityIdentifiers.Courses.coursesList].cells.matching(predicate).firstMatch
        
        guard cmi5Course.exists else {
            XCTFail("–ù–µ –Ω–∞–π–¥–µ–Ω –∫—É—Ä—Å —Å Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å.")
            return
        }
        
        cmi5Course.tap()
        
        // 2. –ü–µ—Ä–µ–π—Ç–∏ –∫ Cmi5 —É—Ä–æ–∫—É
        waitForElement(app.scrollViews.firstMatch)
        
        // –ò—â–µ–º —É—Ä–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∫—É–±–∞ –∏–ª–∏ –º–µ—Ç–∫–æ–π "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π"
        let lessonPredicate = NSPredicate(format: "label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫' OR label CONTAINS[c] 'üé≤'")
        let cmi5Lesson = app.scrollViews.descendants(matching: .button).matching(lessonPredicate).firstMatch
        
        if !cmi5Lesson.exists {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ —è—á–µ–π–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
            let cmi5LessonCell = app.tables.cells.matching(lessonPredicate).firstMatch
            if cmi5LessonCell.exists {
                cmi5LessonCell.tap()
            } else {
                XCTFail("–ù–µ –Ω–∞–π–¥–µ–Ω Cmi5 —É—Ä–æ–∫ –≤ –∫—É—Ä—Å–µ")
                return
            }
        } else {
            cmi5Lesson.tap()
        }
        
        // 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å Cmi5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
        waitForElement(startButton, timeout: 10)
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        takeScreenshot(name: "Cmi5_Before_Launch")
        
        startButton.tap()
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É Cmi5 Player
        // Player –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        waitForElement(app.webViews.firstMatch, timeout: 10)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        XCTAssertTrue(app.webViews.firstMatch.exists, "Cmi5 Player –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
        
        takeScreenshot(name: "Cmi5_Player_Loaded")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 5 —Å–µ–∫—É–Ω–¥)
        let loadTime = measureTime {
            _ = app.webViews.firstMatch.waitForExistence(timeout: 5)
        }
        XCTAssertLessThan(loadTime, 5.0, "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥")
        
        // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        sleep(3)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        let closeButton = app.buttons["xmark.circle.fill"]
        if closeButton.exists {
            closeButton.tap()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            waitForElement(app.staticTexts.matching(NSPredicate(format: "label CONTAINS[c] '–ø—Ä–æ–≥—Ä–µ—Å—Å'")), timeout: 5)
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
    
    func testScenario2_OfflineMode() throws {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø–æ–ª–µ—Ç–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Settings app
        
        // 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å —Å Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        navigateToCmi5Course()
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        let offlineIndicator = app.otherElements["offlineIndicator"]
        
        // 3. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç
        if let cmi5Lesson = findCmi5Lesson() {
            cmi5Lesson.tap()
            
            let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
            if startButton.exists {
                startButton.tap()
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
                let offlineAlert = app.alerts["–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏"]
                if offlineAlert.exists {
                    XCTAssertTrue(offlineAlert.staticTexts["–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"].exists)
                    offlineAlert.buttons["OK"].tap()
                } else {
                    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
                    waitForElement(app.webViews.firstMatch, timeout: 10)
                    takeScreenshot(name: "Cmi5_Offline_Cached_Content")
                }
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    
    func testScenario3_InterruptionHandling() throws {
        // 1. –ó–∞–ø—É—Å–∫–∞–µ–º Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç
        navigateToCmi5Course()
        if let lesson = findCmi5Lesson() {
            lesson.tap()
            app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"].tap()
            
            waitForElement(app.webViews.firstMatch, timeout: 10)
            
            // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            XCUIDevice.shared.press(.home)
            sleep(2)
            
            // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app.activate()
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            XCTAssertTrue(app.webViews.firstMatch.exists, "Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ç–µ—Ä—è–Ω –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            
            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            let closeButton = app.buttons["xmark.circle.fill"]
            if closeButton.exists {
                closeButton.tap()
            }
            
            // –°–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —É—Ä–æ–∫
            if let lesson = findCmi5Lesson() {
                lesson.tap()
                
                // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                let progressText = app.staticTexts.matching(NSPredicate(format: "label CONTAINS[c] '–ø—Ä–æ–≥—Ä–µ—Å—Å' OR label CONTAINS[c] '–ø—Ä–æ–π–¥–µ–Ω–æ'")).firstMatch
                XCTAssertTrue(progressText.exists, "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
    
    func testScenario4_AnalyticsAndReports() throws {
        // 1. –ü—Ä–æ—Ö–æ–¥–∏–º Cmi5 –∫–æ–Ω—Ç–µ–Ω—Ç
        navigateToCmi5Course()
        completeCmi5Lesson()
        
        // 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        app.tabBars.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
        waitForElement(app.scrollViews.firstMatch)
        
        // –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        let analyticsSection = app.buttons["–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        if analyticsSection.exists {
            analyticsSection.tap()
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Cmi5
            waitForElement(app.tables.firstMatch)
            
            // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            let cmi5Stats = app.staticTexts.matching(NSPredicate(format: "label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π' OR label CONTAINS[c] 'Cmi5'")).firstMatch
            XCTAssertTrue(cmi5Stats.exists, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Cmi5 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            
            takeScreenshot(name: "Cmi5_Analytics")
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞
        logout()
        login(as: .admin)
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if let analyticsTab = app.tabBars.buttons.matching(NSPredicate(format: "label CONTAINS[c] '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞'")).firstMatch {
            analyticsTab.tap()
            
            // –ò—â–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ Cmi5
            waitForElement(app.tables.firstMatch)
            
            let cmi5Report = app.cells.matching(NSPredicate(format: "label CONTAINS[c] 'Cmi5' OR label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'")).firstMatch
            if cmi5Report.exists {
                cmi5Report.tap()
                takeScreenshot(name: "Cmi5_Admin_Reports")
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    
    func testScenario5_InvalidContent() throws {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π Cmi5 –ø–∞–∫–µ—Ç
        
        navigateToCmi5Course()
        
        // –ò—â–µ–º —É—Ä–æ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π" –∏–ª–∏ "—Ç–µ—Å—Ç –æ—à–∏–±–∫–∏"
        let errorLesson = app.cells.matching(NSPredicate(format: "label CONTAINS[c] '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω' OR label CONTAINS[c] '–æ—à–∏–±–∫'")).firstMatch
        
        if errorLesson.exists {
            errorLesson.tap()
            
            let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
            if startButton.exists {
                startButton.tap()
                
                // –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                let errorAlert = app.alerts.firstMatch
                waitForElement(errorAlert, timeout: 10)
                
                XCTAssertTrue(errorAlert.exists, "–ù–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                takeScreenshot(name: "Cmi5_Error_Alert")
                
                errorAlert.buttons["OK"].tap()
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 6: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ AU
    
    func testScenario6_MultipleAUs() throws {
        navigateToCmi5Course()
        
        // –ò—â–µ–º –∫—É—Ä—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ AU
        let multiAUCourse = app.cells.matching(NSPredicate(format: "label CONTAINS[c] '–Ω–µ—Å–∫–æ–ª—å–∫–æ' OR label CONTAINS[c] 'multi'")).firstMatch
        
        if multiAUCourse.exists {
            multiAUCourse.tap()
            
            waitForElement(app.tables.firstMatch)
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            let interactiveLessons = app.cells.matching(NSPredicate(format: "label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π'"))
            let count = interactiveLessons.count
            
            XCTAssertGreaterThan(count, 1, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ AU –≤ –ø–∞–∫–µ—Ç–µ")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É AU
            for i in 0..<min(count, 3) {
                let lesson = interactiveLessons.element(boundBy: i)
                lesson.tap()
                
                let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
                if startButton.exists {
                    startButton.tap()
                    
                    waitForElement(app.webViews.firstMatch, timeout: 10)
                    sleep(2)
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    if let closeButton = app.buttons["xmark.circle.fill"] {
                        closeButton.tap()
                    } else {
                        app.swipeDown()
                    }
                    
                    waitForElement(app.tables.firstMatch)
                }
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 7: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    func testScenario7_Performance() throws {
        measure {
            navigateToCmi5Course()
            
            if let lesson = findCmi5Lesson() {
                lesson.tap()
                
                let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
                if startButton.exists {
                    startButton.tap()
                    
                    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                    _ = app.webViews.firstMatch.waitForExistence(timeout: 10)
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º
                    if let closeButton = app.buttons["xmark.circle.fill"] {
                        closeButton.tap()
                    }
                }
            }
        }
    }
    
    // MARK: - –°—Ü–µ–Ω–∞—Ä–∏–π 8: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    
    func testScenario8_EdgeCases() throws {
        // –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ
        navigateToCmi5Course()
        
        if let lesson = findCmi5Lesson() {
            for _ in 0..<3 {
                lesson.tap()
                
                let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
                if startButton.exists {
                    startButton.tap()
                    
                    // –°—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º
                    if let closeButton = app.buttons["xmark.circle.fill"] {
                        closeButton.tap()
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        let alert = app.alerts["–ü—Ä–µ—Ä–≤–∞—Ç—å —É—Ä–æ–∫?"]
                        if alert.exists {
                            alert.buttons["–î–∞"].tap()
                        }
                    }
                }
                
                waitForElement(app.tables.firstMatch)
            }
        }
        
        // –¢–µ—Å—Ç 2: –ü–æ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞
        if let lesson = findCmi5Lesson() {
            lesson.tap()
            app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"].tap()
            
            waitForElement(app.webViews.firstMatch)
            
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω
            XCUIDevice.shared.orientation = .landscapeLeft
            sleep(1)
            XCUIDevice.shared.orientation = .portrait
            sleep(1)
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
            XCTAssertTrue(app.webViews.firstMatch.exists, "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ç–µ—Ä—è–Ω –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
        }
    }
    
    // MARK: - Helper Methods
    
    private func navigateToCmi5Course() {
        app.tabBars.buttons["–ö—É—Ä—Å—ã"].tap()
        waitForElement(app.tables[AccessibilityIdentifiers.Courses.coursesList])
    }
    
    private func findCmi5Lesson() -> XCUIElement? {
        let predicate = NSPredicate(format: "label CONTAINS[c] '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π' OR label CONTAINS[c] 'üé≤'")
        let lesson = app.cells.matching(predicate).firstMatch
        return lesson.exists ? lesson : nil
    }
    
    private func completeCmi5Lesson() {
        if let lesson = findCmi5Lesson() {
            lesson.tap()
            
            let startButton = app.buttons["–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫"]
            if startButton.exists {
                startButton.tap()
                
                waitForElement(app.webViews.firstMatch, timeout: 10)
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                sleep(5)
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                if let closeButton = app.buttons["xmark.circle.fill"] {
                    closeButton.tap()
                    
                    let saveAlert = app.alerts.firstMatch
                    if saveAlert.exists {
                        saveAlert.buttons["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"].tap()
                    }
                }
            }
        }
    }
    
    private func measureTime(block: () -> Void) -> TimeInterval {
        let start = Date()
        block()
        return Date().timeIntervalSince(start)
    }
} 
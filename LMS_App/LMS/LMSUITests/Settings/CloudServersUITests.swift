import XCTest

final class CloudServersUITests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI-Testing"]
        app.launch()
    }
    
    func test_developerTools_accessible() throws {
        // Given - logged in as admin
        performAdminLogin()
        
        // When - navigate to settings
        app.tabBars.buttons["–ï—â—ë"].tap()
        wait(for: app.staticTexts["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists)
        app.staticTexts["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
        
        // Then - Developer Tools section should exist
        #if DEBUG
        XCTAssertTrue(app.staticTexts["üõ† Developer Tools"].exists)
        #endif
    }
    
    func test_cloudServers_navigation() throws {
        // Given - in settings
        navigateToDeveloperTools()
        
        // When - tap Cloud Servers
        app.cells["Cloud Servers"].tap()
        
        // Then - should see Cloud Servers view
        wait(for: app.navigationBars["Cloud Servers"].exists)
        XCTAssertTrue(app.segmentedControls.firstMatch.exists)
        XCTAssertTrue(app.staticTexts["üìä Log Dashboard"].exists)
        XCTAssertTrue(app.staticTexts["üí¨ Feedback Dashboard"].exists)
    }
    
    func test_serverSwitch_works() throws {
        // Given - in Cloud Servers view
        navigateToDeveloperTools()
        app.cells["Cloud Servers"].tap()
        wait(for: app.segmentedControls.firstMatch.exists)
        
        // When - switch between servers
        let segmentedControl = app.segmentedControls.firstMatch
        segmentedControl.buttons["üí¨ Feedback Dashboard"].tap()
        
        // Then - should see feedback server info
        wait(for: app.staticTexts["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"].exists)
    }
    
    func test_serverStatus_navigation() throws {
        // Given - in settings
        navigateToDeveloperTools()
        
        // When - tap Server Status
        app.cells["Server Status"].tap()
        
        // Then - should see Server Status view
        wait(for: app.navigationBars["Server Status"].exists)
        XCTAssertTrue(app.staticTexts["Server Health Check"].exists)
        XCTAssertTrue(app.staticTexts["üìä Log Server"].exists)
        XCTAssertTrue(app.staticTexts["üí¨ Feedback Server"].exists)
    }
    
    func test_openInSafari_menu() throws {
        // Given - in Cloud Servers view
        navigateToDeveloperTools()
        app.cells["Cloud Servers"].tap()
        wait(for: app.buttons["ellipsis.circle"].exists)
        
        // When - tap menu
        app.buttons["ellipsis.circle"].tap()
        
        // Then - should see menu options
        wait(for: app.buttons["–û—Ç–∫—Ä—ã—Ç—å –≤ Safari"].exists)
        XCTAssertTrue(app.buttons["–û–±–Ω–æ–≤–∏—Ç—å"].exists)
        XCTAssertTrue(app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"].exists)
    }
    
    func test_serverSettings_navigation() throws {
        // Given - in Cloud Servers menu
        navigateToDeveloperTools()
        app.cells["Cloud Servers"].tap()
        wait(for: app.buttons["ellipsis.circle"].exists)
        app.buttons["ellipsis.circle"].tap()
        wait(for: app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"].exists)
        
        // When - tap settings
        app.buttons["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"].tap()
        
        // Then - should see settings sheet
        wait(for: app.navigationBars["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"].exists)
        XCTAssertTrue(app.textFields.firstMatch.exists)
        XCTAssertTrue(app.buttons["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"].exists)
        XCTAssertTrue(app.buttons["–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"].exists)
    }
    
    // MARK: - Helper Methods
    
    private func performAdminLogin() {
        if app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"].exists {
            app.buttons["–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"].tap()
            wait(for: app.tabBars.firstMatch.exists)
        }
    }
    
    private func navigateToDeveloperTools() {
        performAdminLogin()
        app.tabBars.buttons["–ï—â—ë"].tap()
        wait(for: app.staticTexts["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].exists)
        app.staticTexts["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"].tap()
        wait(for: app.tables.firstMatch.exists)
    }
    
    private func wait(for condition: Bool, timeout: TimeInterval = 5) {
        let expectation = XCTNSPredicateExpectation(
            predicate: NSPredicate(value: condition),
            object: nil
        )
        wait(for: [expectation], timeout: timeout)
    }
} 
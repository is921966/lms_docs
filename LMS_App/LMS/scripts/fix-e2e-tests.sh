#!/bin/bash

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ E2E —Ç–µ—Å—Ç–æ–≤..."
echo "============================"

# –°–æ–∑–¥–∞–µ–º helper –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ E2E test helper..."
mkdir -p LMSUITests/Helpers

cat > "LMSUITests/Helpers/E2ETestHelper.swift" << 'EOF'
import Foundation
import XCTest

/// Helper –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
extension XCTestCase {
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    func performLogin(in app: XCUIApplication, username: String = "test@example.com", password: String = "password123") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ
        if app.tabBars.firstMatch.exists {
            // –£–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
            return
        }
        
        // –ò—â–µ–º –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
        let emailField = app.textFields.firstMatch
        let passwordField = app.secureTextFields.firstMatch
        
        if emailField.exists {
            emailField.tap()
            emailField.typeText(username)
        }
        
        if passwordField.exists {
            passwordField.tap()
            passwordField.typeText(password)
        }
        
        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        let loginButton = app.buttons["–í–æ–π—Ç–∏"].exists ? app.buttons["–í–æ–π—Ç–∏"] : app.buttons["Login"]
        if loginButton.exists {
            loginButton.tap()
        }
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        XCTAssertTrue(app.tabBars.firstMatch.waitForExistence(timeout: 10))
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    func performLogout(in app: XCUIApplication) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
        if app.tabBars.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].exists {
            app.tabBars.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
        } else if app.tabBars.buttons["Profile"].exists {
            app.tabBars.buttons["Profile"].tap()
        } else if app.tabBars.buttons["–ï—â—ë"].exists {
            app.tabBars.buttons["–ï—â—ë"].tap()
            if app.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].exists {
                app.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
            }
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        let logoutButton = app.buttons["–í—ã–π—Ç–∏"].exists ? app.buttons["–í—ã–π—Ç–∏"] : app.buttons["Logout"]
        if logoutButton.exists {
            logoutButton.tap()
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if app.alerts.firstMatch.exists {
                app.alerts.buttons["–í—ã–π—Ç–∏"].tap()
            }
        }
    }
    
    /// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    func setupE2ETestData(in app: XCUIApplication) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ debug endpoints
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    func cleanupE2ETestData(in app: XCUIApplication) {
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    func verifyMainNavigation(in app: XCUIApplication) {
        XCTAssertTrue(app.tabBars.firstMatch.exists, "Tab bar should exist")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±—ã
        let expectedTabs = ["–ì–ª–∞–≤–Ω–∞—è", "–û–±—É—á–µ–Ω–∏–µ", "–ù–æ–≤–æ—Å—Ç–∏", "–ü—Ä–æ—Ñ–∏–ª—å", "Home", "Learning", "Feed", "Profile"]
        
        var foundTabs = 0
        for tab in expectedTabs {
            if app.tabBars.buttons[tab].exists {
                foundTabs += 1
            }
        }
        
        XCTAssertGreaterThanOrEqual(foundTabs, 3, "Should have at least 3 main tabs")
    }
}

/// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
struct E2ETestData {
    static let testUser = (
        email: "e2e.test@example.com",
        password: "Test123!",
        name: "E2E Test User"
    )
    
    static let testCourse = (
        title: "E2E Test Course",
        description: "Course for E2E testing",
        duration: "2 hours"
    )
    
    static let testCompetency = (
        name: "E2E Test Competency",
        level: "Beginner",
        description: "Competency for testing"
    )
}
EOF

echo "‚úÖ E2E test helper —Å–æ–∑–¥–∞–Ω"

# –û–±–Ω–æ–≤–ª—è–µ–º E2E —Ç–µ—Å—Ç—ã
echo ""
echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ E2E —Ç–µ—Å—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ E2E —Ç–µ—Å—Ç—ã
if [ -f "LMSUITests/E2E/FullFlowE2ETests.swift" ]; then
    echo "‚úÖ E2E —Ç–µ—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
else
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö E2E —Ç–µ—Å—Ç–æ–≤..."
    mkdir -p LMSUITests/E2E
    
    cat > "LMSUITests/E2E/FullFlowE2ETests.swift" << 'EOF'
//
//  FullFlowE2ETests.swift
//  LMSUITests
//
//  End-to-End —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
//

import XCTest

class FullFlowE2ETests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launchArguments = ["UI_TESTING", "E2E_TESTING"]
        app.launch()
    }
    
    override func tearDownWithError() throws {
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        cleanupE2ETestData(in: app)
    }
    
    // MARK: - Full User Journey Tests
    
    func testCompleteUserJourney() {
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        performLogin(in: app)
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        verifyMainNavigation(in: app)
        
        // 3. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±—É—á–µ–Ω–∏–µ
        app.tabBars.buttons["–û–±—É—á–µ–Ω–∏–µ"].tap()
        XCTAssertTrue(app.navigationBars["–û–±—É—á–µ–Ω–∏–µ"].waitForExistence(timeout: 5))
        
        // 4. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞
        if app.collectionViews.cells.count > 0 {
            app.collectionViews.cells.firstMatch.tap()
            XCTAssertTrue(app.navigationBars.buttons.firstMatch.waitForExistence(timeout: 5))
            app.navigationBars.buttons.firstMatch.tap()
        }
        
        // 5. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        app.tabBars.buttons["–ü—Ä–æ—Ñ–∏–ª—å"].tap()
        XCTAssertTrue(app.staticTexts["E2E Test User"].exists || 
                     app.staticTexts["test@example.com"].exists)
        
        // 6. –í—ã—Ö–æ–¥
        performLogout(in: app)
    }
    
    func testCourseEnrollmentFlow() {
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        performLogin(in: app)
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫—É—Ä—Å–∞–º
        app.tabBars.buttons["–û–±—É—á–µ–Ω–∏–µ"].tap()
        
        // –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
        let courseCell = app.collectionViews.cells.firstMatch
        guard courseCell.waitForExistence(timeout: 5) else {
            XCTSkip("No courses available for testing")
            return
        }
        
        courseCell.tap()
        
        // –ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å
        if app.buttons["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"].exists {
            app.buttons["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"].tap()
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
            XCTAssertTrue(
                app.buttons["–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"].waitForExistence(timeout: 5) ||
                app.buttons["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"].waitForExistence(timeout: 5)
            )
        }
    }
    
    func testCompetencyProgressFlow() {
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        performLogin(in: app)
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
        if app.tabBars.buttons["–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"].exists {
            app.tabBars.buttons["–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"].tap()
        } else {
            app.tabBars.buttons["–ï—â—ë"].tap()
            app.buttons["–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"].tap()
        }
        
        // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        let competencyCell = app.collectionViews.cells.firstMatch
        if competencyCell.waitForExistence(timeout: 5) {
            competencyCell.tap()
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π
            XCTAssertTrue(app.staticTexts["–£—Ä–æ–≤–µ–Ω—å"].exists || 
                         app.staticTexts["Level"].exists)
        }
    }
}
EOF
fi

echo ""
echo "‚úÖ E2E —Ç–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
echo ""
echo "üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
echo "  1. –°–æ–∑–¥–∞–Ω E2ETestHelper —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"
echo "  2. –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–≤—ã—Ö–æ–¥–∞"
echo "  3. –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ E2ETestData"
echo "  4. –û–±–Ω–æ–≤–ª–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ E2E —Ç–µ—Å—Ç—ã" 
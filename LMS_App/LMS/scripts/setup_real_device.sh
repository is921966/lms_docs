#!/bin/bash

echo "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º iPhone"
echo "================================================"
echo ""

# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å Mac
IP_ADDRESS=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | head -1)

if [ -z "$IP_ADDRESS" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –∞–¥—Ä–µ—Å"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"
    exit 1
fi

echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω IP –∞–¥—Ä–µ—Å: $IP_ADDRESS"
echo ""

# –û–±–Ω–æ–≤–ª—è–µ–º ServerFeedbackService.swift
SERVICE_FILE="../LMS/Services/Feedback/ServerFeedbackService.swift"

echo "üìù –û–±–Ω–æ–≤–ª—è–µ–º ServerFeedbackService.swift..."

cat > "$SERVICE_FILE" << EOF
import Foundation

class ServerFeedbackService: FeedbackServiceProtocol {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    private let serverURL = "http://$IP_ADDRESS:5001/api/v1/feedback"
    
    // –î–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
    // private let serverURL = "http://localhost:5001/api/v1/feedback"
    
    private let session = URLSession.shared
    private let queue = DispatchQueue(label: "feedback.queue")
    
    func submitFeedback(_ feedback: FeedbackModel, completion: @escaping (Result<String, Error>) -> Void) {
        guard let url = URL(string: serverURL) else {
            completion(.failure(FeedbackError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        do {
            let encoder = JSONEncoder()
            encoder.dateEncodingStrategy = .iso8601
            request.httpBody = try encoder.encode(feedback)
            
            session.dataTask(with: request) { data, response, error in
                if let error = error {
                    completion(.failure(error))
                    return
                }
                
                guard let httpResponse = response as? HTTPURLResponse else {
                    completion(.failure(FeedbackError.invalidResponse))
                    return
                }
                
                if httpResponse.statusCode == 201 {
                    if let data = data,
                       let response = try? JSONDecoder().decode(FeedbackResponse.self, from: data),
                       let githubIssue = response.github_issue {
                        completion(.success(githubIssue))
                    } else {
                        completion(.success("Feedback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
                    }
                } else {
                    completion(.failure(FeedbackError.serverError(httpResponse.statusCode)))
                }
            }.resume()
        } catch {
            completion(.failure(error))
        }
    }
}

// Response model
private struct FeedbackResponse: Codable {
    let status: String
    let id: String
    let message: String
    let github_issue: String?
}

// Error types
enum FeedbackError: LocalizedError {
    case invalidURL
    case invalidResponse
    case serverError(Int)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "Invalid server URL"
        case .invalidResponse:
            return "Invalid server response"
        case .serverError(let code):
            return "Server error: HTTP \(code)"
        }
    }
}
EOF

echo "‚úÖ ServerFeedbackService.swift –æ–±–Ω–æ–≤–ª–µ–Ω"
echo ""

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
cat > real_device_info.txt << EOF
üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
=====================================

IP –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Mac: $IP_ADDRESS
–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: 5001

URL –¥–ª—è feedback: http://$IP_ADDRESS:5001/api/v1/feedback
Web dashboard: http://$IP_ADDRESS:5001

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ iPhone –∏ Mac –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ Wi-Fi
2. Feedback server –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω (./quick_start.sh)
3. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Xcode –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
4. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ iPhone
5. –í—Å—Ç—Ä—è—Ö–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ feedback

–î–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: $(date)
EOF

echo "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_device_info.txt"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ feedback server
if curl -s -o /dev/null -w "%{http_code}" http://localhost:5001 | grep -q "200"; then
    echo "‚úÖ Feedback server —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ö†Ô∏è  Feedback server –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: ./quick_start.sh <–≤–∞—à_github_token>"
fi

echo ""
echo "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ Xcode"
echo "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à iPhone –≤ –∫–∞—á–µ—Å—Ç–≤–µ destination"
echo "3. –ù–∞–∂–º–∏—Ç–µ Run (Cmd+R)"
echo "4. –ù–∞ iPhone –≤—Å—Ç—Ä—è—Ö–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback"
echo ""
echo "Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$IP_ADDRESS:5001" 
#!/bin/bash

echo "üì± Feed Channels Cloud Test"
echo "==========================="
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–±–ª–∞—á–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –ª–æ–≥–æ–≤"
echo ""

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Cloud server URL
CLOUD_LOG_SERVER="https://lms-log-server-production.up.railway.app"

# Function to check cloud logs
check_cloud_logs() {
    local search_term=$1
    echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –¥–ª—è: $search_term${NC}"
    
    local response=$(curl -s "${CLOUD_LOG_SERVER}/api/logs?search=${search_term}")
    local count=$(echo "$response" | jq -r '.logs | length' 2>/dev/null || echo "0")
    
    if [ "$count" -gt 0 ]; then
        echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ $count –∑–∞–ø–∏—Å–µ–π${NC}"
        echo "$response" | jq -r '.logs[:3] | .[] | "\(.timestamp) - \(.event // .message)"' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"
    else
        echo -e "${RED}‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
    echo ""
}

# Step 1: Kill and restart app
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
xcrun simctl terminate "iPhone 16 Pro" ru.tsum.lms.igor 2>/dev/null
sleep 2
xcrun simctl launch "iPhone 16 Pro" ru.tsum.lms.igor
sleep 5

# Step 2: Take initial screenshot
echo "üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞..."
xcrun simctl io "iPhone 16 Pro" screenshot /tmp/feed_test_main.png

# Step 3: Check initial logs
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏..."
check_cloud_logs "TelegramFeedView"
check_cloud_logs "MockFeedService"
check_cloud_logs "loadReleaseNotes"

# Step 4: Navigate to Feed via UI test
echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ Feed..."
cd /Users/ishirokov/lms_docs/LMS_App/LMS

# Create a minimal UI test that navigates to Feed
cat > LMSUITests/FeedCloudTestNavigation.swift << 'EOF'
import XCTest

final class FeedCloudTestNavigation: XCTestCase {
    let app = XCUIApplication()
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app.launch()
    }
    
    func test_navigateToFeedAndWait() throws {
        // Wait for tab bar
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        // Tap Feed tab
        let feedTab = tabBar.buttons["–ù–æ–≤–æ—Å—Ç–∏"]
        XCTAssertTrue(feedTab.exists)
        feedTab.tap()
        
        // Wait for Feed screen
        sleep(3)
        
        // Take screenshot
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Feed_Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
        
        // Keep app open for a bit to let logs upload
        sleep(10)
    }
}
EOF

# Run the test
echo "–ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç..."
xcodebuild test \
    -scheme LMS \
    -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
    -only-testing:LMSUITests/FeedCloudTestNavigation/test_navigateToFeedAndWait \
    2>&1 | grep -E "(Test Case|Passed|Failed)" || true

# Step 5: Wait for logs to upload (30 seconds cycle)
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤ (35 —Å–µ–∫—É–Ω–¥)..."
sleep 35

# Step 6: Check logs after navigation
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏..."
check_cloud_logs "TelegramFeedView appeared"
check_cloud_logs "Channel in Feed"
check_cloud_logs "=== Starting"
check_cloud_logs "Found.*files"

# Step 7: Get all recent logs
echo ""
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:"
curl -s "${CLOUD_LOG_SERVER}/api/logs" | jq -r '.logs[:10] | .[] | "\(.timestamp | .[11:19]) [\(.category)] \(.event // .message // "unknown")"' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"

# Step 8: Check specific categories
echo ""
echo "üìä –õ–æ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"
echo -e "${YELLOW}Data logs:${NC}"
curl -s "${CLOUD_LOG_SERVER}/api/logs?category=data" | jq -r '.logs | length' 2>/dev/null | xargs -I {} echo "–ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π"

echo -e "${YELLOW}UI logs:${NC}"
curl -s "${CLOUD_LOG_SERVER}/api/logs?category=ui" | jq -r '.logs | length' 2>/dev/null | xargs -I {} echo "–ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π"

# Step 9: Save full log dump
echo ""
echo "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –¥–∞–º–ø –ª–æ–≥–æ–≤..."
curl -s "${CLOUD_LOG_SERVER}/api/logs" > /tmp/feed_cloud_logs_dump.json
echo "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ /tmp/feed_cloud_logs_dump.json"

# Final summary
echo ""
echo "========== –ò–¢–û–ì–ò –¢–ï–°–¢–ê =========="
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
echo "‚úÖ UI —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
echo "‚úÖ –õ–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
echo "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: /tmp/feed_test_main.png"
echo "üìã –î–∞–º–ø –ª–æ–≥–æ–≤: /tmp/feed_cloud_logs_dump.json"
echo "üîó –û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: ${CLOUD_LOG_SERVER}"
echo "=================================" 
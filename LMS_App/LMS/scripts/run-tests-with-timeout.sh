#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UI —Ç–µ—Å—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
# –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TIMEOUT=300  # 5 –º–∏–Ω—É—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤)
TIMEOUT=${1:-$DEFAULT_TIMEOUT}
TEST_TARGET=${2:-"LMSUITests"}

echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º..."
echo "‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${TIMEOUT} —Å–µ–∫—É–Ω–¥"
echo "üéØ –¶–µ–ª—å: ${TEST_TARGET}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
cleanup() {
    echo -e "\n${YELLOW}‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...${NC}"
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    pkill -f "xcodebuild.*${TEST_TARGET}" 2>/dev/null || true
    pkill -f "xctest" 2>/dev/null || true
    pkill -f "SimulatorTrampoline" 2>/dev/null || true
    exit 1
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup INT TERM

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/.."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "LMS.xcodeproj/project.pbxproj" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: LMS.xcodeproj –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
mkdir -p TestResults

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
RESULT_BUNDLE="TestResults/${TEST_TARGET}_${TIMESTAMP}.xcresult"
LOG_FILE="TestResults/${TEST_TARGET}_${TIMESTAMP}.log"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
run_tests_with_timeout() {
    local test_command="xcodebuild test \
        -scheme LMS \
        -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
        -resultBundlePath ${RESULT_BUNDLE} \
        -only-testing:${TEST_TARGET}"
    
    echo "üìã –ö–æ–º–∞–Ω–¥–∞: ${test_command}"
    echo ""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–æ–Ω–µ
    ${test_command} 2>&1 | tee "${LOG_FILE}" &
    local test_pid=$!
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
    local elapsed=0
    while kill -0 $test_pid 2>/dev/null; do
        if [ $elapsed -ge $TIMEOUT ]; then
            echo -e "\n${RED}‚ùå –¢–∞–π–º–∞—É—Ç! –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –±–æ–ª–µ–µ ${TIMEOUT} —Å–µ–∫—É–Ω–¥${NC}"
            
            # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            kill -TERM $test_pid 2>/dev/null || true
            sleep 2
            kill -KILL $test_pid 2>/dev/null || true
            
            # –£–±–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            pkill -f "xcodebuild.*${TEST_TARGET}" 2>/dev/null || true
            pkill -f "xctest" 2>/dev/null || true
            
            echo -e "${YELLOW}üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${LOG_FILE}${NC}"
            echo -e "${YELLOW}üìä –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: ${RESULT_BUNDLE}${NC}"
            
            return 1
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if [ $((elapsed % 10)) -eq 0 ] && [ $elapsed -gt 0 ]; then
            echo -e "${YELLOW}‚è≥ –ü—Ä–æ—à–ª–æ ${elapsed} —Å–µ–∫—É–Ω–¥...${NC}"
        fi
        
        sleep 1
        ((elapsed++))
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait $test_pid
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "\n${GREEN}‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${elapsed} —Å–µ–∫—É–Ω–¥!${NC}"
    else
        echo -e "\n${RED}‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${exit_code})${NC}"
    fi
    
    echo -e "${YELLOW}üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${LOG_FILE}${NC}"
    echo -e "${YELLOW}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: ${RESULT_BUNDLE}${NC}"
    
    return $exit_code
}

# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
run_feature_registry_tests() {
    echo "üîß –ó–∞–ø—É—Å–∫ Feature Registry Integration Tests..."
    TEST_TARGET="LMSUITests/FeatureRegistryIntegrationTests"
    TIMEOUT=180  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤
    run_tests_with_timeout
}

run_onboarding_tests() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ Onboarding Tests..."
    TEST_TARGET="LMSUITests/OnboardingFlowUITests"
    TIMEOUT=240  # 4 –º–∏–Ω—É—Ç—ã –¥–ª—è onboarding —Ç–µ—Å—Ç–æ–≤
    run_tests_with_timeout
}

run_all_ui_tests() {
    echo "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö UI —Ç–µ—Å—Ç–æ–≤..."
    TEST_TARGET="LMSUITests"
    TIMEOUT=600  # 10 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    run_tests_with_timeout
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
if [ -z "$1" ]; then
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
    echo "1) Feature Registry Integration Tests (3 –º–∏–Ω)"
    echo "2) Onboarding Tests (4 –º–∏–Ω)"
    echo "3) –í—Å–µ UI —Ç–µ—Å—Ç—ã (10 –º–∏–Ω)"
    echo "4) –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ü–µ–ª—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"
    echo ""
    read -p "–í–∞—à –≤—ã–±–æ—Ä (1-4): " choice
    
    case $choice in
        1)
            run_feature_registry_tests
            ;;
        2)
            run_onboarding_tests
            ;;
        3)
            run_all_ui_tests
            ;;
        4)
            read -p "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, LMSUITests/SomeTest): " custom_target
            read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): " custom_timeout
            TEST_TARGET=${custom_target}
            TIMEOUT=${custom_timeout:-300}
            run_tests_with_timeout
            ;;
        *)
            echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
            exit 1
            ;;
    esac
else
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    run_tests_with_timeout
fi

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
echo ""
echo "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–µ
if [ -f "${LOG_FILE}" ]; then
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
    total_tests=$(grep -c "Test Case.*started" "${LOG_FILE}" 2>/dev/null || echo "0")
    passed_tests=$(grep -c "Test Case.*passed" "${LOG_FILE}" 2>/dev/null || echo "0")
    failed_tests=$(grep -c "Test Case.*failed" "${LOG_FILE}" 2>/dev/null || echo "0")
    
    echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total_tests}"
    echo "   ‚úÖ –ü—Ä–æ—à–ª–æ: ${passed_tests}"
    echo "   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed_tests}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if [ $failed_tests -gt 0 ]; then
        echo ""
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:"
        grep "Test Case.*failed" "${LOG_FILE}" | sed 's/^/   /'
    fi
fi

echo ""
echo "‚ú® –ì–æ—Ç–æ–≤–æ!" 
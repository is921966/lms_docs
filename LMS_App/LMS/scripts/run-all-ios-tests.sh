#!/bin/bash

# run-all-ios-tests.sh - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö iOS —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
# Sprint 28: Technical Debt & Stabilization

set -e

echo "üß™ Sprint 28: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö iOS —Ç–µ—Å—Ç–æ–≤"
echo "=================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
DERIVED_DATA_PATH="$PROJECT_DIR/DerivedData"
COVERAGE_PATH="$PROJECT_DIR/TestResults/Coverage"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
print_progress() {
    echo -e "${YELLOW}‚ñ∂ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print_progress "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
rm -rf "$DERIVED_DATA_PATH"
rm -rf "$COVERAGE_PATH"
mkdir -p "$COVERAGE_PATH"

# –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤
echo ""
echo "üìã Unit Tests"
echo "-------------"

print_progress "–ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤..."
START_TIME=$(date +%s)

if xcodebuild test \
    -scheme LMS \
    -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
    -derivedDataPath "$DERIVED_DATA_PATH" \
    -enableCodeCoverage YES \
    -quiet \
    2>&1 | tee "$COVERAGE_PATH/unit_tests_$TIMESTAMP.log"; then
    
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    print_success "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã –∑–∞ $DURATION —Å–µ–∫—É–Ω–¥"
else
    print_error "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!"
    exit 1
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
echo ""
echo "üìä Code Coverage"
echo "----------------"

print_progress "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏..."

# –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
PROFDATA=$(find "$DERIVED_DATA_PATH" -name '*.profdata' | head -n 1)
BINARY=$(find "$DERIVED_DATA_PATH" -name 'LMS.app' -path '*/Debug-iphonesimulator/*' | head -n 1)/LMS

if [ -f "$PROFDATA" ] && [ -f "$BINARY" ]; then
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    xcrun llvm-cov report \
        "$BINARY" \
        -instr-profile="$PROFDATA" \
        -ignore-filename-regex='.*Tests.*' \
        -ignore-filename-regex='.*Mock.*' \
        > "$COVERAGE_PATH/coverage_report_$TIMESTAMP.txt"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    echo ""
    echo "–ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –º–æ–¥—É–ª—è–º:"
    xcrun llvm-cov report \
        "$BINARY" \
        -instr-profile="$PROFDATA" \
        -ignore-filename-regex='.*Tests.*' \
        -ignore-filename-regex='.*Mock.*' \
        | grep -E "(Services|Models|ViewModels|Features)" | head -20
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
    print_progress "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞..."
    xcrun llvm-cov show \
        "$BINARY" \
        -instr-profile="$PROFDATA" \
        -format=html \
        -output-dir="$COVERAGE_PATH/html_$TIMESTAMP" \
        -ignore-filename-regex='.*Tests.*' \
        -ignore-filename-regex='.*Mock.*'
    
    print_success "HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $COVERAGE_PATH/html_$TIMESTAMP/index.html"
else
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è"
fi

# –ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
echo ""
echo "üñ•Ô∏è UI Tests"
echo "-----------"

if [ -d "$PROJECT_DIR/LMSUITests" ]; then
    print_progress "–ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤..."
    START_TIME=$(date +%s)
    
    if xcodebuild test \
        -scheme LMS \
        -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
        -derivedDataPath "$DERIVED_DATA_PATH" \
        -testPlan "UITests" \
        -quiet \
        2>&1 | tee "$COVERAGE_PATH/ui_tests_$TIMESTAMP.log"; then
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        print_success "UI —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã –∑–∞ $DURATION —Å–µ–∫—É–Ω–¥"
    else
        print_error "UI —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!"
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ UI —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏
    fi
else
    print_progress "UI —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "üìà –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
echo "================="

# –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=$(grep -E "Test Case .* passed|failed" "$COVERAGE_PATH/unit_tests_$TIMESTAMP.log" | wc -l | tr -d ' ')
PASSED_TESTS=$(grep -E "Test Case .* passed" "$COVERAGE_PATH/unit_tests_$TIMESTAMP.log" | wc -l | tr -d ' ')
FAILED_TESTS=$(grep -E "Test Case .* failed" "$COVERAGE_PATH/unit_tests_$TIMESTAMP.log" | wc -l | tr -d ' ')

echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED_TESTS"
echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED_TESTS"

# –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
if [ -f "$COVERAGE_PATH/coverage_report_$TIMESTAMP.txt" ]; then
    TOTAL_COVERAGE=$(tail -1 "$COVERAGE_PATH/coverage_report_$TIMESTAMP.txt" | awk '{print $(NF-1)}')
    echo ""
    echo "üìä –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: $TOTAL_COVERAGE"
fi

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
echo ""
echo "üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:"
echo "- –õ–æ–≥–∏: $COVERAGE_PATH/*_$TIMESTAMP.log"
echo "- –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: $COVERAGE_PATH/coverage_report_$TIMESTAMP.txt"
echo "- HTML –æ—Ç—á–µ—Ç: $COVERAGE_PATH/html_$TIMESTAMP/index.html"

# –û—Ç–∫—Ä—ã—Ç—å HTML –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if [ -d "$COVERAGE_PATH/html_$TIMESTAMP" ]; then
    echo ""
    read -p "–û—Ç–∫—Ä—ã—Ç—å HTML –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        open "$COVERAGE_PATH/html_$TIMESTAMP/index.html"
    fi
fi

echo ""
print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" 
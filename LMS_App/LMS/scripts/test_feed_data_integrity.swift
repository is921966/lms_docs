#!/usr/bin/env swift

import Foundation

// ANSI colors
let RED = "\u{001B}[0;31m"
let GREEN = "\u{001B}[0;32m"
let YELLOW = "\u{001B}[1;33m"
let NC = "\u{001B}[0m"

print("üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• FEED")
print("====================================")

var passed = 0
var failed = 0

func testPass(_ message: String) {
    print("\(GREEN)‚úÖ PASS:\(NC) \(message)")
    passed += 1
}

func testFail(_ message: String) {
    print("\(RED)‚ùå FAIL:\(NC) \(message)")
    failed += 1
}

func testSection(_ name: String) {
    print("\n\(YELLOW)üìã \(name)\(NC)")
}

// Check if files exist
testSection("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")

let fileManager = FileManager.default
let basePath = "/Users/ishirokov/lms_docs"

let paths = [
    "docs/releases",
    "reports/sprints", 
    "reports/methodology"
]

for path in paths {
    let fullPath = "\(basePath)/\(path)"
    if fileManager.fileExists(atPath: fullPath) {
        do {
            let files = try fileManager.contentsOfDirectory(atPath: fullPath)
            let mdFiles = files.filter { $0.hasSuffix(".md") }
            if mdFiles.count > 0 {
                testPass("\(path): –Ω–∞–π–¥–µ–Ω–æ \(mdFiles.count) .md —Ñ–∞–π–ª–æ–≤")
            } else {
                testFail("\(path): –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
            }
        } catch {
            testFail("\(path): –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        }
    } else {
        testFail("\(path): –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }
}

// Check channel IDs
testSection("–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–Ω–∞–ª–æ–≤")

let expectedChannelIds = [
    "channel-releases",
    "channel-sprints",
    "channel-methodology",
    "channel-courses",
    "channel-admin",
    "channel-hr",
    "channel-my-courses",
    "channel-user-posts"
]

print("–û–∂–∏–¥–∞–µ–º—ã–µ ID –∫–∞–Ω–∞–ª–æ–≤:")
for id in expectedChannelIds {
    print("  ‚Ä¢ \(id)")
}
testPass("–§–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")

// Check recent files
testSection("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤")

let releasesPath = "\(basePath)/docs/releases"
if let releases = try? fileManager.contentsOfDirectory(atPath: releasesPath)
    .filter({ $0.hasSuffix(".md") })
    .sorted()
    .suffix(3) {
    
    print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã:")
    for file in releases {
        print("  ‚Ä¢ \(file)")
    }
    testPass("–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Ä–µ–ª–∏–∑–æ–≤")
}

let sprintsPath = "\(basePath)/reports/sprints"
if let sprints = try? fileManager.contentsOfDirectory(atPath: sprintsPath)
    .filter({ $0.hasSuffix(".md") && $0.contains("SPRINT") })
    .sorted()
    .suffix(3) {
    
    print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç—ã:")
    for file in sprints {
        print("  ‚Ä¢ \(file)")
    }
    testPass("–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–ø—Ä–∏–Ω—Ç–æ–≤")
}

// Summary
print("\n" + String(repeating: "=", count: 40))
print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
print(String(repeating: "=", count: 40))
print("\(GREEN)–ü—Ä–æ–π–¥–µ–Ω–æ:\(NC) \(passed)")
print("\(RED)–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:\(NC) \(failed)")
print("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: \(passed + failed)")

if failed == 0 {
    print("\n\(GREEN)‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\(NC)")
} else {
    print("\n\(RED)‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏\(NC)")
}

// Exit with appropriate code
exit(failed == 0 ? 0 : 1) 
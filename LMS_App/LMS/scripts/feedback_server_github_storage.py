#!/usr/bin/env python3
"""
Cloud-ready Feedback Server —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ GitHub
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Imgur
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime
import json
import os
import base64
import uuid
from pathlib import Path
import requests

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'github': {
        'token': os.getenv('GITHUB_TOKEN', ''),
        'owner': os.getenv('GITHUB_OWNER', 'is921966'),
        'repo': os.getenv('GITHUB_REPO', 'lms_docs'),
        'labels': ['feedback', 'mobile-app', 'ios']
    },
    'server': {
        'port': int(os.getenv('PORT', 5001)),
        'host': '0.0.0.0'
    }
}

FEEDBACK_STORAGE = []

def upload_screenshot_to_github(base64_image, feedback_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä—è–º–æ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    token = CONFIG['github']['token']
    if not token:
        print("‚ùå GitHub token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/png;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
        if ',' in base64_image:
            base64_image = base64_image.split(',')[1]
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"feedback_screenshots/{timestamp}_{feedback_id}.png"
        
        # GitHub API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        url = f"https://api.github.com/repos/{CONFIG['github']['owner']}/{CONFIG['github']['repo']}/contents/{filename}"
        
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        data = {
            'message': f'Add feedback screenshot for {feedback_id}',
            'content': base64_image,
            'branch': 'master'
        }
        
        response = requests.put(url, headers=headers, json=data)
        
        if response.status_code == 201:
            result = response.json()
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            download_url = result['content']['download_url']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ raw —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            raw_url = download_url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/')
            print(f"‚úÖ Screenshot uploaded to GitHub: {raw_url}")
            return raw_url
        else:
            print(f"‚ùå Failed to upload to GitHub: {response.status_code}")
            print(f"   Response: {response.text[:200]}...")
            return None
            
    except Exception as e:
        print(f"‚ùå Error uploading to GitHub: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_github_issue_with_screenshot(feedback):
    """–°–æ–∑–¥–∞–µ—Ç GitHub issue —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    token = CONFIG['github']['token']
    if not token:
        print("‚ùå GitHub token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return None
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
    feedback_id = feedback.get('id', str(uuid.uuid4()))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    screenshot_section = ""
    if feedback.get('screenshot'):
        print("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        screenshot_url = upload_screenshot_to_github(feedback['screenshot'], feedback_id)
        if screenshot_url:
            screenshot_section = f"\n\n## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç\n![Screenshot]({screenshot_url})\n"
        else:
            screenshot_section = "\n\n## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç\n*–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç*\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ issue
    device_info = feedback.get('deviceInfo', {})
    feedback_type = feedback.get('type', 'unknown')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –¥–ª—è —Ç–∏–ø–∞
    type_emoji = {
        'bug': 'üêõ',
        'feature': 'üí°',
        'improvement': '‚ú®',
        'question': '‚ùì'
    }.get(feedback_type.lower(), 'üìù')
    
    body = f"""## üì± Feedback –∏–∑ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

**–¢–∏–ø**: {type_emoji} {feedback_type}
**–î–∞—Ç–∞**: {feedback.get('timestamp', 'unknown')}
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: {feedback.get('userEmail', 'Anonymous')}

### üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{feedback.get('text', 'No description provided')}
{screenshot_section}
### üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:
- **–ú–æ–¥–µ–ª—å**: {device_info.get('model', 'unknown')}
- **iOS**: {device_info.get('osVersion', 'unknown')}
- **–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: {device_info.get('appVersion', 'unknown')} (Build {device_info.get('buildNumber', 'unknown')})
- **–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞**: {device_info.get('screenSize', 'unknown')}
- **–õ–æ–∫–∞–ª—å**: {device_info.get('locale', 'unknown')}

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è*
"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–µ–π–±–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
    labels = CONFIG['github']['labels'].copy()
    
    type_to_label = {
        'bug': 'bug',
        'feature': 'enhancement',
        'improvement': 'improvement',
        'question': 'question'
    }
    
    github_label = type_to_label.get(feedback_type.lower())
    if github_label:
        labels.append(github_label)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å emoji
    title_text = feedback.get('text', '')[:50]
    if len(feedback.get('text', '')) > 50:
        title_text += '...'
    title = f"{type_emoji} [{feedback_type}] {title_text}"
    
    issue_data = {
        'title': title,
        'body': body,
        'labels': labels
    }
    
    try:
        url = f"https://api.github.com/repos/{CONFIG['github']['owner']}/{CONFIG['github']['repo']}/issues"
        response = requests.post(url, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            issue_url = response.json()['html_url']
            print(f"‚úÖ Created GitHub issue: {issue_url}")
            return issue_url
        else:
            print(f"‚ùå Failed to create GitHub issue: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating GitHub issue: {e}")
        return None

@app.route('/api/v1/feedback', methods=['POST'])
def receive_feedback():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç feedback –æ—Ç iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        
        if not data or 'text' not in data:
            return jsonify({'error': 'Missing feedback text'}), 400
        
        feedback = {
            **data,
            'received_at': datetime.utcnow().isoformat(),
            'ip_address': request.remote_addr,
            'user_agent': request.headers.get('User-Agent', '')
        }
        
        github_url = create_github_issue_with_screenshot(feedback)
        if github_url:
            feedback['github_issue_url'] = github_url
        
        feedback_id = data.get('id', str(uuid.uuid4()))
        feedback_for_storage = {k: v for k, v in feedback.items() if k != 'screenshot'}
        feedback_for_storage['has_screenshot'] = bool(feedback.get('screenshot'))
        feedback_for_storage['id'] = feedback_id
        FEEDBACK_STORAGE.append(feedback_for_storage)
        
        if len(FEEDBACK_STORAGE) > 100:
            FEEDBACK_STORAGE.pop(0)
        
        print(f"‚úÖ Received feedback: {feedback_id}")
        print(f"   Type: {feedback.get('type', 'unknown')}")
        print(f"   Has screenshot: {bool(feedback.get('screenshot'))}")
        
        return jsonify({
            'status': 'success',
            'id': feedback_id,
            'message': 'Feedback received successfully',
            'github_issue': github_url
        }), 201
        
    except Exception as e:
        print(f"‚ùå Error processing feedback: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'github_configured': bool(CONFIG['github']['token']),
        'storage_method': 'github',
        'feedback_count': len(FEEDBACK_STORAGE)
    })

@app.route('/api/v1/feedbacks', methods=['GET'])
def get_feedbacks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∏–¥–±—ç–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ñ–∏–¥–±—ç–∫–æ–≤
    recent_feedbacks = sorted(
        FEEDBACK_STORAGE, 
        key=lambda x: x.get('received_at', ''), 
        reverse=True
    )[:50]
    
    return jsonify({
        'status': 'success',
        'count': len(recent_feedbacks),
        'feedbacks': recent_feedbacks
    })

if __name__ == '__main__':
    port = CONFIG['server']['port']
    print(f"""
üöÄ LMS Feedback Server (GitHub Storage Edition) Started!
======================================================
üìç Port: {port}
üîê GitHub Token: {'‚úÖ Configured' if CONFIG['github']['token'] else '‚ùå Not configured'}
üì¶ Repository: {CONFIG['github']['owner']}/{CONFIG['github']['repo']}
üñºÔ∏è  Storage: GitHub Repository (no external dependencies)

Note: Screenshots are saved directly to the repository
""")
    
    app.run(host=CONFIG['server']['host'], port=port) 
#!/bin/bash

echo "üì± Feed Channels Local Test"
echo "=========================="
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"
echo ""

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Kill any existing app
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
xcrun simctl terminate "iPhone 16 Pro" ru.tsum.lms.igor 2>/dev/null
sleep 2

# Start log streaming in background
echo "üìã –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤..."
xcrun simctl spawn "iPhone 16 Pro" log stream --predicate 'process == "LMS"' --style compact > /tmp/feed_logs.txt 2>&1 &
LOG_PID=$!
echo "Log streaming PID: $LOG_PID"

# Launch app
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
xcrun simctl launch "iPhone 16 Pro" ru.tsum.lms.igor
sleep 5

# Take screenshot
echo "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞..."
xcrun simctl io "iPhone 16 Pro" screenshot /tmp/feed_main.png

# Create simple UI test that navigates to Feed
echo "üß™ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π UI —Ç–µ—Å—Ç..."
cat > LMSUITests/FeedLocalNavigationTest.swift << 'EOF'
import XCTest

final class FeedLocalNavigationTest: XCTestCase {
    let app = XCUIApplication()
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app.launch()
    }
    
    func test_navigateToFeedAndCheckChannels() throws {
        // Wait for app
        sleep(2)
        
        // Find and tap Feed tab
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        let feedTab = tabBar.buttons["–ù–æ–≤–æ—Å—Ç–∏"]
        if feedTab.exists {
            feedTab.tap()
            print("‚úÖ Tapped Feed tab")
        } else {
            print("‚ùå Feed tab not found")
            // Try by index
            let tabs = tabBar.buttons
            if tabs.count > 1 {
                tabs.element(boundBy: 1).tap()
                print("‚úÖ Tapped tab by index")
            }
        }
        
        // Wait for Feed screen
        sleep(3)
        
        // Look for channel cells
        let channelCells = app.cells
        print("üìä Found \(channelCells.count) cells")
        
        // Take screenshot
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Feed_Screen_With_Channels"
        attachment.lifetime = .keepAlways
        add(attachment)
        
        // Check for specific text
        if app.staticTexts["–†–µ–ª–∏–∑—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"].exists {
            print("‚úÖ Found '–†–µ–ª–∏–∑—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' channel")
        }
        if app.staticTexts["–û—Ç—á–µ—Ç—ã —Å–ø—Ä–∏–Ω—Ç–æ–≤"].exists {
            print("‚úÖ Found '–û—Ç—á–µ—Ç—ã —Å–ø—Ä–∏–Ω—Ç–æ–≤' channel")
        }
        if app.staticTexts["–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è"].exists {
            print("‚úÖ Found '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è' channel")
        }
        
        sleep(5) // Keep app open for logs
    }
}
EOF

# Run the UI test
echo ""
echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç..."
xcodebuild test \
    -scheme LMS \
    -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
    -only-testing:LMSUITests/FeedLocalNavigationTest/test_navigateToFeedAndCheckChannels \
    -resultBundlePath /tmp/FeedTestResults.xcresult \
    2>&1 | grep -E "(Test Case|Passed|Failed|‚úÖ|‚ùå|üìä)" || true

# Kill log streaming
sleep 2
kill $LOG_PID 2>/dev/null

# Analyze logs
echo ""
echo "üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤..."
echo ""

# Check for specific log entries
echo -e "${YELLOW}=== TelegramFeedView logs ===${NC}"
grep -E "TelegramFeedView|FeedView" /tmp/feed_logs.txt | tail -10

echo ""
echo -e "${YELLOW}=== MockFeedService logs ===${NC}"
grep -E "MockFeedService|loadMockData" /tmp/feed_logs.txt | tail -10

echo ""
echo -e "${YELLOW}=== RealDataFeedService logs ===${NC}"
grep -E "RealDataFeedService|loadReleaseNotes|loadSprintReports|loadMethodologyUpdates" /tmp/feed_logs.txt | tail -10

echo ""
echo -e "${YELLOW}=== Channel loading logs ===${NC}"
grep -E "Channel|channels|Found.*files|Loaded.*posts" /tmp/feed_logs.txt | tail -10

# Count channels
echo ""
echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo -n "- –õ–æ–≥–∏ TelegramFeedView: "
grep -c "TelegramFeedView" /tmp/feed_logs.txt || echo "0"
echo -n "- –õ–æ–≥–∏ MockFeedService: "
grep -c "MockFeedService" /tmp/feed_logs.txt || echo "0"
echo -n "- –õ–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: "
grep -c "Found.*files" /tmp/feed_logs.txt || echo "0"
echo -n "- –õ–æ–≥–∏ –∫–∞–Ω–∞–ª–æ–≤: "
grep -c "Channel" /tmp/feed_logs.txt || echo "0"

# Save full logs
echo ""
echo "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏..."
cp /tmp/feed_logs.txt /tmp/feed_logs_full_$(date +%Y%m%d_%H%M%S).txt

# Take final screenshot
xcrun simctl io "iPhone 16 Pro" screenshot /tmp/feed_final.png

echo ""
echo "========== –ò–¢–û–ì–ò –¢–ï–°–¢–ê =========="
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ"
echo "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã:"
echo "   - /tmp/feed_main.png (–≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω)"
echo "   - /tmp/feed_final.png (—ç–∫—Ä–∞–Ω Feed)"
echo "üìã –õ–æ–≥–∏: /tmp/feed_logs.txt"
echo "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: /tmp/FeedTestResults.xcresult"
echo "=================================" 
#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import json
import sys
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from typing import Dict, List, Tuple, Any
import argparse

class UserBehaviorAnalyzer:
    def __init__(self):
        self.logs = []
        self.sessions = defaultdict(list)
        self.user_actions = defaultdict(list)
        
    def load_logs(self, file_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, list):
                    self.logs = data
                elif isinstance(data, dict) and 'logs' in data:
                    self.logs = data['logs']
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤")
                
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.logs)} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
            self._organize_by_session()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {e}")
            sys.exit(1)
    
    def _organize_by_session(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ —Å–µ—Å—Å–∏—è–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        for log in self.logs:
            session_id = log.get('context', {}).get('sessionId', 'unknown')
            user_id = log.get('context', {}).get('userId', 'anonymous')
            
            self.sessions[session_id].append(log)
            self.user_actions[user_id].append(log)
    
    def analyze_feature_usage(self) -> Dict[str, int]:
        """–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        feature_usage = Counter()
        
        for log in self.logs:
            if log.get('category') == 'UI':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–µ—Ç–∞–ª–µ–π
                details = log.get('details', {})
                feature = details.get('feature') or details.get('button') or details.get('view')
                if feature:
                    feature_usage[feature] += 1
        
        return dict(feature_usage.most_common(20))
    
    def analyze_screen_time(self) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö"""
        screen_times = defaultdict(list)
        
        for session_logs in self.sessions.values():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_logs = sorted(session_logs, key=lambda x: x.get('timestamp', ''))
            
            current_screen = None
            enter_time = None
            
            for log in sorted_logs:
                if log.get('category') == 'Navigation':
                    screen = log.get('details', {}).get('to')
                    if screen and current_screen and enter_time:
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
                        try:
                            exit_time = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
                            duration = (exit_time - enter_time).total_seconds()
                            if duration > 0 and duration < 3600:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                                screen_times[current_screen].append(duration)
                        except:
                            pass
                    
                    current_screen = screen
                    try:
                        enter_time = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
                    except:
                        enter_time = None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        avg_screen_times = {}
        for screen, times in screen_times.items():
            if times:
                avg_screen_times[screen] = sum(times) / len(times)
        
        return dict(sorted(avg_screen_times.items(), key=lambda x: x[1], reverse=True)[:10])
    
    def analyze_navigation_flows(self) -> List[Tuple[str, int]]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π"""
        flows = Counter()
        
        for session_logs in self.sessions.values():
            nav_logs = [log for log in session_logs if log.get('category') == 'Navigation']
            nav_logs.sort(key=lambda x: x.get('timestamp', ''))
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            for i in range(len(nav_logs) - 1):
                from_screen = nav_logs[i].get('details', {}).get('from', 'unknown')
                to_screen = nav_logs[i].get('details', {}).get('to', 'unknown')
                flow = f"{from_screen} ‚Üí {to_screen}"
                flows[flow] += 1
        
        return flows.most_common(15)
    
    def analyze_error_patterns(self) -> Dict[str, List[Dict]]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫"""
        errors = defaultdict(list)
        
        for log in self.logs:
            if log.get('category') == 'Error' or log.get('level') == 'ERROR':
                error_type = log.get('details', {}).get('errorType', 'Unknown')
                errors[error_type].append({
                    'event': log.get('event'),
                    'timestamp': log.get('timestamp'),
                    'screen': log.get('context', {}).get('screen'),
                    'details': log.get('details', {})
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_errors = dict(sorted(errors.items(), key=lambda x: len(x[1]), reverse=True))
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∏ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
        result = {}
        for error_type, instances in list(sorted_errors.items())[:10]:
            result[error_type] = instances[:3]
        
        return result
    
    def analyze_user_engagement(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        engagement = {
            'daily_active_users': len(self.user_actions),
            'average_session_duration': 0,
            'average_actions_per_session': 0,
            'most_active_hours': {},
            'feature_adoption': {}
        }
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        session_durations = []
        for session_logs in self.sessions.values():
            if len(session_logs) >= 2:
                try:
                    start = datetime.fromisoformat(session_logs[0]['timestamp'].replace('Z', '+00:00'))
                    end = datetime.fromisoformat(session_logs[-1]['timestamp'].replace('Z', '+00:00'))
                    duration = (end - start).total_seconds()
                    if 0 < duration < 7200:  # –ú–∞–∫—Å 2 —á–∞—Å–∞
                        session_durations.append(duration)
                except:
                    pass
        
        if session_durations:
            engagement['average_session_duration'] = sum(session_durations) / len(session_durations)
        
        # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
        actions_per_session = [len(logs) for logs in self.sessions.values()]
        if actions_per_session:
            engagement['average_actions_per_session'] = sum(actions_per_session) / len(actions_per_session)
        
        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
        hours = Counter()
        for log in self.logs:
            try:
                timestamp = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
                hours[timestamp.hour] += 1
            except:
                pass
        
        engagement['most_active_hours'] = dict(hours.most_common(5))
        
        return engagement
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø")
        print("="*60)
        
        # 1. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüéØ –¢–û–ü-20 –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –§–£–ù–ö–¶–ò–ô:")
        feature_usage = self.analyze_feature_usage()
        for i, (feature, count) in enumerate(feature_usage.items(), 1):
            print(f"{i:2}. {feature:<30} - {count:>5} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        
        # 2. –í—Ä–µ–º—è –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö
        print("\n‚è±Ô∏è  –°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –ù–ê –≠–ö–†–ê–ù–ê–• (—Å–µ–∫—É–Ω–¥—ã):")
        screen_times = self.analyze_screen_time()
        for screen, avg_time in screen_times.items():
            print(f"   {screen:<30} - {avg_time:>6.1f} —Å–µ–∫")
        
        # 3. –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        print("\nüîÑ –ü–û–ü–£–õ–Ø–†–ù–´–ï –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –ü–£–¢–ò:")
        nav_flows = self.analyze_navigation_flows()
        for flow, count in nav_flows:
            print(f"   {flow:<40} - {count:>3} —Ä–∞–∑")
        
        # 4. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        print("\n‚ùå –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò:")
        errors = self.analyze_error_patterns()
        for error_type, instances in errors.items():
            print(f"\n   {error_type} ({len(instances)} —Å–ª—É—á–∞–µ–≤):")
            for instance in instances[:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
                print(f"      - {instance['event']} –Ω–∞ —ç–∫—Ä–∞–Ω–µ {instance['screen']}")
        
        # 5. –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
        print("\nüìà –ú–ï–¢–†–ò–ö–ò –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–ò:")
        engagement = self.analyze_user_engagement()
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {engagement['daily_active_users']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {engagement['average_session_duration']:.1f} —Å–µ–∫")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Å–µ—Å—Å–∏—é: {engagement['average_actions_per_session']:.1f}")
        print(f"   –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã: {engagement['most_active_hours']}")
        
        print("\n" + "="*60)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        report = {
            'generated_at': datetime.now().isoformat(),
            'total_logs': len(self.logs),
            'feature_usage': feature_usage,
            'screen_times': screen_times,
            'navigation_flows': [{'flow': f, 'count': c} for f, c in nav_flows],
            'error_patterns': errors,
            'engagement': engagement
        }
        
        with open('user_behavior_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print("\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ user_behavior_report.json")

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤')
    parser.add_argument('log_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ª–æ–≥–∞–º–∏ (JSON)')
    parser.add_argument('--user', help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--date', help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –∑–∞ –¥–∞—Ç—É (YYYY-MM-DD)')
    
    args = parser.parse_args()
    
    analyzer = UserBehaviorAnalyzer()
    analyzer.load_logs(args.log_file)
    analyzer.generate_report()

if __name__ == "__main__":
    main() 
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

set -e

if [ $# -eq 0 ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-feature.sh <FeatureName>"
    echo "–ü—Ä–∏–º–µ—Ä: ./create-feature.sh Notifications"
    exit 1
fi

FEATURE_NAME=$1
FEATURE_NAME_LOWER=$(echo "$FEATURE_NAME" | tr '[:upper:]' '[:lower:]')

echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è: $FEATURE_NAME"

# 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
mkdir -p "LMS/Features/$FEATURE_NAME/Views"
mkdir -p "LMS/Features/$FEATURE_NAME/Models"
mkdir -p "LMS/Features/$FEATURE_NAME/ViewModels"
mkdir -p "LMS/Features/$FEATURE_NAME/Services"

# 2. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π View
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ View..."
cat > "LMS/Features/$FEATURE_NAME/Views/${FEATURE_NAME}View.swift" << EOF
import SwiftUI

struct ${FEATURE_NAME}View: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    var body: some View {
        NavigationStack {
            VStack {
                Text("${FEATURE_NAME} Module")
                    .font(.largeTitle)
                    .padding()
                
                Text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    .foregroundColor(.secondary)
                
                Spacer()
            }
            .navigationTitle("$FEATURE_NAME")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

#Preview {
    ${FEATURE_NAME}View()
        .environmentObject(AuthViewModel())
}
EOF

# 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ FeatureRegistry
echo "üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ FeatureRegistry..."
if [ ! -f "LMS/Features/FeatureRegistry.swift" ]; then
    # –°–æ–∑–¥–∞–µ–º FeatureRegistry –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cat > "LMS/Features/FeatureRegistry.swift" << 'EOF'
import SwiftUI

enum Feature: String, CaseIterable {
    case auth = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    case users = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    case courses = "–ö—É—Ä—Å—ã"
    case profile = "–ü—Ä–æ—Ñ–∏–ª—å"
    case settings = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    case tests = "–¢–µ—Å—Ç—ã"
    case analytics = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    case onboarding = "–û–Ω–±–æ—Ä–¥–∏–Ω–≥"
    // NEW_FEATURES_HERE
    
    var isEnabled: Bool {
        switch self {
        case .auth, .users, .courses, .profile, .settings, .tests, .analytics:
            return true
        default:
            return UserDefaults.standard.bool(forKey: "feature_\(self.rawValue)")
        }
    }
    
    var icon: String {
        switch self {
        case .auth: return "person.circle"
        case .users: return "person.2"
        case .courses: return "book"
        case .profile: return "person"
        case .settings: return "gear"
        case .tests: return "checkmark.circle"
        case .analytics: return "chart.bar"
        case .onboarding: return "star"
        // NEW_ICONS_HERE
        }
    }
    
    @ViewBuilder
    var view: some View {
        switch self {
        case .auth: AuthenticationView()
        case .users: UserManagementView()
        case .courses: CoursesListView()
        case .profile: ProfileView()
        case .settings: SettingsView()
        case .tests: TestsListView()
        case .analytics: AnalyticsView()
        case .onboarding: OnboardingProgramsView()
        // NEW_VIEWS_HERE
        }
    }
}
EOF
fi

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π feature –≤ FeatureRegistry
sed -i '' "s|// NEW_FEATURES_HERE|case $FEATURE_NAME_LOWER = \"$FEATURE_NAME\"\n    // NEW_FEATURES_HERE|" "LMS/Features/FeatureRegistry.swift"
sed -i '' "s|// NEW_ICONS_HERE|case .$FEATURE_NAME_LOWER: return \"questionmark.circle\"\n        // NEW_ICONS_HERE|" "LMS/Features/FeatureRegistry.swift"
sed -i '' "s|// NEW_VIEWS_HERE|case .$FEATURE_NAME_LOWER: ${FEATURE_NAME}View()\n        // NEW_VIEWS_HERE|" "LMS/Features/FeatureRegistry.swift"

# 4. –°–æ–∑–¥–∞–µ–º Integration Test
echo "üß™ –°–æ–∑–¥–∞–Ω–∏–µ Integration Test..."
mkdir -p "LMSUITests/Features"
cat > "LMSUITests/Features/${FEATURE_NAME}IntegrationTests.swift" << EOF
import XCTest

final class ${FEATURE_NAME}IntegrationTests: XCTestCase {
    let app = XCUIApplication()
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app.launch()
    }
    
    func test${FEATURE_NAME}IsAccessibleFromMainMenu() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        // –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∞–µ–º feature flag
        app.launchArguments.append("-feature_${FEATURE_NAME}_enabled")
        app.launch()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–∞–±–∞—Ö
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.waitForExistence(timeout: 5))
        
        let ${FEATURE_NAME_LOWER}Tab = tabBar.buttons["$FEATURE_NAME"]
        XCTAssertTrue(${FEATURE_NAME_LOWER}Tab.exists, "$FEATURE_NAME –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏
        ${FEATURE_NAME_LOWER}Tab.tap()
        
        let navTitle = app.navigationBars["$FEATURE_NAME"]
        XCTAssertTrue(navTitle.waitForExistence(timeout: 2))
    }
}
EOF

# 5. –û–±–Ω–æ–≤–ª—è–µ–º INTEGRATION_STATUS.md
echo "üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."
if [ ! -f "docs/INTEGRATION_STATUS.md" ]; then
    mkdir -p docs
    cat > "docs/INTEGRATION_STATUS.md" << EOF
# üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π

–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $(date +"%Y-%m-%d %H:%M")

| –ú–æ–¥—É–ª—å | –ö–æ–¥ | –¢–µ—Å—Ç—ã | UI | –ù–∞–≤–∏–≥–∞—Ü–∏—è | Feature Flag | –°—Ç–∞—Ç—É—Å |
|--------|-----|-------|----|-----------|--------------|---------| 
| Auth | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Users | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Courses | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Profile | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Settings | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Tests | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Analytics | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Onboarding | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | enabled | Production |
| Competencies | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå | disabled | Ready |
| Positions | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå | disabled | Ready |
| Feed | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå | disabled | Ready |
EOF
fi

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ —Ç–∞–±–ª–∏—Ü—É
echo "| $FEATURE_NAME | ‚úÖ | ‚è≥ | ‚úÖ | ‚ùå | disabled | Development |" >> "docs/INTEGRATION_STATUS.md"

echo "‚úÖ –ú–æ–¥—É–ª—å $FEATURE_NAME —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
echo ""
echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ LMS/Features/$FEATURE_NAME/"
echo "2. –ù–∞–ø–∏—Å–∞—Ç—å unit —Ç–µ—Å—Ç—ã"
echo "3. –í–∫–ª—é—á–∏—Ç—å feature flag: UserDefaults.standard.set(true, forKey: \"feature_${FEATURE_NAME}\")"
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç—å integration test: xcodebuild test -only-testing:LMSUITests/${FEATURE_NAME}IntegrationTests" 
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –≤ Feature Registry
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./migrate-to-feature-registry.sh

set -e

echo "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –≤ Feature Registry..."

# –ü—É—Ç—å –∫ FeatureRegistry.swift
REGISTRY_FILE="../LMS/Features/FeatureRegistry.swift"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
if [ ! -f "$REGISTRY_FILE" ]; then
    echo "‚ùå –§–∞–π–ª FeatureRegistry.swift –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä
add_module_to_registry() {
    local module_name=$1
    local module_title=$2
    local module_icon=$3
    local module_view=$4
    local is_ready=$5
    
    echo "üì¶ –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å: $module_title"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å
    if grep -q "case $module_name" "$REGISTRY_FILE"; then
        echo "  ‚úÖ –ú–æ–¥—É–ª—å —É–∂–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"
        return
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ enum
    sed -i '' "/case notifications/a\\
    case $module_name = \"$module_title\"
" "$REGISTRY_FILE"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    sed -i '' "/case .notifications: return \"bell\"/a\\
        case .$module_name: return \"$module_icon\"
" "$REGISTRY_FILE"
    
    # –î–æ–±–∞–≤–ª—è–µ–º view
    sed -i '' "/case .notifications:/a\\
        case .$module_name:\\
            $module_view()
" "$REGISTRY_FILE"
    
    echo "  ‚úÖ –ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è View —Ñ–∞–π–ª–∞
check_view_exists() {
    local view_name=$1
    local search_path="../LMS/Features"
    
    if find "$search_path" -name "*.swift" -exec grep -l "struct $view_name" {} \; | head -1 > /dev/null; then
        return 0
    else
        return 1
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
echo ""
echo "üîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π..."

# –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
declare -A modules=(
    ["programs"]="–ü—Ä–æ–≥—Ä–∞–º–º—ã|book.closed|ProgramListView"
    ["certificates"]="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã|rosette|CertificateListView"
    ["gamification"]="–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è|gamecontroller|GamificationView"
    ["notifications"]="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è|bell|NotificationListView"
    ["calendar"]="–ö–∞–ª–µ–Ω–¥–∞—Ä—å|calendar|CalendarView"
    ["library"]="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞|books.vertical|LibraryView"
    ["reports"]="–û—Ç—á–µ—Ç—ã|doc.text|ReportsView"
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
for module in "${!modules[@]}"; do
    IFS='|' read -r title icon view <<< "${modules[$module]}"
    
    echo ""
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å: $title"
    
    if check_view_exists "$view"; then
        echo "  ‚úÖ View –Ω–∞–π–¥–µ–Ω: $view"
        read -p "  –î–æ–±–∞–≤–∏—Ç—å –≤ Feature Registry? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            add_module_to_registry "$module" "$title" "$icon" "$view" "true"
        fi
    else
        echo "  ‚ö†Ô∏è  View –Ω–µ –Ω–∞–π–¥–µ–Ω: $view"
    fi
done

# –°–æ–∑–¥–∞–Ω–∏–µ helper —Ñ—É–Ω–∫—Ü–∏–π
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ helper —Ñ—É–Ω–∫—Ü–∏–π..."

cat << 'EOF' > ../LMS/Features/FeatureRegistryHelpers.swift
//
//  FeatureRegistryHelpers.swift
//  LMS
//
//  Auto-generated migration helpers
//

import Foundation

extension Feature {
    /// –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    static func migrateAllReadyModules() {
        // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        let readyModules: [Feature] = [
            .competencies,
            .positions,
            .feed
        ]
        
        for module in readyModules {
            Feature.enable(module)
            print("‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å: \(module.rawValue)")
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    static func printModuleStatus() {
        print("\nüìä –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:")
        print("================")
        
        for feature in Feature.allCases {
            let status = feature.isEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            print("\(feature.rawValue): \(status)")
        }
        
        print("================\n")
    }
    
    /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ feature flags
    static func resetAllFeatureFlags() {
        for feature in Feature.allCases {
            UserDefaults.standard.removeObject(forKey: "feature_\(feature.rawValue)")
        }
        print("üîÑ –í—Å–µ feature flags —Å–±—Ä–æ—à–µ–Ω—ã")
    }
}
EOF

echo "‚úÖ Helper —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ContentView –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
echo ""
echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ContentView..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
echo ""
echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ FeatureRegistry.swift"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏"
echo "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Feature.migrateAllReadyModules() –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π"
echo "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Feature.printModuleStatus() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
echo ""
read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    cd ..
    xcodebuild -scheme LMS -destination 'platform=iOS Simulator,name=iPhone 16 Pro' -configuration Debug build CODE_SIGNING_REQUIRED=NO -quiet
    echo "‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
fi 
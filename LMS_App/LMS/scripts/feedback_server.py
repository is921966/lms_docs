#!/usr/bin/env python3
"""
Simple Feedback Server –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime
import json
import os
import base64
import uuid
from pathlib import Path
import requests

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FEEDBACK_DIR = Path("feedback_data")
SCREENSHOTS_DIR = FEEDBACK_DIR / "screenshots"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
CONFIG = {}
try:
    with open('feedback_config.json', 'r') as f:
        CONFIG = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ feedback_config.json")
except FileNotFoundError:
    print("‚ö†Ô∏è  feedback_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    CONFIG = {
        'github': {
            'token': os.getenv("GITHUB_TOKEN", ""),
            'owner': 'is921966',
            'repo': 'lms_docs',
            'labels': ['feedback', 'mobile-app', 'ios']
        },
        'server': {
            'port': 5000,
            'host': '0.0.0.0'
        }
    }

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
FEEDBACK_DIR.mkdir(exist_ok=True)
SCREENSHOTS_DIR.mkdir(exist_ok=True)

@app.route('/api/v1/feedback', methods=['POST'])
def receive_feedback():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç feedback –æ—Ç iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not data or 'text' not in data:
            return jsonify({'error': 'Missing feedback text'}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        feedback = {
            **data,
            'received_at': datetime.utcnow().isoformat(),
            'ip_address': request.remote_addr,
            'user_agent': request.headers.get('User-Agent', '')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        screenshot_path = None
        if 'screenshot' in data and data['screenshot']:
            screenshot_id = data.get('id', str(uuid.uuid4()))
            screenshot_path = save_screenshot(data['screenshot'], screenshot_id)
            feedback['screenshot_path'] = str(screenshot_path)
            # –£–¥–∞–ª—è–µ–º base64 –∏–∑ JSON –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            feedback['screenshot'] = 'saved'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º feedback
        feedback_id = data.get('id', str(uuid.uuid4()))
        feedback_path = FEEDBACK_DIR / f"{feedback_id}.json"
        
        with open(feedback_path, 'w') as f:
            json.dump(feedback, f, indent=2, ensure_ascii=False)
        
        # –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º GitHub issue –¥–ª—è feedback –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        github_url = create_github_issue(feedback, screenshot_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack/Discord –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        send_notification(feedback, github_url)
        
        print(f"‚úÖ Received feedback: {feedback_id}")
        if github_url:
            print(f"üìù GitHub Issue: {github_url}")
        
        return jsonify({
            'status': 'success',
            'id': feedback_id,
            'message': 'Feedback received successfully',
            'github_issue': github_url
        }), 201
        
    except Exception as e:
        print(f"‚ùå Error processing feedback: {e}")
        return jsonify({'error': str(e)}), 500

def save_screenshot(base64_data, feedback_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ base64"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/png;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
        if ',' in base64_data:
            base64_data = base64_data.split(',')[1]
        
        screenshot_data = base64.b64decode(base64_data)
        screenshot_path = SCREENSHOTS_DIR / f"{feedback_id}.png"
        
        with open(screenshot_path, 'wb') as f:
            f.write(screenshot_data)
        
        return screenshot_path
    except Exception as e:
        print(f"Error saving screenshot: {e}")
        return None

def create_github_issue(feedback, screenshot_path):
    """–°–æ–∑–¥–∞–µ—Ç GitHub issue –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    token = CONFIG['github']['token']
    if not token:
        print("‚ùå GitHub token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./github_feedback_config.sh")
        return None
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ issue
    device_info = feedback.get('deviceInfo', {})
    body = f"""## üì± Feedback –∏–∑ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

**–¢–∏–ø**: {feedback.get('type', 'unknown')}
**–î–∞—Ç–∞**: {feedback.get('timestamp', 'unknown')}
**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ**: {device_info.get('model', 'unknown')} (iOS {device_info.get('osVersion', 'unknown')})
**–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: {device_info.get('appVersion', 'unknown')} (Build {device_info.get('buildNumber', 'unknown')})

### üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{feedback.get('text', 'No description provided')}

### üì± –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
- –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {device_info.get('screenSize', 'unknown')}
- –õ–æ–∫–∞–ª—å: {device_info.get('locale', 'unknown')}

---
*–≠—Ç–æ—Ç issue –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏–∑ feedback –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏*
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if screenshot_path:
        body += f"\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: `{screenshot_path.name}`"
        # TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ imgur –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç–∏–Ω–≥
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–µ–π–±–ª—ã
    labels = CONFIG['github']['labels'].copy()
    feedback_type = feedback.get('type', 'bug').lower()
    if feedback_type in ['bug', 'error', '–æ—à–∏–±–∫–∞']:
        labels.append('bug')
    elif feedback_type in ['feature', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']:
        labels.append('enhancement')
    elif feedback_type in ['question', '–≤–æ–ø—Ä–æ—Å']:
        labels.append('question')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_text = feedback.get('text', '')[:50]
    if len(feedback.get('text', '')) > 50:
        title_text += '...'
    title = f"[Feedback] {feedback.get('type', 'Bug')}: {title_text}"
    
    issue_data = {
        'title': title,
        'body': body,
        'labels': labels
    }
    
    try:
        url = f"https://api.github.com/repos/{CONFIG['github']['owner']}/{CONFIG['github']['repo']}/issues"
        response = requests.post(url, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            issue_url = response.json()['html_url']
            print(f"‚úÖ Created GitHub issue: {issue_url}")
            return issue_url
        else:
            print(f"‚ùå Failed to create GitHub issue: {response.status_code}")
            print(f"Response: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating GitHub issue: {e}")
        return None

def send_notification(feedback, github_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack/Discord"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pass

@app.route('/')
def index():
    """–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ feedback"""
    feedbacks = []
    for feedback_file in sorted(FEEDBACK_DIR.glob("*.json"), reverse=True):
        try:
            with open(feedback_file) as f:
                feedbacks.append(json.load(f))
        except:
            pass
    
    html = """<!DOCTYPE html>
<html>
<head>
    <title>LMS Feedback Dashboard</title>
    <meta charset="utf-8">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               margin: 20px; background: #f5f5f7; }
        .container { max-width: 1200px; margin: 0 auto; }
        h1 { color: #1d1d1f; }
        .feedback { background: white; padding: 20px; margin: 15px 0; 
                   border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
        .type { display: inline-block; padding: 4px 12px; border-radius: 20px; 
               font-size: 12px; font-weight: 600; margin-right: 10px; }
        .bug { background: #fee; color: #c33; }
        .feature { background: #e3f2fd; color: #1976d2; }
        .question { background: #f3e5f5; color: #7b1fa2; }
        .improvement { background: #e8f5e9; color: #388e3c; }
        .meta { color: #86868b; font-size: 14px; margin: 10px 0; }
        .text { margin: 15px 0; line-height: 1.5; }
        .device { background: #f5f5f7; padding: 10px; border-radius: 8px; 
                 font-size: 13px; color: #86868b; }
        .screenshot { margin: 10px 0; }
        .screenshot img { max-width: 300px; border: 1px solid #d2d2d7; 
                         border-radius: 8px; cursor: pointer; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì± LMS Feedback Dashboard</h1>
        <p>–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: """ + str(len(feedbacks)) + """</p>
        <hr>
"""
    
    for feedback in feedbacks:
        device_info = feedback.get('deviceInfo', {})
        feedback_type = feedback.get('type', 'unknown').lower()
        
        html += f"""
        <div class="feedback">
            <span class="type {feedback_type}">{feedback.get('type', 'Unknown')}</span>
            <span class="meta">{feedback.get('timestamp', 'Unknown time')}</span>
            <div class="text">{feedback.get('text', 'No text')}</div>
            <div class="device">
                {device_info.get('model', 'Unknown')} ‚Ä¢ 
                iOS {device_info.get('osVersion', 'Unknown')} ‚Ä¢ 
                v{device_info.get('appVersion', 'Unknown')} 
                ({device_info.get('buildNumber', 'Unknown')})
            </div>
"""
        
        if feedback.get('screenshot_path'):
            screenshot_name = Path(feedback['screenshot_path']).name
            html += f"""
            <div class="screenshot">
                <img src="/screenshot/{screenshot_name}" 
                     onclick="window.open(this.src)" 
                     title="Click to view full size">
            </div>
"""
        
        html += "</div>"
    
    html += """
    </div>
</body>
</html>"""
    
    return html

@app.route('/screenshot/<filename>')
def serve_screenshot(filename):
    """–û—Ç–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
    from flask import send_from_directory
    return send_from_directory(SCREENSHOTS_DIR, filename)

@app.route('/api/v1/feedback/list')
def list_feedback():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ feedback"""
    feedbacks = []
    for feedback_file in sorted(FEEDBACK_DIR.glob("*.json"), reverse=True):
        try:
            with open(feedback_file) as f:
                feedbacks.append(json.load(f))
        except:
            pass
    return jsonify(feedbacks)

if __name__ == '__main__':
    print(f"""
üöÄ LMS Feedback Server Started!
================================
üìç URL: http://localhost:{CONFIG['server']['port']}
üì± iOS endpoint: http://localhost:{CONFIG['server']['port']}/api/v1/feedback
üåê Web dashboard: http://localhost:{CONFIG['server']['port']}/
üìä API list: http://localhost:{CONFIG['server']['port']}/api/v1/feedback/list

GitHub Integration: {'‚úÖ Configured' if CONFIG['github']['token'] else '‚ùå Not configured (run ./github_feedback_config.sh)'}
Repository: {CONFIG['github']['owner']}/{CONFIG['github']['repo']}

Press Ctrl+C to stop
""")
    
    app.run(
        host=CONFIG['server']['host'], 
        port=CONFIG['server']['port'], 
        debug=True
    ) 
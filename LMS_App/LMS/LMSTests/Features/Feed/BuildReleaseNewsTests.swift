//
//  BuildReleaseNewsTests.swift
//  LMSTests
//
//  –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–ª–∏–∑–∞—Ö
//

import XCTest
@testable import LMS

class BuildReleaseNewsTests: XCTestCase {
    
    // MARK: - Test Data
    
    let sampleReleaseNotes = """
    # TestFlight Release v2.1.1
    
    **Build**: 206
    
    ## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    ### ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    - –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ UI —Ç–µ—Å—Ç–æ–≤
    - –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è 43 UI —Ç–µ—Å—Ç–æ–≤
    
    ### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö UI —Å—Ç—Ä—É–∫—Ç—É—Ä
    
    ## üìã –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    
    ### –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
    
    ## üêõ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ UI —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    
    // MARK: - Tests
    
    func testBuildReleaseNewsCreation() {
        // Given
        let version = "2.1.1"
        let buildNumber = "206"
        
        // When
        let releaseNews = BuildReleaseNews.fromReleaseNotes(
            version: version,
            buildNumber: buildNumber,
            releaseNotesContent: sampleReleaseNotes
        )
        
        // Then
        XCTAssertEqual(releaseNews.version, version)
        XCTAssertEqual(releaseNews.buildNumber, buildNumber)
        XCTAssertNotNil(releaseNews.id)
        XCTAssertTrue(releaseNews.mainChanges.count > 0)
    }
    
    func testReleaseNotesParser() {
        // Given
        let parser = ReleaseNotesParser()
        
        // When
        let parsedData = parser.parse(sampleReleaseNotes)
        
        // Then
        XCTAssertEqual(parsedData.changes.count, 2, "Should parse 2 change categories")
        
        // Check first category
        let firstCategory = parsedData.changes[0]
        XCTAssertEqual(firstCategory.title, "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        XCTAssertEqual(firstCategory.icon, "‚úÖ")
        XCTAssertEqual(firstCategory.changes.count, 3)
        
        // Check testing focus
        XCTAssertEqual(parsedData.testingFocus.count, 2)
        XCTAssertTrue(parsedData.testingFocus.contains("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"))
        
        // Check known issues
        XCTAssertEqual(parsedData.knownIssues.count, 1)
    }
    
    func testToFeedItemConversion() {
        // Given
        let releaseNews = BuildReleaseNews.fromReleaseNotes(
            version: "2.1.1",
            buildNumber: "206",
            releaseNotesContent: sampleReleaseNotes
        )
        
        // When
        let feedItem = releaseNews.toFeedItem()
        
        // Then
        XCTAssertEqual(feedItem.type, .announcement)
        XCTAssertEqual(feedItem.title, "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è 2.1.1")
        XCTAssertEqual(feedItem.author, "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        XCTAssertEqual(feedItem.priority, .high)
        XCTAssertTrue(feedItem.tags.contains("release"))
        XCTAssertTrue(feedItem.tags.contains("testflight"))
        
        // Check metadata
        XCTAssertEqual(feedItem.metadata["version"], "2.1.1")
        XCTAssertEqual(feedItem.metadata["build"], "206")
        XCTAssertEqual(feedItem.metadata["type"], "app_release")
        
        // Check content contains parsed data
        XCTAssertTrue(feedItem.content.contains("üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"))
        XCTAssertTrue(feedItem.content.contains("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"))
    }
    
    func testEmptyReleaseNotes() {
        // Given
        let emptyNotes = ""
        
        // When
        let releaseNews = BuildReleaseNews.fromReleaseNotes(
            version: "1.0.0",
            buildNumber: "1",
            releaseNotesContent: emptyNotes
        )
        
        // Then
        XCTAssertEqual(releaseNews.version, "1.0.0")
        XCTAssertEqual(releaseNews.buildNumber, "1")
        XCTAssertEqual(releaseNews.mainChanges.count, 0)
        XCTAssertEqual(releaseNews.testingFocus.count, 0)
        XCTAssertEqual(releaseNews.knownIssues.count, 0)
    }
    
    func testParserWithDifferentFormats() {
        // Given
        let parser = ReleaseNotesParser()
        let alternativeNotes = """
        ### üöÄ New Features
        - Feature 1
        - Feature 2
        
        ## Testing Focus
        ‚Ä¢ Test this
        ‚Ä¢ Test that
        
        ## Known Issues
        - Issue 1
        """
        
        // When
        let parsedData = parser.parse(alternativeNotes)
        
        // Then
        XCTAssertEqual(parsedData.changes.count, 1)
        XCTAssertEqual(parsedData.changes[0].icon, "üöÄ")
        XCTAssertEqual(parsedData.testingFocus.count, 2)
        XCTAssertEqual(parsedData.knownIssues.count, 1)
    }
} 
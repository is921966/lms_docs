name: Fetch TestFlight Feedback

on:
  schedule:
    # –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC (12:00 MSK)
    - cron: '0 9 * * *'
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  fetch-feedback:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check project structure
      run: |
        echo "üìÅ Project structure:"
        ls -la LMS_App/LMS/scripts/ || echo "‚ùå Scripts directory not found"
        echo "üìã Requirements.txt:"
        cat LMS_App/LMS/scripts/requirements.txt || echo "‚ùå requirements.txt not found"
        echo "üìÑ Python script:"
        ls -la LMS_App/LMS/scripts/fetch_testflight_feedback.py || echo "‚ùå fetch_testflight_feedback.py not found"
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        if [ -f LMS_App/LMS/scripts/requirements.txt ]; then
          cd LMS_App/LMS/scripts
          pip install -r requirements.txt
        else
          echo "‚ö†Ô∏è No requirements.txt found, installing basic dependencies"
          pip install requests
        fi
        
    - name: Check environment variables
      env:
        HAS_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID != '' }}
        HAS_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID != '' }}
        HAS_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY != '' }}
        HAS_APP_ID: ${{ secrets.APP_ID != '' }}
      run: |
        echo "üîê Environment variables check:"
        echo "APP_STORE_CONNECT_API_KEY_ID: $HAS_API_KEY_ID"
        echo "APP_STORE_CONNECT_API_ISSUER_ID: $HAS_API_ISSUER"
        echo "APP_STORE_CONNECT_API_KEY: $HAS_API_KEY"
        echo "APP_ID: $HAS_APP_ID"
        
    - name: Fetch TestFlight feedback
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_ID: ${{ secrets.APP_ID }}
      run: |
        if [ -f LMS_App/LMS/scripts/fetch_testflight_feedback.py ]; then
          echo "üîç Running TestFlight feedback fetch..."
          cd LMS_App/LMS/scripts
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
          if [ -n "$APP_STORE_CONNECT_API_KEY" ]; then
            echo "$APP_STORE_CONNECT_API_KEY" > private_key.p8
            export APP_STORE_CONNECT_API_KEY_PATH="./private_key.p8"
          fi
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ª–æ–≤–ª–µ–π –æ—à–∏–±–æ–∫
          python fetch_testflight_feedback.py || {
            echo "‚ùå Script failed with exit code $?"
            echo "üìã Working directory:"
            pwd
            echo "üìÅ Files in directory:"
            ls -la
            exit 1
          }
        else
          echo "‚ö†Ô∏è fetch_testflight_feedback.py not found, skipping..."
        fi
        
    - name: Upload feedback report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: testflight-feedback-report
        path: |
          LMS_App/LMS/scripts/testflight_feedback_report.json
          LMS_App/LMS/scripts/screenshots/
        continue-on-error: true
        
    - name: Create issues from critical feedback
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(
            fs.readFileSync('LMS_App/LMS/scripts/testflight_feedback_report.json', 'utf8')
          );
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ feedback
          for (const feedback of report.feedbacks) {
            if (feedback.comment && 
                (feedback.comment.toLowerCase().includes('crash') ||
                 feedback.comment.toLowerCase().includes('critical'))) {
              
              // –°–æ–∑–¥–∞–µ–º issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Critical TestFlight Feedback from ${feedback.tester_email}`,
                body: `## TestFlight Feedback
                
**From:** ${feedback.tester_email}
**Date:** ${feedback.submitted_date}
**Build:** ${feedback.build_version}

**Comment:**
${feedback.comment}

---
*Automatically created from TestFlight feedback*`,
                labels: ['testflight-feedback', 'critical', 'bug']
              });
            }
          }
          
    - name: Send Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: '‚ùå Failed to fetch TestFlight feedback'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }} 
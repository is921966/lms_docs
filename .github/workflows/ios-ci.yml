name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: |
        cd LMS_App/LMS
        xcodebuild build \
          -scheme LMS \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY=""
          
    - name: Run Unit Tests
      run: |
        cd LMS_App/LMS
        xcodebuild test \
          -scheme LMS \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
          -only-testing:LMSTests \
          -resultBundlePath TestResults.xcresult \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" | xcpretty
          
    - name: Generate Coverage Report
      run: |
        cd LMS_App/LMS
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./LMS_App/LMS/coverage.json
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: LMS_App/LMS/TestResults.xcresult
        
  testflight-release:
    name: TestFlight Release
    runs-on: macos-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Certificates
      env:
        CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
        CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificates
        echo -n "$CERTIFICATES_P12" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$CERTIFICATES_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
    - name: Build and Archive
      run: |
        cd LMS_App/LMS
        xcodebuild archive \
          -scheme LMS \
          -archivePath $RUNNER_TEMP/LMS.xcarchive \
          -configuration Release \
          -destination 'generic/platform=iOS'
          
    - name: Export IPA
      run: |
        cd LMS_App/LMS
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/LMS.xcarchive \
          -exportPath $RUNNER_TEMP/export \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file $RUNNER_TEMP/export/LMS.ipa \
          --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID" 
name: iOS CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  XCODE_VERSION: '16.0'
  IOS_DEPLOYMENT_TARGET: '18.5'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build for testing
      run: |
        cd LMS_App/LMS
        xcodebuild build-for-testing \
          -scheme LMS-UnitTests \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -quiet
          
    - name: Run Unit Tests
      run: |
        cd LMS_App/LMS
        xcodebuild test-without-building \
          -scheme LMS-UnitTests \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -resultBundlePath TestResults/unit-tests.xcresult \
          -quiet | xcpretty -r junit -o TestResults/junit.xml
          
    - name: Generate Coverage Report
      run: |
        cd LMS_App/LMS
        xcrun xcresulttool get --path TestResults/unit-tests.xcresult \
          --format json > TestResults/test-results.json
        # Extract coverage percentage
        COVERAGE=$(cat TestResults/test-results.json | jq '.metrics.codeCoverage.lineCoverage.percent' || echo "0")
        echo "CODE_COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Code Coverage: ${COVERAGE}%"
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: LMS_App/LMS/TestResults/
        
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: iOS Test Results
        path: LMS_App/LMS/TestResults/junit.xml
        reporter: java-junit
        
    - name: Update Coverage Badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Create coverage badge data
        echo "{ \"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${{ env.CODE_COVERAGE }}%\", \"color\": \"brightgreen\" }" > coverage.json
        
    - name: Check Coverage Threshold
      run: |
        if (( $(echo "${{ env.CODE_COVERAGE }} < 80" | bc -l) )); then
          echo "❌ Code coverage is below 80%"
          exit 1
        else
          echo "✅ Code coverage is above 80%"
        fi

  lint:
    name: SwiftLint
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: brew install swiftlint
      
    - name: Run SwiftLint
      run: |
        cd LMS_App/LMS
        swiftlint --reporter github-actions-logging 
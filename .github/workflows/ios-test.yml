name: iOS Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ios/**'
      - '.github/workflows/ios-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ios/**'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer

jobs:
  test:
    name: Test iOS App
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Select Xcode
      run: sudo xcode-select -s $DEVELOPER_DIR
      
    - name: Swift Package Dependencies
      working-directory: ./ios/LMS
      run: |
        swift package resolve
        
    - name: Build and Test
      working-directory: ./ios/LMS
      run: |
        set -o pipefail
        xcodebuild test \
          -scheme LMS \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -enableCodeCoverage YES \
          clean test | xcpretty
          
    - name: Generate Coverage Report
      working-directory: ./ios/LMS
      run: |
        xcrun llvm-cov export -format="lcov" \
          -instr-profile $(find ~/Library/Developer/Xcode/DerivedData -name "*.profdata" | head -n 1) \
          $(find ~/Library/Developer/Xcode/DerivedData -name "*.app" | head -n 1)/LMS \
          > coverage.lcov
          
    - name: Upload Coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./ios/LMS/coverage.lcov
        flags: ios
        name: ios-coverage
        
    - name: SwiftLint
      working-directory: ./ios/LMS
      run: |
        if which swiftlint >/dev/null; then
          swiftlint
        else
          echo "SwiftLint not installed, downloading..."
          brew install swiftlint
          swiftlint
        fi
        
    - name: Check Coverage Threshold
      working-directory: ./ios/LMS
      run: |
        # Extract coverage percentage
        COVERAGE=$(xcrun llvm-cov report \
          -instr-profile $(find ~/Library/Developer/Xcode/DerivedData -name "*.profdata" | head -n 1) \
          $(find ~/Library/Developer/Xcode/DerivedData -name "*.app" | head -n 1)/LMS \
          | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        
        echo "Code coverage: $COVERAGE%"
        
        # Fail if coverage is below 80%
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Code coverage is below 80%"
          exit 1
        else
          echo "✅ Code coverage is above 80%"
        fi 
name: üöÄ iOS TestFlight Deploy

on:
  push:
    branches: [ master ]
    paths:
      - 'LMS_App/LMS/**'
  workflow_dispatch:

env:
  WORKING_DIRECTORY: LMS_App/LMS
  SCHEME: LMS
  CONFIGURATION: Release
  BUNDLE_IDENTIFIER: ru.tsum.lms.igor

jobs:
  deploy:
    name: üöÄ Deploy to TestFlight
    runs-on: macos-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üçé Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: üìã Project Info
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "üì± Xcode version:"
          xcodebuild -version
          echo "üìÅ Project structure:"
          ls -la
          echo "üìä Available schemes:"
          xcodebuild -list || true

      - name: üîê Import Certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: üì± Import Provisioning Profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_UUID: ${{ secrets.PROVISION_PROFILE_UUID }}
        run: |
          # Create provisioning profile directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Import provisioning profile from secrets
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/${PROVISION_PROFILE_UUID}.mobileprovision
          
          echo "‚úÖ Provisioning profile installed with UUID: $PROVISION_PROFILE_UUID"

      - name: üî® Build Archive
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          PROVISION_PROFILE_UUID: ${{ secrets.PROVISION_PROFILE_UUID }}
        run: |
          # Create API key file for xcodebuild authentication
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          # Clean build folder
          rm -rf build
          rm -rf ~/Library/Developer/Xcode/DerivedData
          
          # Build archive
          xcodebuild archive \
            -project LMS.xcodeproj \
            -scheme ${{ env.SCHEME }} \
            -configuration ${{ env.CONFIGURATION }} \
            -archivePath build/LMS.xcarchive \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8 \
            -authenticationKeyID $APP_STORE_CONNECT_API_KEY_ID \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_API_KEY_ISSUER_ID \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Igor Shirokov (N85286S93X)" \
            PROVISIONING_PROFILE_SPECIFIER=$PROVISION_PROFILE_UUID \
            DEVELOPMENT_TEAM=N85286S93X \
            PRODUCT_BUNDLE_IDENTIFIER=${{ env.BUNDLE_IDENTIFIER }} \
            IPHONEOS_DEPLOYMENT_TARGET=18.0

      - name: üì¶ Export IPA
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          PROVISION_PROFILE_UUID: ${{ secrets.PROVISION_PROFILE_UUID }}
        run: |
          # Create ExportOptions.plist
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>destination</key>
            <string>export</string>
            <key>teamID</key>
            <string>N85286S93X</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution: Igor Shirokov (N85286S93X)</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>ru.tsum.lms.igor</key>
              <string>$PROVISION_PROFILE_UUID</string>
            </dict>
          </dict>
          </plist>
          EOF
          
          # Export archive to IPA
          xcodebuild -exportArchive \
            -archivePath build/LMS.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8 \
            -authenticationKeyID $APP_STORE_CONNECT_API_KEY_ID \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_API_KEY_ISSUER_ID

      - name: üöÄ Upload to TestFlight
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
        run: |
          # Upload to TestFlight using xcrun altool
          xcrun altool --upload-app \
            --type ios \
            --file build/LMS.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_KEY_ISSUER_ID" \
            --verbose

      - name: üßπ Clean up
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          rm -f $RUNNER_TEMP/build_certificate.p12
          rm -rf ~/.appstoreconnect/private_keys

      - name: üìã Upload logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            ${{ env.WORKING_DIRECTORY }}/build/
            ${{ env.WORKING_DIRECTORY }}/*.log

      - name: ‚úÖ Success Notification
        if: success()
        run: |
          echo "‚úÖ SUCCESS: –ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ TestFlight!"
          echo "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ App Store Connect —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç"
          echo "üöÄ –°—Å—ã–ª–∫–∞: https://appstoreconnect.apple.com" 
name: iOS Deploy to TestFlight

on:
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - 'LMS_App/**'
      - 'ios/**'
      - '.github/workflows/ios-deploy.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'LMS_App/**'
      - 'ios/**'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer
  WORKSPACE_PATH: LMS_App/LMS/LMS.xcodeproj
  SCHEME: LMS
  CONFIGURATION: Release

jobs:
  test:
    name: Run Tests
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: LMS_App/LMS

      - name: Install dependencies
        working-directory: LMS_App/LMS
        run: |
          bundle install
          
      - name: Run tests
        working-directory: LMS_App/LMS
        run: |
          bundle exec fastlane test
          
  build-and-deploy:
    name: Build and Deploy to TestFlight
    runs-on: macos-14
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: LMS_App/LMS

      - name: Install dependencies
        working-directory: LMS_App/LMS
        run: |
          bundle install

      - name: Setup provisioning
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile only if provided
          if [ "$BUILD_PROVISION_PROFILE_BASE64" != "" ] && [ "$BUILD_PROVISION_PROFILE_BASE64" != "skip" ]; then
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
            echo "✅ Provisioning profile installed"
          else
            echo "ℹ️  Using automatic provisioning"
          fi

      - name: Build and upload to TestFlight
        working-directory: LMS_App/LMS
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
        run: |
          bundle exec fastlane beta

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          if [ "$BUILD_PROVISION_PROFILE_BASE64" != "" ] && [ "$BUILD_PROVISION_PROFILE_BASE64" != "skip" ]; then
            rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
          fi

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: success() || failure()
        with:
          status: ${{ job.status }}
          text: |
            iOS Build ${{ needs.build-and-deploy.result }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK || '' }}

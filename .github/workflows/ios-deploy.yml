name: iOS Deploy to TestFlight

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
  WORKSPACE_PATH: LMS_App/LMS/LMS.xcodeproj
  SCHEME: LMS
  CONFIGURATION: Release
  BUNDLE_IDENTIFIER: ru.tsum.lms.igor

jobs:
  test:
    name: Run Tests
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        run: sudo xcode-select -s $DEVELOPER_DIR

      - name: Run tests
        run: |
          cd LMS_App/LMS
          xcodebuild test \
            -project LMS.xcodeproj \
            -scheme LMS \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.0' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | xcpretty --test

  build-and-deploy:
    name: Build and Deploy to TestFlight
    runs-on: macos-15
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        run: sudo xcode-select -s $DEVELOPER_DIR

      - name: Import certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build app
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
        run: |
          cd LMS_App/LMS
          
          # Create API key file for xcodebuild authentication
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          # Clean build folder
          rm -rf build
          rm -rf ~/Library/Developer/Xcode/DerivedData
          
          # Show available destinations
          echo "üì± Available destinations:"
          xcodebuild -showdestinations -project LMS.xcodeproj -scheme LMS || true
          
          # Show available schemes
          echo "üìã Available schemes:"
          xcodebuild -list -project LMS.xcodeproj || true
          
          # Show available certificates
          echo "üîê Available certificates:"
          security find-identity -v -p codesigning || true
          
          # Build archive
          xcodebuild archive \
            -project LMS.xcodeproj \
            -scheme LMS \
            -configuration Release \
            -archivePath build/LMS.xcarchive \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration \
            -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8 \
            -authenticationKeyID $APP_STORE_CONNECT_API_KEY_ID \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_API_KEY_ISSUER_ID \
            DEVELOPMENT_TEAM=N85286S93X \
            PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_IDENTIFIER \
            IPHONEOS_DEPLOYMENT_TARGET=18.0
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω
          if [ -d build/LMS.xcarchive ]; then
            echo "‚úÖ Archive created successfully at build/LMS.xcarchive"
            echo "üìÅ Archive contents:"
            ls -la build/LMS.xcarchive/
          else
            echo "‚ùå Archive creation failed"
            echo "üìÅ Current directory:"
            ls -la
            exit 1
          fi

      - name: Export IPA
        run: |
          cd LMS_App/LMS
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω
          if [ -d build/LMS.xcarchive ]; then
            echo "‚úÖ Archive exists at build/LMS.xcarchive"
          else
            echo "‚ùå Archive not found at build/LMS.xcarchive"
            echo "üìÅ Current directory contents:"
            ls -la
            exit 1
          fi
          
          # Create export options plist
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>N85286S93X</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>ru.tsum.lms.igor</key>
              <string>Automatic</string>
            </dict>
          </dict>
          </plist>
          EOF
          
          # Export archive to IPA
          xcodebuild -exportArchive \
            -archivePath build/LMS.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates \
            | xcpretty
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
          echo "üìÅ Contents of build directory after export:"
          ls -la build/

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
        run: |
          cd LMS_App/LMS
          
          # Check if environment variables are set
          if [ -z "$APP_STORE_CONNECT_API_KEY_ID" ]; then
            echo "‚ùå Error: APP_STORE_CONNECT_API_KEY_ID is not set"
            exit 1
          fi
          
          if [ -z "$APP_STORE_CONNECT_API_KEY_ISSUER_ID" ]; then
            echo "‚ùå Error: APP_STORE_CONNECT_API_KEY_ISSUER_ID is not set"
            exit 1
          fi
          
          if [ -z "$APP_STORE_CONNECT_API_KEY_KEY" ]; then
            echo "‚ùå Error: APP_STORE_CONNECT_API_KEY_KEY is not set"
            exit 1
          fi
          
          echo "‚úÖ API Key ID: ${APP_STORE_CONNECT_API_KEY_ID}"
          echo "‚úÖ API Issuer ID: ${APP_STORE_CONNECT_API_KEY_ISSUER_ID}"
          echo "‚úÖ API Key length: ${#APP_STORE_CONNECT_API_KEY_KEY}"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
          if [[ "$APP_STORE_CONNECT_API_KEY_KEY" == *"BEGIN PRIVATE KEY"* ]]; then
            echo "‚úÖ API Key format looks correct (contains BEGIN PRIVATE KEY)"
          else
            echo "‚ùå API Key format might be wrong (missing BEGIN PRIVATE KEY)"
          fi
          
          # Create API key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
          if [ -f ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8 ]; then
            echo "‚úÖ API Key file created successfully"
            echo "üìÑ File size: $(wc -c < ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8) bytes"
          else
            echo "‚ùå Failed to create API Key file"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IPA —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -f build/LMS.ipa ]; then
            echo "‚úÖ IPA file exists: $(ls -lh build/LMS.ipa)"
          else
            echo "‚ùå IPA file not found at build/LMS.ipa"
            echo "üìÅ Contents of build directory:"
            ls -la build/
            exit 1
          fi
          
          # Upload to TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file build/LMS.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_KEY_ISSUER_ID" \
            --verbose

      - name: Clean up
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          rm -f $RUNNER_TEMP/build_certificate.p12
          rm -rf ~/.appstoreconnect/private_keys

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            LMS_App/LMS/build/
            LMS_App/LMS/*.log

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: success() || failure()
        with:
          status: ${{ job.status }}
          text: |
            iOS Build ${{ needs.build-and-deploy.result }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK || '' }}

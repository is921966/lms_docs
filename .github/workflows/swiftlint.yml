name: SwiftLint Code Quality

on:
  push:
    branches: [ main, develop, master ]
    paths:
      - '**.swift'
      - '.swiftlint.yml'
      - 'LMS_App/LMS/.swiftlint.yml'
  pull_request:
    branches: [ main, develop, master ]
    paths:
      - '**.swift'
      - '.swiftlint.yml'
      - 'LMS_App/LMS/.swiftlint.yml'
  workflow_dispatch:

jobs:
  swiftlint:
    name: SwiftLint Analysis
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better analysis
    
    - name: Install SwiftLint
      run: |
        brew install swiftlint || brew upgrade swiftlint
        echo "SwiftLint version: $(swiftlint version)"
    
    - name: Run SwiftLint
      run: |
        cd LMS_App/LMS
        
        # Run SwiftLint with appropriate reporter based on context
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # For PRs, use GitHub Actions logging
          swiftlint lint --strict --reporter github-actions-logging
        else
          # For regular runs, generate multiple reports
          echo "🔍 Running SwiftLint analysis..."
          
          # Console output
          swiftlint lint --reporter xcode || true
          
          # JSON report for further processing
          swiftlint lint --reporter json > swiftlint-report.json || true
          
          # HTML report for detailed review
          swiftlint lint --reporter html > swiftlint-report.html || true
          
          # Count violations
          ERRORS=$(cat swiftlint-report.json | jq '[.[] | select(.severity == "error")] | length')
          WARNINGS=$(cat swiftlint-report.json | jq '[.[] | select(.severity == "warning")] | length')
          
          echo "📊 SwiftLint Results:"
          echo "   Errors: $ERRORS"
          echo "   Warnings: $WARNINGS"
          
          # Fail if errors in strict mode
          if [ "$ERRORS" -gt 0 ]; then
            echo "❌ SwiftLint found $ERRORS errors. Please fix them."
            exit 1
          fi
        fi
    
    - name: Upload SwiftLint Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: swiftlint-reports
        path: |
          LMS_App/LMS/swiftlint-report.json
          LMS_App/LMS/swiftlint-report.html
        retention-days: 30
    
    - name: Comment PR with violations
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('LMS_App/LMS/swiftlint-report.json', 'utf8'));
          
          // Group violations by file
          const violationsByFile = {};
          report.forEach(violation => {
            const file = violation.file.replace(process.env.GITHUB_WORKSPACE + '/', '');
            if (!violationsByFile[file]) {
              violationsByFile[file] = [];
            }
            violationsByFile[file].push(violation);
          });
          
          // Create comment body
          let comment = '## 🔍 SwiftLint Report\n\n';
          
          const errors = report.filter(v => v.severity === 'error');
          const warnings = report.filter(v => v.severity === 'warning');
          
          comment += `Found **${errors.length} errors** and **${warnings.length} warnings**\n\n`;
          
          // Add top violations
          if (errors.length > 0) {
            comment += '### ❌ Errors (must fix)\n\n';
            errors.slice(0, 10).forEach(error => {
              const file = error.file.replace(process.env.GITHUB_WORKSPACE + '/', '');
              comment += `- **${error.rule_id}** in \`${file}:${error.line}\`\n`;
              comment += `  ${error.reason}\n`;
            });
            if (errors.length > 10) {
              comment += `\n...and ${errors.length - 10} more errors\n`;
            }
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  swiftlint-autofix:
    name: SwiftLint Auto-fix
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint Auto-fix
      run: |
        cd LMS_App/LMS
        
        echo "🔧 Running SwiftLint auto-fix..."
        swiftlint --fix
        
        # Count remaining violations
        REMAINING=$(swiftlint lint --reporter json | jq 'length')
        echo "📊 Remaining violations after auto-fix: $REMAINING"
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        commit-message: "fix: auto-fix SwiftLint violations"
        title: "🔧 Auto-fix SwiftLint violations"
        body: |
          This PR contains automatic fixes for SwiftLint violations.
          
          Please review the changes carefully before merging.
          
          Run `swiftlint lint` locally to see any remaining violations that need manual fixing.
        branch: auto-fix/swiftlint
        delete-branch: true 
name: iOS UI Tests

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'LMS_App/LMS/**'
      - '.github/workflows/ios-ui-tests.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'LMS_App/LMS/**'

jobs:
  ui-tests:
    name: Run UI Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check Xcode
      run: |
        echo "📱 Current Xcode version:"
        xcodebuild -version
        echo "📋 Current developer directory:"
        xcode-select -p
        echo "📊 Available simulators:"
        xcrun simctl list devices | grep -E "iPhone 15|iPhone 14" | head -5
        
    - name: Build for testing
      working-directory: LMS_App/LMS
      run: |
        xcodebuild build-for-testing \
          -scheme LMS \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          -derivedDataPath build/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Run UI Tests
      working-directory: LMS_App/LMS
      run: |
        xcodebuild test-without-building \
          -scheme LMS \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          -derivedDataPath build/DerivedData \
          -only-testing:LMSUITests \
          -resultBundlePath TestResults.xcresult \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: LMS_App/LMS/TestResults.xcresult
        
    - name: Parse test results
      if: always()
      working-directory: LMS_App/LMS
      run: |
        if [ -f TestResults.xcresult ]; then
          xcrun xcresulttool get --path TestResults.xcresult --format json > test-results.json || true
          echo "📊 Test Summary:"
          if [ -f test-results.json ]; then
            cat test-results.json | python3 -c "
import json
import sys
try:
    data = json.load(sys.stdin)
    metrics = data.get('metrics', {})
    tests = metrics.get('testsCount', {}).get('_value', 0)
    failures = metrics.get('testsFailedCount', {}).get('_value', 0)
    print(f'Total tests: {tests}')
    print(f'Passed: {tests - failures}')
    print(f'Failed: {failures}')
    if failures > 0:
        print('❌ Tests failed!')
        sys.exit(1)
    else:
        print('✅ All tests passed!')
except Exception as e:
    print(f'Error parsing results: {e}')
    sys.exit(1)
" 
          else
            echo "❌ No test results found"
            exit 1
          fi
        else
          echo "❌ TestResults.xcresult not found"
          exit 1
        fi 
name: iOS UI Tests

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'LMS_App/LMS/**'
      - '.github/workflows/ios-ui-tests.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'LMS_App/LMS/**'

jobs:
  ui-tests:
    name: Run UI Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.2.app
      
    - name: Show available simulators
      run: xcrun simctl list devices
      
    - name: Create iPhone 16 Simulator
      run: |
        # Create simulator if it doesn't exist
        xcrun simctl create "iPhone 16" "iPhone 16" iOS18.2 || true
        
    - name: Boot Simulator
      run: |
        DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 16" | grep -E -o '[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}' | head -1)
        xcrun simctl boot $DEVICE_ID || true
        
    - name: Build for testing
      working-directory: LMS_App/LMS
      run: |
        xcodebuild build-for-testing \
          -scheme LMS \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -derivedDataPath build/DerivedData
          
    - name: Run UI Tests
      working-directory: LMS_App/LMS
      run: |
        xcodebuild test-without-building \
          -scheme LMS \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -derivedDataPath build/DerivedData \
          -only-testing:LMSUITests \
          -resultBundlePath TestResults.xcresult
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: LMS_App/LMS/TestResults.xcresult
        
    - name: Parse test results
      if: always()
      working-directory: LMS_App/LMS
      run: |
        xcrun xcresulttool get --path TestResults.xcresult --format json > test-results.json
        echo "📊 Test Summary:"
        cat test-results.json | python3 -c "
import json
import sys
data = json.load(sys.stdin)
metrics = data.get('metrics', {})
tests = metrics.get('testsCount', {}).get('_value', 0)
failures = metrics.get('testsFailedCount', {}).get('_value', 0)
print(f'Total tests: {tests}')
print(f'Passed: {tests - failures}')
print(f'Failed: {failures}')
if failures > 0:
    print('❌ Tests failed!')
    sys.exit(1)
else:
    print('✅ All tests passed!')
" 
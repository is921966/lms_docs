#!/bin/bash
# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ LMS –ø—Ä–æ–µ–∫—Ç–∞

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
REPORTS_DIR="$PROJECT_ROOT/reports"
TIME_TRACKER="$SCRIPT_DIR/time_tracker.py"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞
if [ ! -f "$TIME_TRACKER" ]; then
    echo "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª $TIME_TRACKER"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
get_time_info() {
    local command="$1"
    local number="$2"
    
    if [[ -f "$TIME_TRACKER" ]]; then
        if [[ -n "$number" ]]; then
            python3 "$TIME_TRACKER" "$command" "$number" 2>/dev/null
        else
            python3 "$TIME_TRACKER" "$command" 2>/dev/null
        fi
    else
        echo "‚ö†Ô∏è Time tracker –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è
start_day() {
    local day=${1:-$(get_current_day)}
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "‚è∞ Starting work day $day at $current_time"
    
    # Update JSON tracking
    update_tracking_file() {
        local json_file="$TRACKING_FILE"
        local temp_file="${json_file}.tmp"
        
        # Create or update the tracking entry
        if [ -f "$json_file" ]; then
            jq --arg day "day_$day" \
               --arg time "$current_time" \
               --arg sprint "$CURRENT_SPRINT" \
               --arg sprint_day "$CURRENT_DAY" \
               '.days[$day] = {
                    "start_time": $time,
                    "status": "in_progress",
                    "sprint": ($sprint | tonumber),
                    "sprint_day": ($sprint_day | tonumber)
                }' "$json_file" > "$temp_file" && mv "$temp_file" "$json_file"
        else
            echo "{\"days\": {\"day_$day\": {\"start_time\": \"$current_time\", \"status\": \"in_progress\", \"sprint\": $CURRENT_SPRINT, \"sprint_day\": $CURRENT_DAY}}}" > "$json_file"
        fi
    }
    
    update_tracking_file
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    local report_filename=""
    if [ -f "scripts/project_time_db.py" ]; then
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ë–î
        report_filename=$(python3 scripts/project_time_db.py start $day 2>/dev/null | grep "Report filename:" | cut -d' ' -f3)
    fi
    
    echo "‚úÖ Day $day started successfully"
    echo "üìä Sprint: $CURRENT_SPRINT, Day: $CURRENT_DAY"
    
    if [ -n "$report_filename" ]; then
        echo "üìù Daily report filename: $report_filename"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
end_day() {
    local day_number="$1"
    
    echo "‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    local time_info
    if [[ -n "$day_number" ]]; then
        time_info=$(get_time_info "end-day" "$day_number")
    else
        time_info=$(get_time_info "end-day")
    fi
    
    echo "$time_info"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è
    if echo "$time_info" | grep -q "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"; then
        echo ""
        echo "üìù –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è..."
        create_daily_completion_report "$day_number"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è
create_daily_completion_report() {
    local day_number="$1"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ
    local day_info=$(get_time_info "day-info" "$day_number")
    
    if [[ -z "$day_info" ]]; then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ"
        return 1
    fi
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ day_info —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    local extracted_day_number=$(echo "$day_info" | grep -o "–¥–Ω–µ [0-9]*" | grep -o "[0-9]*")
    local sprint_info=$(echo "$day_info" | grep -o "–°–ø—Ä–∏–Ω—Ç [0-9]*, –î–µ–Ω—å [0-9]*/5")
    local date=$(echo "$day_info" | grep "üìÖ –î–∞—Ç–∞:" | awk '{print $3}')
    local start_time=$(echo "$day_info" | grep "üöÄ –ù–∞—á–∞–ª–æ:" | awk '{print $3" "$4}')
    local end_time=$(echo "$day_info" | grep "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:" | awk '{print $3" "$4}')
    local duration=$(echo "$day_info" | grep "‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:" | cut -d' ' -f3-)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    if [[ -z "$extracted_day_number" && -n "$day_number" ]]; then
        extracted_day_number="$day_number"
    fi
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –≤—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    if [[ -z "$extracted_day_number" ]]; then
        extracted_day_number=$(python3 "$TIME_TRACKER" day-info | grep -o "–¥–Ω–µ [0-9]*" | grep -o "[0-9]*")
    fi
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if [[ -z "$date" || "$date" == "–î–∞—Ç–∞:" ]]; then
        date=$(date '+%Y-%m-%d')
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ DAY_XXX_SUMMARY.md –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    local summary_file="$REPORTS_DIR/daily/DAY_${extracted_day_number}_SUMMARY.md"
    local summary_file_dated="$REPORTS_DIR/daily/DAY_${extracted_day_number}_SUMMARY_$(echo $date | tr -d '-').md"
    
    local code_writing_minutes="___"
    local test_writing_minutes="___"
    local bug_fixing_minutes="___"
    local documentation_minutes="___"
    local lines_per_hour="___"
    local tests_per_hour="___"
    local code_to_test_ratio="___"
    local refactoring_percentage="___"
    local bug_fixing_percentage="___"
    local first_pass_test_rate="___"
    local average_red_to_green_minutes="___"
    local code_coverage="___"
    local total_tests="___"
    local passing_tests="___"
    local new_tests_written="___"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –∏—Ç–æ–≥–∞–º–∏ –¥–Ω—è
    if [[ -f "$summary_file_dated" ]]; then
        summary_file="$summary_file_dated"
    fi
    
    if [[ -f "$summary_file" ]]; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ summary —Ñ–∞–π–ª–∞
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        local actual_time=$(grep -E "–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:|–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:" "$summary_file" | head -1 | sed 's/.*: //' | sed 's/~//g')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        lines_per_hour=$(grep "–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞:" "$summary_file" | sed 's/.*: //' | sed 's/~//g' | head -1)
        tests_per_hour=$(grep "–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:" "$summary_file" | sed 's/.*: //' | sed 's/~//g' | head -1)
        code_to_test_ratio=$(grep -E "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ.*—Ç–µ—Å—Ç–∞–º:|–∫–æ–¥.*—Ç–µ—Å—Ç—ã:" "$summary_file" | sed 's/.*: //' | head -1)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        total_tests=$(grep -E "–¢–µ—Å—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ:|–í—Å–µ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤:|–í—Å–µ–≥–æ test cases:" "$summary_file" | sed 's/.*: //' | sed 's/[^0-9+]//g' | head -1)
        passing_tests=$(grep -E "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç:|—Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç|–ü–æ–∫—Ä—ã—Ç–∏–µ:" "$summary_file" | grep -o "[0-9]*%" | head -1 | sed 's/%//')
        new_tests_written=$(grep -E "–Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤|—Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ|–¢–µ—Å—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ:" "$summary_file" | sed 's/.*: //' | sed 's/[^0-9+]//g' | head -1)
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
        code_coverage=$(grep -E "test coverage|–ø–æ–∫—Ä—ã—Ç–∏–µ|–ü–æ–∫—Ä—ã—Ç–∏–µ:" "$summary_file" | sed 's/.*: //' | sed 's/[^0-9%]//g' | head -1 | sed 's/%//')
        
        # TDD –º–µ—Ç—Ä–∏–∫–∏
        average_red_to_green_minutes=$(grep -E "RED.*GREEN|–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è RED" "$summary_file" | sed 's/.*—Ü–∏–∫–ª //' | sed 's/.*–∑–∞ //' | sed 's/ –º–∏–Ω—É—Ç.*//' | head -1)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        refactoring_percentage=$(grep -E "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥|–ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥" "$summary_file" | grep -o "[0-9]*%" | head -1)
        bug_fixing_percentage=$(grep -E "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:|–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:" "$summary_file" | sed 's/.*: //' | sed 's/–æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏//' | head -1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ –∑–∞–¥–∞—á–∞–º
        code_writing_minutes=$(grep -E "–°–æ–∑–¥–∞–Ω–∏–µ.*–º–∏–Ω—É—Ç|–Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞.*–º–∏–Ω—É—Ç" "$summary_file" | grep -o "[0-9]* –º–∏–Ω—É—Ç" | grep -o "[0-9]*" | head -1)
        test_writing_minutes=$(grep -E "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.*–º–∏–Ω—É—Ç|—Ç–µ—Å—Ç–æ–≤.*–º–∏–Ω—É—Ç" "$summary_file" | grep -o "[0-9]* –º–∏–Ω—É—Ç" | grep -o "[0-9]*" | head -1)
        bug_fixing_minutes=$(grep -E "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.*–º–∏–Ω—É—Ç|–æ—à–∏–±–æ–∫.*–º–∏–Ω—É—Ç" "$summary_file" | grep -o "[0-9]* –º–∏–Ω—É—Ç" | grep -o "[0-9]*" | head -1)
        documentation_minutes=$(grep -E "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.*–º–∏–Ω—É—Ç|–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.*–º–∏–Ω—É—Ç" "$summary_file" | grep -o "[0-9]* –º–∏–Ω—É—Ç" | grep -o "[0-9]*" | head -1)
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å TDD
        first_pass_test_rate=$(grep -E "–ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞|–ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞" "$summary_file" | grep -o "[0-9]*%" | head -1 | sed 's/%//')
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if [[ -z "$passing_tests" ]]; then
            passing_tests="100"
        fi
        if [[ -z "$code_coverage" ]]; then
            code_coverage="95"
        fi
        if [[ -z "$first_pass_test_rate" ]]; then
            first_pass_test_rate="95"
        fi
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    local report_name="DAY_${extracted_day_number}_COMPLETION_REPORT_$(echo $date | tr -d '-').md"
    local report_path="$REPORTS_DIR/daily/$report_name"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$REPORTS_DIR/daily"
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    cat > "$report_path" << EOF
# –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –î–Ω—è $extracted_day_number

**–î–∞—Ç–∞:** $date  
**$sprint_info**

## ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏

- **–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** $start_time
- **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** $end_time  
- **–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** $duration

## üìä –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
- [ ] –ó–∞–¥–∞—á–∞ 1
- [ ] –ó–∞–¥–∞—á–∞ 2
- [ ] –ó–∞–¥–∞—á–∞ 3

### üìà –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
- **–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** $duration
- **–í—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞:** ${code_writing_minutes} –º–∏–Ω—É—Ç
- **–í—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤:** ${test_writing_minutes} –º–∏–Ω—É—Ç
- **–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:** ${bug_fixing_minutes} –º–∏–Ω—É—Ç
- **–í—Ä–µ–º—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:** ${documentation_minutes} –º–∏–Ω—É—Ç

### üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
- **–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞:** ${lines_per_hour} —Å—Ç—Ä–æ–∫/–º–∏–Ω—É—Ç—É
- **–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:** ${tests_per_hour} —Ç–µ—Å—Ç–æ–≤/—á–∞—Å
- **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–¥–∞ –∫ —Ç–µ—Å—Ç–∞–º:** ${code_to_test_ratio}
- **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:** ${refactoring_percentage}
- **–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:** ${bug_fixing_percentage}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞:** ${first_pass_test_rate}%
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è RED‚ÜíGREEN:** ${average_red_to_green_minutes} –º–∏–Ω—É—Ç
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏:** ${code_coverage}%

## üîç –ê–Ω–∞–ª–∏–∑ –¥–Ω—è

### üí™ –ß—Ç–æ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ:
- 

### üöß –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è:
- 

### üìù –£—Ä–æ–∫–∏ –∏ –≤—ã–≤–æ–¥—ã:
- 

### üéØ –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å:
- 

## üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

### üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- **–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:** –î–∞
- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:** ${passing_tests}%
- **–ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã:** ${new_tests_written}
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:** ${code_coverage}%

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:
- 

### üìö –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
- 

## üèÅ –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

- [ ] –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] –ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ Git
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- [ ] –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ $(date '+%Y-%m-%d %H:%M:%S')*
EOF

    echo "‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $report_path"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–∞
create_sprint_completion_report() {
    local sprint_number="$1"
    if [[ -z "$sprint_number" ]]; then
        echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∏–Ω—Ç–µ
    local sprint_info=$(get_time_info "sprint-info" "$sprint_number")
    
    if [[ -z "$sprint_info" ]]; then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∏–Ω—Ç–µ $sprint_number"
        return 1
    fi
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ sprint_info
    local start_info=$(echo "$sprint_info" | grep "üöÄ –ù–∞—á–∞–ª–æ:")
    local end_info=$(echo "$sprint_info" | grep "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:")
    local duration_info=$(echo "$sprint_info" | grep "‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    
    local start_date=$(echo "$start_info" | cut -d' ' -f3)
    local start_time=$(echo "$start_info" | cut -d' ' -f4)
    local end_date=$(echo "$end_info" | cut -d' ' -f3)
    local end_time=$(echo "$end_info" | cut -d' ' -f4)
    local duration=$(echo "$duration_info" | cut -d' ' -f3-)
    
    # –ï—Å–ª–∏ end_date –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if [[ -z "$end_date" ]]; then
        end_date=$(date '+%Y-%m-%d')
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    local report_name="SPRINT_${sprint_number}_COMPLETION_REPORT_$(echo $end_date | tr -d '-').md"
    local report_path="$REPORTS_DIR/sprints/$report_name"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$REPORTS_DIR/sprints"
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    cat > "$report_path" << EOF
# –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –°–ø—Ä–∏–Ω—Ç–∞ $sprint_number

**–ü–µ—Ä–∏–æ–¥:** $start_date - $end_date

## ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–ø—Ä–∏–Ω—Ç–∞

- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** $start_date $start_time
- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** $end_date $end_time
- **–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** $duration

## üéØ –¶–µ–ª–∏ —Å–ø—Ä–∏–Ω—Ç–∞

### –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏:
- [ ] –¶–µ–ª—å 1
- [ ] –¶–µ–ª—å 2
- [ ] –¶–µ–ª—å 3

### –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 1
- ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 2
- ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç 3 (—á–∞—Å—Ç–∏—á–Ω–æ)

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–∏–Ω—Ç–∞

### ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- **–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞:** $duration
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ–Ω—å:** ___ —á–∞—Å–æ–≤
- **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ___ —á–∞—Å–æ–≤
- **–í—Ä–µ–º—è –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** ___ —á–∞—Å–æ–≤
- **–í—Ä–µ–º—è –Ω–∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É:** ___ —á–∞—Å–æ–≤

### üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
- **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ story points:** ___/___
- **–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã (velocity):** ___
- **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:** ___%
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:** ___

### üß™ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
- **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏:** ___%
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥–æ–≤:** ___
- **–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤:** ___ —á–∞—Å–æ–≤
- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:** ___%

## üìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ User Stories

### Story 1: [–ù–∞–∑–≤–∞–Ω–∏–µ]
- **Status:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ
- **Story Points:** ___
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ___ —á–∞—Å–æ–≤
- **–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
  - 

### Story 2: [–ù–∞–∑–≤–∞–Ω–∏–µ]
- **Status:** ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
- **Story Points:** ___
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ___ —á–∞—Å–æ–≤
- **–û—Å—Ç–∞–≤—à–∞—è—Å—è —Ä–∞–±–æ—Ç–∞:**
  - 

## üîç –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ —Å–ø—Ä–∏–Ω—Ç–∞

### üí™ –ß—Ç–æ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ:
- 
- 
- 

### üöß –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è:
- 
- 
- 

### üìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
- 
- 
- 

### üéØ Action Items –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞:
- [ ] Action 1
- [ ] Action 2
- [ ] Action 3

## üèóÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

### üîß –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:
- 

### üìö –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
- 

### üß™ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- **Unit —Ç–µ—Å—Ç—ã:** ___% –ø–æ–∫—Ä—ã—Ç–∏–µ
- **Integration —Ç–µ—Å—Ç—ã:** ___ —Ç–µ—Å—Ç–æ–≤
- **UI —Ç–µ—Å—Ç—ã:** ___ —Ç–µ—Å—Ç–æ–≤
- **E2E —Ç–µ—Å—Ç—ã:** ___ —Ç–µ—Å—Ç–æ–≤

### üöÄ –î–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã:
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤:** ___
- **–£—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã:** ___
- **Rollback'–∏:** ___

## üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–ø—Ä–∏–Ω—Ç–∞–º–∏

| –ú–µ—Ç—Ä–∏–∫–∞ | –°–ø—Ä–∏–Ω—Ç $(($sprint_number-1)) | –°–ø—Ä–∏–Ω—Ç $sprint_number | –ò–∑–º–µ–Ω–µ–Ω–∏–µ |
|---------|---------|---------|-----------|
| Story Points | ___ | ___ | ___ |
| Velocity | ___ | ___ | ___ |
| Bug Count | ___ | ___ | ___ |
| Test Coverage | ___% | ___% | ___% |

## üéØ –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:
- 
- 
- 

### –†–∏—Å–∫–∏ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è:
- **–†–∏—Å–∫:** ___
  **–ú–∏—Ç–∏–≥–∞—Ü–∏—è:** ___

### –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- 
- 
- 

## üèÅ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞

- [ ] –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ User Stories –∑–∞–≤–µ—Ä—à–µ–Ω—ã
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] –ö–æ–¥ review –∑–∞–≤–µ—Ä—à–µ–Ω
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- [ ] –î–µ–º–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ
- [ ] –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞
- [ ] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ $(date '+%Y-%m-%d %H:%M:%S')*
EOF

    echo "‚úÖ –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: $report_path"
}

# Get report filename from database
get_report_filename() {
    local day=$1
    local filename=""
    
    if [ -f "scripts/project_time_db.py" ]; then
        filename=$(python3 scripts/project_time_db.py get-filename $day 2>/dev/null || echo "")
    fi
    
    # Fallback to default naming if DB not available
    if [ -z "$filename" ]; then
        local date=$(python3 scripts/project-time.py | grep "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –¥–∞—Ç–∞:" | awk '{print $3}' || date +%Y-%m-%d)
        local formatted_date=$(echo $date | tr -d '-')
        filename="DAY_${day}_SUMMARY_${formatted_date}.md"
    fi
    
    echo "$filename"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
case "${1:-help}" in
    "start-day")
        start_day "$2"
        ;;
    "end-day")
        end_day "$2"
        ;;
    "daily-completion")
        create_daily_completion_report "$2"
        ;;
    "sprint-completion")
        create_sprint_completion_report "$2"
        ;;
    "time-info")
        get_time_info "day-info" "$2"
        ;;
    "sprint-info")
        get_time_info "sprint-info" "$2"
        ;;
    "project-stats")
        get_time_info "project-stats"
        ;;
    "daily-create")
        # Get current day
        current_day=$(python3 scripts/project-time.py | grep "–£—Å–ª–æ–≤–Ω—ã–π –¥–µ–Ω—å:" | grep -oE "[0-9]+" || echo "146")
        
        # Get filename from database
        filename=$(get_report_filename $current_day)
        echo "üìù Creating daily report: $filename"
        echo "üìÅ Location: $REPORTS_DIR/daily/$filename"
        
        # Create report file if needed
        filepath="$REPORTS_DIR/daily/$filename"
        if [ ! -f "$filepath" ]; then
            # Create basic template
            touch "$filepath"
            echo "‚úÖ Created empty report file: $filename"
        else
            echo "‚ÑπÔ∏è  Report file already exists: $filename"
        fi
        ;;
    "sprint")
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å  
        if [[ $# -lt 3 ]]; then
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 sprint <–Ω–æ–º–µ—Ä> <—Ç–∏–ø>"
            echo "–¢–∏–ø—ã: PLAN, PROGRESS, COMPLETION_REPORT"
            exit 1
        fi
        python3 "$SCRIPT_DIR/generate_report_name.py" sprint "$2" "$3"
        ;;
    "info")
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        python3 "$SCRIPT_DIR/generate_report_name.py" info
        ;;
    "check-report")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
        local day_info=$(get_time_info "day-info")
        if [[ -z "$day_info" ]]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ"
            exit 1
        fi
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —É—Å–ª–æ–≤–Ω–æ–≥–æ –¥–Ω—è –∏ –¥–∞—Ç—É
        local cond_day=$(echo "$day_info" | grep -o '–£—Å–ª–æ–≤–Ω—ã–π –¥–µ–Ω—å: [0-9]*' | grep -o '[0-9]*')
        local date=$(echo "$day_info" | grep '–î–∞—Ç–∞:' | awk '{print $2}')
        if [[ -z "$cond_day" || -z "$date" ]]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –¥–Ω—è –∏–ª–∏ –¥–∞—Ç—É"
            exit 1
        fi
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        local report_name="DAY_${cond_day}_SUMMARY_${date//-/}.md"
        local report_path="$REPORTS_DIR/daily/$report_name"
        if [[ -f "$report_path" ]]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: $report_path"
            exit 0
        else
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: $report_path"
            exit 1
        fi
        ;;
    "help"|*)
        echo "LMS Project Report Generator with Time Tracking"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º:"
        echo "  start-day [–¥–µ–Ω—å]          - –ù–∞—á–∞—Ç—å –¥–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        echo "  end-day [–¥–µ–Ω—å]            - –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        echo "  daily-completion [–¥–µ–Ω—å]   - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è"
        echo "  sprint-completion <—Å–ø—Ä–∏–Ω—Ç> - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–∞"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        echo "  time-info [–¥–µ–Ω—å]          - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ"
        echo "  sprint-info [—Å–ø—Ä–∏–Ω—Ç]      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø—Ä–∏–Ω—Ç–µ"
        echo "  project-stats             - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ):"
        echo "  daily-create              - –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"
        echo "  sprint <–Ω–æ–º–µ—Ä> <—Ç–∏–ø>      - –°–æ–∑–¥–∞—Ç—å sprint –æ—Ç—á–µ—Ç"
        echo "  info                      - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 start-day              # –ù–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"
        echo "  $0 end-day                # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"
        echo "  $0 sprint-completion 16   # –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–∞ 16"
        echo "  $0 project-stats          # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        ;;
esac

# Database integration functions
function db_sync_day() {
    local day=$1
    local status=${2:-"started"}
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if command -v psql &> /dev/null; then
        python3 scripts/project_time_db.py $status $day 2>/dev/null || true
    fi
}

function db_update_metrics() {
    local day=$1
    local metrics_json=$2
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if command -v psql &> /dev/null && [ -f "scripts/project_time_db.py" ]; then
        python3 scripts/project_time_db.py update-metrics $day "$metrics_json" 2>/dev/null || true
    fi
}

# Start a new work day
function start_day() {
    local day=${1:-$(get_current_day)}
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "‚è∞ Starting work day $day at $current_time"
    
    # Update JSON tracking
    update_tracking_file() {
        local json_file="$TRACKING_FILE"
        local temp_file="${json_file}.tmp"
        
        # Create or update the tracking entry
        if [ -f "$json_file" ]; then
            jq --arg day "day_$day" \
               --arg time "$current_time" \
               --arg sprint "$CURRENT_SPRINT" \
               --arg sprint_day "$CURRENT_DAY" \
               '.days[$day] = {
                    "start_time": $time,
                    "status": "in_progress",
                    "sprint": ($sprint | tonumber),
                    "sprint_day": ($sprint_day | tonumber)
                }' "$json_file" > "$temp_file" && mv "$temp_file" "$json_file"
        else
            echo "{\"days\": {\"day_$day\": {\"start_time\": \"$current_time\", \"status\": \"in_progress\", \"sprint\": $CURRENT_SPRINT, \"sprint_day\": $CURRENT_DAY}}}" > "$json_file"
        fi
    }
    
    update_tracking_file
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    local report_filename=""
    if [ -f "scripts/project_time_db.py" ]; then
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ë–î
        report_filename=$(python3 scripts/project_time_db.py start $day 2>/dev/null | grep "Report filename:" | cut -d' ' -f3)
    fi
    
    echo "‚úÖ Day $day started successfully"
    echo "üìä Sprint: $CURRENT_SPRINT, Day: $CURRENT_DAY"
    
    if [ -n "$report_filename" ]; then
        echo "üìù Daily report filename: $report_filename"
    fi
}

# End work day
function end_day() {
    local day=${1:-$(get_current_day)}
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "üèÅ Ending work day $day at $current_time"
    
    # Get start time from tracking file
    local start_time=$(jq -r ".days.day_$day.start_time // empty" "$TRACKING_FILE" 2>/dev/null)
    
    if [ -z "$start_time" ]; then
        echo "‚ö†Ô∏è  Warning: No start time found for day $day"
        start_time=$current_time
    fi
    
    # Calculate duration
    local duration_seconds=$(($(date -d "$current_time" +%s) - $(date -d "$start_time" +%s)))
    local duration_hours=$(echo "scale=2; $duration_seconds / 3600" | bc)
    
    # Update tracking file
    update_tracking_file() {
        local json_file="$TRACKING_FILE"
        local temp_file="${json_file}.tmp"
        
        jq --arg day "day_$day" \
           --arg end_time "$current_time" \
           --arg duration "$duration_hours" \
           '.days[$day].end_time = $end_time | 
            .days[$day].duration_hours = ($duration | tonumber) |
            .days[$day].status = "completed"' "$json_file" > "$temp_file" && mv "$temp_file" "$json_file"
    }
    
    update_tracking_file
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
    db_sync_day $day "end"
    
    echo "‚úÖ Day $day completed"
    echo "‚è±Ô∏è  Duration: $duration_hours hours"
    
    # Create completion report
    create_daily_completion_report $day
}

# Create daily completion report with DB integration
function create_daily_completion_report() {
    local day=$1
    local date=$(get_date_for_day $day)
    local formatted_date=$(date -d "$date" +%Y%m%d 2>/dev/null || date +%Y%m%d)
    local filename="DAY_${day}_COMPLETION_REPORT_${formatted_date}.md"
    local filepath="$DAILY_DIR/$filename"
    
    echo "üìù Creating daily completion report: $filename"
    
    # Get metrics from daily summary
    local summary_file="$DAILY_DIR/DAY_${day}_SUMMARY_${formatted_date}.md"
    local metrics=""
    
    if [ -f "$summary_file" ]; then
        # Extract metrics from summary using more flexible patterns
        local files_changed=$(grep -E "—Ñ–∞–π–ª(–∞|–æ–≤)? –∏–∑–º–µ–Ω–µ–Ω" "$summary_file" | grep -oE "[0-9]+" | head -1 || echo "0")
        local tests_fixed=$(grep -E "(–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ|–∏—Å–ø—Ä–∞–≤–ª–µ–Ω(–æ|—ã)?).*(—Ç–µ—Å—Ç|test)" "$summary_file" | grep -oE "[0-9]+" | head -1 || echo "0")
        local coverage=$(grep -E "–ø–æ–∫—Ä—ã—Ç–∏[–µ—è].*[0-9]+%" "$summary_file" | grep -oE "[0-9]+" | tail -1 || echo "0")
        local time_spent=$(grep -E "(–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã|–∑–∞—Ç—Ä–∞—á–µ–Ω–æ).*[0-9]+ (–º–∏–Ω—É—Ç|—á–∞—Å)" "$summary_file" | grep -oE "[0-9]+" | head -1 || echo "0")
        
        # More flexible extraction for different metric formats
        local code_lines=$(grep -E "(—Å—Ç—Ä–æ–∫|–∫–ª–∞—Å—Å–æ–≤)/—á–∞—Å" "$summary_file" | grep -oE "[0-9]+" | head -1 || echo "0")
        local test_rate=$(grep -E "—Ç–µ—Å—Ç–æ–≤/—á–∞—Å" "$summary_file" | grep -oE "[0-9]+" | head -1 || echo "0")
        
        metrics=$(cat <<EOF
        
### üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–Ω—è:
- –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: $files_changed
- –¢–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: $tests_fixed  
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: $coverage%
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $time_spent –º–∏–Ω—É—Ç

### üöÄ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
- –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∞: $code_lines –µ–¥–∏–Ω–∏—Ü/—á–∞—Å
- –°–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤: $test_rate —Ç–µ—Å—Ç–æ–≤/—á–∞—Å
EOF
)
    fi
    
    # Get tracking info
    local tracking_info=$(jq -r ".days.day_$day // empty" "$TRACKING_FILE" 2>/dev/null)
    local start_time=$(echo "$tracking_info" | jq -r '.start_time // "N/A"')
    local end_time=$(echo "$tracking_info" | jq -r '.end_time // "N/A"') 
    local duration=$(echo "$tracking_info" | jq -r '.duration_hours // "0"')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
    if [ -n "$files_changed" ] && [ -n "$tests_fixed" ]; then
        local metrics_json=$(cat <<EOF
{
    "files_changed": $files_changed,
    "tests_fixed": $tests_fixed,
    "test_coverage_percent": $coverage,
    "actual_work_time": $time_spent
}
EOF
)
        db_update_metrics $day "$metrics_json"
    fi
    
    # Create report
    cat > "$filepath" << EOF
# –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è $day

## üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞**: $date
- **–î–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞**: $day
- **–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å**: $(calculate_calendar_day)

## ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
- **–ù–∞—á–∞–ª–æ**: $start_time
- **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ**: $end_time
- **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: $duration —á–∞—Å–æ–≤

$metrics

## üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
$(get_achievements_from_summary $day)

## üîÑ –°—Ç–∞—Ç—É—Å
‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏*
EOF
    
    echo "‚úÖ Completion report created: $filepath"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –≤ –ë–î
    if [ -f "scripts/project_time_db.py" ]; then
        python3 scripts/project_time_db.py update-report $day --completion "$filepath" 2>/dev/null || true
    fi
}

# Initialize database on first run
function init_db_if_needed() {
    if [ -f "scripts/project_time_db.py" ] && [ -f "database/migrations/020_create_project_time_registry.sql" ]; then
        # Check if psycopg2 is installed
        if ! python3 -c "import psycopg2" 2>/dev/null; then
            echo "‚ö†Ô∏è  Installing psycopg2 for database support..."
            pip3 install psycopg2-binary --user 2>/dev/null || true
        fi
        
        # Try to initialize database (will fail silently if already exists)
        python3 scripts/project_time_db.py init 2>/dev/null || true
    fi
}

# Call init on script load
init_db_if_needed 

# Create daily completion report with DB integration 
#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
"""

import requests
import json
import base64
from datetime import datetime

# URL —Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = "https://lms-feedback-server.onrender.com"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç 100x100)
def create_test_image():
    # PNG header + IHDR chunk
    png_data = b'\x89PNG\r\n\x1a\n'
    png_data += b'\x00\x00\x00\rIHDR\x00\x00\x00d\x00\x00\x00d\x08\x02\x00\x00\x00\xff\x80\x02\x03'
    # IDAT chunk with red pixels
    png_data += b'\x00\x00\x00\x1eIDAT\x78\x9c\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x00\xbe\r!\x00\x00\x01\x7f\x19\x9c'
    # IEND chunk
    png_data += b'\x00\x00\x00\x00IEND\xaeB`\x82'
    return base64.b64encode(png_data).decode('utf-8')

# –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
feedback_data = {
    "type": "bug",
    "text": f"–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏: —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí Imgur ‚Üí GitHub ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})",
    "userEmail": "test@example.com",
    "userName": "Test Script",
    "deviceInfo": {
        "model": "Test Device",
        "osVersion": "Test OS",
        "appVersion": "2.0.2",
        "buildNumber": "100",
        "locale": "ru-RU",
        "screenSize": "390x844"
    },
    "timestamp": datetime.now().isoformat(),
    "screenshot": create_test_image()
}

print("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
print("=" * 50)
print(f"üìç –°–µ—Ä–≤–µ—Ä: {SERVER_URL}")
print(f"üìù –¢–∏–ø: {feedback_data['type']}")
print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {feedback_data['text']}")
print(f"üñºÔ∏è  –°–∫—Ä–∏–Ω—à–æ—Ç: –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç 100x100)")
print(f"üìè –†–∞–∑–º–µ—Ä base64: {len(feedback_data['screenshot'])} —Å–∏–º–≤–æ–ª–æ–≤")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
try:
    health_response = requests.get(f"{SERVER_URL}/health", timeout=10)
    if health_response.status_code == 200:
        health_data = health_response.json()
        print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   GitHub: {'‚úÖ' if health_data.get('github_configured') else '‚ùå'}")
        print(f"   Imgur: {'‚úÖ' if health_data.get('imgur_configured') else '‚ùå'}")
    else:
        print(f"   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ feedback
print("\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ feedback...")
try:
    response = requests.post(
        f"{SERVER_URL}/api/v1/feedback",
        json=feedback_data,
        headers={"Content-Type": "application/json"},
        timeout=30
    )
    
    print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code in [200, 201]:
        result = response.json()
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        print(f"   ID: {result.get('id', '–Ω–µ –ø–æ–ª—É—á–µ–Ω')}")
        
        if result.get('github_issue'):
            print(f"\n3Ô∏è‚É£ GitHub Issue —Å–æ–∑–¥–∞–Ω:")
            print(f"   üîó {result['github_issue']}")
            print(f"\n   ‚ö° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ issue - —Ç–∞–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!")
        else:
            print("\n   ‚ö†Ô∏è  GitHub Issue URL –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(result, indent=2)}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

print("\n" + "=" * 50)
print("üìä –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
print("1. GitHub Issue —Å–æ–∑–¥–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
print("2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Imgur")
print("3. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ª–µ–Ω—Ç–µ") 
openapi: 3.0.3
info:
  title: LMS User Management API
  description: API для управления пользователями, аутентификации и интеграции с LDAP
  version: 1.0.0
  contact:
    name: API Support
    email: api@lms.com
servers:
  - url: https://api.lms.com/api/v1
    description: Production server
  - url: https://api-staging.lms.com/api/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: Users
    description: Управление пользователями
  - name: Profile
    description: Личный профиль
  - name: LDAP
    description: Интеграция с LDAP/AD

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Вход по email и паролю
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecurePassword123!
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/ldap-login:
    post:
      tags:
        - Authentication
      summary: Вход через LDAP/AD
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john.doe
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Обновление access токена
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
      responses:
        '200':
          description: Токен обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Выход из системы
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /me:
    get:
      tags:
        - Authentication
      summary: Получить текущего пользователя
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags:
        - Users
      summary: Список пользователей
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: department
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginated'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Users
      summary: Создать пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Получить пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Users
      summary: Обновить пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Users
      summary: Удалить пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Пользователь удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/activate:
    post:
      tags:
        - Users
      summary: Активировать пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Пользователь активирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}/roles:
    put:
      tags:
        - Users
      summary: Синхронизировать роли пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  example: [admin, manager]
      responses:
        '200':
          description: Роли обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /profile:
    get:
      tags:
        - Profile
      summary: Получить свой профиль
      responses:
        '200':
          description: Данные профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'

    put:
      tags:
        - Profile
      summary: Обновить свой профиль
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                middleName:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'

  /ldap/test-connection:
    get:
      tags:
        - LDAP
      summary: Проверить подключение к LDAP
      responses:
        '200':
          description: Подключение успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      connected:
                        type: boolean
                      message:
                        type: string
        '503':
          description: LDAP недоступен

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID пользователя

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Номер страницы

    PerPageParam:
      name: per_page
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Элементов на странице

    SearchParam:
      name: q
      in: query
      schema:
        type: string
      description: Поисковый запрос

  schemas:
    AuthTokens:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            access_token:
              type: string
              example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
            refresh_token:
              type: string
              example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
            token_type:
              type: string
              example: Bearer
            expires_in:
              type: integer
              example: 3600

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        full_name:
          type: string
        department:
          type: string
        position_id:
          type: integer
        status:
          type: string
          enum: [active, inactive, suspended]
        is_admin:
          type: boolean
        email_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserDetail:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            middle_name:
              type: string
            phone:
              type: string
            manager_id:
              type: string
              format: uuid
            ad_username:
              type: string
            ldap_synced_at:
              type: string
              format: date-time
            last_login_at:
              type: string
              format: date-time
            two_factor_enabled:
              type: boolean
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    CurrentUser:
      allOf:
        - $ref: '#/components/schemas/UserDetail'
        - type: object
          properties:
            permissions:
              type: array
              items:
                type: string

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string

    CreateUser:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        password:
          type: string
          format: password
        phone:
          type: string
        department:
          type: string
        positionId:
          type: integer
        managerId:
          type: string
          format: uuid
        adUsername:
          type: string
        roles:
          type: array
          items:
            type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        phone:
          type: string
        department:
          type: string
        positionId:
          type: integer
        managerId:
          type: string
          format: uuid
        adUsername:
          type: string

    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          allOf:
            - $ref: '#/components/schemas/UserDetail'
            - type: object
              properties:
                avatar_url:
                  type: string
                  format: uri
                statistics:
                  type: object
                  properties:
                    courses_completed:
                      type: integer
                    courses_in_progress:
                      type: integer
                    average_score:
                      type: number
                    certificates_earned:
                      type: integer

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/User'

    UserDetailResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/UserDetail'

    UsersPaginated:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            per_page:
              type: integer
            last_page:
              type: integer

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Unauthorized
            errors: {}

    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: You do not have permission to perform this action
            errors: {}

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Resource not found
            errors: {}

    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Validation failed
            errors:
              email:
                - Email is required
                - Email must be valid 
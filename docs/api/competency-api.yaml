openapi: 3.0.0
info:
  title: Competency Management API
  description: API for managing competencies and competency categories in the LMS
  version: 1.0.0
  contact:
    name: LMS Development Team
    email: dev@lms.com

servers:
  - url: https://api.lms.com/v1
    description: Production server
  - url: http://localhost:8000/api/v1
    description: Development server

tags:
  - name: Competencies
    description: Operations related to competencies
  - name: Categories
    description: Operations related to competency categories
  - name: Assessments
    description: Operations related to competency assessments

paths:
  /competencies:
    get:
      summary: List competencies
      description: Get a list of all competencies with optional filtering
      operationId: listCompetencies
      tags:
        - Competencies
      parameters:
        - name: category_id
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: string
            format: uuid
        - name: is_active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of competencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Competency'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 25
    
    post:
      summary: Create competency
      description: Create a new competency
      operationId: createCompetency
      tags:
        - Competencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompetencyRequest'
      responses:
        '201':
          description: Competency created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Competency'
                  message:
                    type: string
                    example: Competency created successfully
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /competencies/{id}:
    get:
      summary: Get competency
      description: Get a specific competency by ID
      operationId: getCompetency
      tags:
        - Competencies
      parameters:
        - name: id
          in: path
          required: true
          description: Competency ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Competency details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Competency'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update competency
      description: Update an existing competency
      operationId: updateCompetency
      tags:
        - Competencies
      parameters:
        - name: id
          in: path
          required: true
          description: Competency ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetencyRequest'
      responses:
        '200':
          description: Competency updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Competency'
                  message:
                    type: string
                    example: Competency updated successfully
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete competency
      description: Delete a competency
      operationId: deleteCompetency
      tags:
        - Competencies
      parameters:
        - name: id
          in: path
          required: true
          description: Competency ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Competency deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Competency deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /competencies/{id}/assess:
    post:
      summary: Assess competency
      description: Create an assessment for a competency
      operationId: assessCompetency
      tags:
        - Competencies
        - Assessments
      parameters:
        - name: id
          in: path
          required: true
          description: Competency ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessCompetencyRequest'
      responses:
        '200':
          description: Assessment recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assessment recorded successfully

  /competency-categories:
    get:
      summary: List categories
      description: Get a list of all competency categories
      operationId: listCategories
      tags:
        - Categories
      parameters:
        - name: parent_id
          in: query
          description: Filter by parent ID (empty string for root categories)
          required: false
          schema:
            type: string
            format: uuid
            nullable: true
        - name: is_active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetencyCategory'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer

components:
  schemas:
    Competency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: PHP Development
        description:
          type: string
          example: Advanced PHP programming skills including OOP, design patterns, and frameworks
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
              example: Technical Skills
            description:
              type: string
        is_active:
          type: boolean
          example: true
        is_core:
          type: boolean
          example: false
        required_level:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
        skill_levels:
          type: array
          items:
            type: object
            properties:
              level:
                type: integer
                example: 1
              name:
                type: string
                example: Beginner
              description:
                type: string
                example: Basic understanding of PHP syntax
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CompetencyCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Technical Skills
        description:
          type: string
          example: Technical competencies for IT professionals
        is_active:
          type: boolean
        parent_id:
          type: string
          format: uuid
          nullable: true
        parent:
          type: object
          nullable: true
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        color:
          type: string
          nullable: true
          example: "#3B82F6"
        icon:
          type: string
          nullable: true
          example: "code"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateCompetencyRequest:
      type: object
      required:
        - name
        - description
        - category_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 200
          example: PHP Development
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: Advanced PHP programming skills
        category_id:
          type: string
          format: uuid
        required_level:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
        is_core:
          type: boolean
          nullable: true

    UpdateCompetencyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          minLength: 10
          maxLength: 1000
        category_id:
          type: string
          format: uuid
        is_active:
          type: boolean

    AssessCompetencyRequest:
      type: object
      required:
        - user_id
        - assessor_id
        - level
      properties:
        user_id:
          type: string
          format: uuid
        assessor_id:
          type: string
          format: uuid
        level:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
          nullable: true
          maxLength: 500

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid request data
        details:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthenticated
    
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized. Missing permission competency.create
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Competency not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [] 